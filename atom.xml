<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MonoShow</title>
  
  <subtitle>Monologue from Kevin_W</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyqskevin.github.io/"/>
  <updated>2019-03-27T07:52:09.898Z</updated>
  <id>https://hyqskevin.github.io/</id>
  
  <author>
    <name>Kevin W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于二叉树的衍生算法</title>
    <link href="https://hyqskevin.github.io/2019/03/24/bintree2/"/>
    <id>https://hyqskevin.github.io/2019/03/24/bintree2/</id>
    <published>2019-03-24T02:33:15.000Z</published>
    <updated>2019-03-27T07:52:09.898Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树衍生算法 loading…<br><a id="more"></a></p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树衍生算法 loading…&lt;br&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的相关操作</title>
    <link href="https://hyqskevin.github.io/2019/03/24/bintree/"/>
    <id>https://hyqskevin.github.io/2019/03/24/bintree/</id>
    <published>2019-03-24T02:33:15.000Z</published>
    <updated>2019-03-27T07:51:54.983Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树的笔记 loading…<br><a id="more"></a></p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h2 id="四种遍历方法"><a href="#四种遍历方法" class="headerlink" title="四种遍历方法"></a>四种遍历方法</h2><h2 id="二叉树静态实现"><a href="#二叉树静态实现" class="headerlink" title="二叉树静态实现"></a>二叉树静态实现</h2><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h2 id="一般意义上的树"><a href="#一般意义上的树" class="headerlink" title="一般意义上的树"></a>一般意义上的树</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树的笔记 loading…&lt;br&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二分查找策略</title>
    <link href="https://hyqskevin.github.io/2019/03/21/two-divide/"/>
    <id>https://hyqskevin.github.io/2019/03/21/two-divide/</id>
    <published>2019-03-21T13:33:15.000Z</published>
    <updated>2019-03-23T12:21:23.800Z</updated>
    
    <content type="html"><![CDATA[<p>需要一个严格单调的序列，就能将O(n)的复杂度降到O(logn)的优秀算法<br>非常适合有序数列的查找<br>二分的思想也可以用来逼近准确值和降幂求值<br><a id="more"></a></p><h2 id="二分查找思路"><a href="#二分查找思路" class="headerlink" title="二分查找思路"></a>二分查找思路</h2><p>设left，right，mid，查找数x<br>查找的数 &gt; mid，left = mid + 1<br>查找的数 &lt; mid，right = mid - 1<br>直到查找的数 = mid，程序结束</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">  &#123;</span><br><span class="line">    mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[mid] == x) <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[mid] &gt; x)</span><br><span class="line">      right = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//查找失败则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>;  <span class="comment">//序列元素个数</span></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[n] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> result = binSearch(<span class="built_in">array</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">6</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mid = (left + right) / 2 可能会导致int类型溢出，可以改成 mid = left + (right - left) / 2</li></ul><h2 id="当序列中有相同的元素"><a href="#当序列中有相同的元素" class="headerlink" title="当序列中有相同的元素"></a>当序列中有相同的元素</h2><p>求解序列中第一个等于x的元素和最后一个等于x的元素</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">  &#123;</span><br><span class="line">    mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[mid] &gt;= x) </span><br><span class="line">      right = mid;</span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> left;  <span class="comment">// left==right 循环停止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">  &#123;</span><br><span class="line">    mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span>[mid] &gt; x) </span><br><span class="line">      right = mid;</span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> left;  <span class="comment">// left==right 循环停止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逼近无理数近似值"><a href="#逼近无理数近似值" class="headerlink" title="逼近无理数近似值"></a>逼近无理数近似值</h2><p>计算f(x)中x的值</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ...;  <span class="comment">// f(x)的公式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> L, <span class="keyword">double</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> left = L, right = R, mid;</span><br><span class="line">  <span class="keyword">while</span>(right - left &gt; eps)</span><br><span class="line">  &#123;</span><br><span class="line">    mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(func(mid)&gt;<span class="number">0</span>) right = mid;</span><br><span class="line">    <span class="keyword">else</span> left = mid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速求幂"><a href="#快速求幂" class="headerlink" title="快速求幂"></a>快速求幂</h2><p>二分幂的思想可以用来降低时间复杂度<br>若b为奇数，a^b = a <em> a^b-1<br>若b为偶数，a^b = a^b/2 </em> a^b/2<br>直到a^0 =1，依次退回计算</p><h3 id="快速幂递归写法"><a href="#快速幂递归写法" class="headerlink" title="快速幂递归写法"></a>快速幂递归写法</h3><p>求解 a^b%m的递归写法</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">binFunc</span><span class="params">(LL a, LL b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// a^0 == 1</span></span><br><span class="line">  <span class="keyword">if</span>(b % <span class="number">2</span> ==<span class="number">1</span>) <span class="keyword">return</span> a* binFunc(a, b<span class="number">-1</span>, m) % m;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LL mul = binFunc(a, b/<span class="number">2</span>, m);</span><br><span class="line">    <span class="keyword">return</span> mul * mul % m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>b % 2 ==1</code>可以写成<code>b&amp;1</code>,将b和1进行按位与操作，判断b末尾是否为1</li></ul><h3 id="快速幂非递归写法"><a href="#快速幂非递归写法" class="headerlink" title="快速幂非递归写法"></a>快速幂非递归写法</h3><p>将b写成若干2次幂之和，将a^b表示成若干项乘积</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">binFunc</span><span class="params">(LL a, LL b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LL ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = ans * a % m;  <span class="comment">//判断2进制末尾是否为1，是的话*a</span></span><br><span class="line">    a = a * a % m;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要一个严格单调的序列，就能将O(n)的复杂度降到O(logn)的优秀算法&lt;br&gt;非常适合有序数列的查找&lt;br&gt;二分的思想也可以用来逼近准确值和降幂求值&lt;br&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>分治和递归基础算法</title>
    <link href="https://hyqskevin.github.io/2019/03/21/divide/"/>
    <id>https://hyqskevin.github.io/2019/03/21/divide/</id>
    <published>2019-03-21T02:02:47.000Z</published>
    <updated>2019-03-21T03:30:23.441Z</updated>
    
    <content type="html"><![CDATA[<p>写分治和贪心时，习惯性地会去思索程序的全局，而一旦展开去想，基本上就大脑溢出了<br>目前还是无法把握<strong>递归式</strong>和<strong>递归</strong>边界，这算法终将是一生之敌。<br><a id="more"></a></p><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><p>用Fibonacci数列简单熟悉一下算法</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span> | n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//递归边界</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>);  <span class="comment">//递归式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>,Fibonacci(n));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>按照字典顺序从小到大顺序输出1-n全排列</p><p>思路：数组P存放当前排列，hashTable 置为 true 存放已在P中的数字<br>递归式：P按位处理，数字x不在P中，将x填入P，P处理下一位<br>递归边界：处理完n位，输出排列，hashTable[x]=false 还原</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> P[maxn],hashTable[maxn] = &#123;<span class="literal">false</span>&#125;,n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理第index位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index == n+<span class="number">1</span>)  <span class="comment">//到达递归边界</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>,P[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)  <span class="comment">//递归式逻辑</span></span><br><span class="line">      &#123;</span><br><span class="line">        P[index] = x;</span><br><span class="line">        hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">        generateP(index+<span class="number">1</span>);</span><br><span class="line">        hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  <span class="comment">//输入有几个数</span></span><br><span class="line">  generateP(<span class="number">1</span>)；  <span class="comment">//从1开始递归</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><p>皇后两两不在同行同列同对角线</p><p>思路：到达递归边界时，遍历任意两个皇后查看是否满足条件<br>递归边界：列index到达n，满足八皇后条件，count+1<br>递归式：行x不在hashTable中，此列放置皇后，index移动到下一列</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(index == n+<span class="number">1</span>)  <span class="comment">//到达递归边界，判断是否合法</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(P[i]-P[j]) == <span class="built_in">abs</span>(i-j))</span><br><span class="line">          flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) count++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)  <span class="comment">//递归式</span></span><br><span class="line">      &#123;</span><br><span class="line">        P[index] = x;</span><br><span class="line">        hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">        generateP(index+<span class="number">1</span>);</span><br><span class="line">        hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举所有情况会比较耗时间，可以在放置皇后的同时遍历之前的，判断是否有冲突</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(inedx == n+<span class="number">1</span>)  <span class="comment">//到达递归边界</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">1</span>; pre&lt;index; pre++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">abs</span>(P[index]-P[pre]) == <span class="built_in">abs</span>(index-pre))</span><br><span class="line">          &#123;</span><br><span class="line">            flag == <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">          P[index] = x;</span><br><span class="line">          hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">          generateP(index+<span class="number">1</span>);</span><br><span class="line">          hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写分治和贪心时，习惯性地会去思索程序的全局，而一旦展开去想，基本上就大脑溢出了&lt;br&gt;目前还是无法把握&lt;strong&gt;递归式&lt;/strong&gt;和&lt;strong&gt;递归&lt;/strong&gt;边界，这算法终将是一生之敌。&lt;br&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>散列表基础算法</title>
    <link href="https://hyqskevin.github.io/2019/03/19/hashtable/"/>
    <id>https://hyqskevin.github.io/2019/03/19/hashtable/</id>
    <published>2019-03-19T02:10:47.000Z</published>
    <updated>2019-03-21T02:03:27.760Z</updated>
    
    <content type="html"><![CDATA[<p>-散列基础-<br>散列（hash）是常用的算法思想之一，它使用空间换时间的思想在我第一次碰到时就感觉巧妙如魔法一般。特别是在进行一些大量数字和字符串比较方面，hash能瞬间将O(n^2)的复杂度降到O(n),单次查询的复杂度降到O(1)，靠的就是数组下标与查询的元素之间建立的唯一转换关系。<br><a id="more"></a></p><h2 id="常用hash"><a href="#常用hash" class="headerlink" title="常用hash"></a>常用hash</h2><p>线性变换函数：H(key) = a*key+b<br>除留余数：h(key) = key%mod</p><p>除留余数法会出现<strong>冲突</strong>的情况，需要解决多个hash值相同的情况</p><ol><li>线性探测法：从当前位置检查相邻地址是否被占用，如果都被占用，循环检查下一个位置</li><li>平方探测法：从当前位置检查+1，-1，+4，-4，+9，-9……如果检查中+k^2超过表长（Tablesize），[H(key)+k^2]%Tablesize</li><li>链地址法：把hash相同的key连接成单链表</li></ol><h2 id="整数hash"><a href="#整数hash" class="headerlink" title="整数hash"></a>整数hash</h2><h3 id="查询数组M中的数在数组N中是否出现过"><a href="#查询数组M中的数在数组N中是否出现过" class="headerlink" title="查询数组M中的数在数组N中是否出现过"></a>查询数组M中的数在数组N中是否出现过</h3><p>常规思路：遍历所有N，要遍历M次，时间复杂度O(MN)<br>hash思路：bool hashTable[maxn]={false}，先读入N，N中出现的数x，hashTable[x]=true,再查询M，时间复杂度O(M+N)</p><ul><li>示例</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">bool</span> hashTable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n[<span class="number">10</span>] = &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> m[<span class="number">3</span>] = &#123;<span class="number">8</span>,<span class="number">22</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> x;  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">      hashTable&#123;n[i]&#125; = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(hashTable&#123;m[j]]&#125; == <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d,yes\n"</span>,m[j]);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d,no\n"</span>,m[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询M中的数在N中出现的次数"><a href="#查询M中的数在N中出现的次数" class="headerlink" title="查询M中的数在N中出现的次数"></a>查询M中的数在N中出现的次数</h3><p>将hashTable 替换为int类型进行计数</p><ul><li>示例</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> hashTable[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n[<span class="number">10</span>] = &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> m[<span class="number">3</span>] = &#123;<span class="number">8</span>,<span class="number">12</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">      hashTable&#123;n[i]&#125;++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashTable&#123;m[j]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h2><p>需要将字符串和整数唯一对应，可以直接对应或使用hash函数对应：A-Z 0~25，a-z 26~51</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将字符串S转换为整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashFunc</span><span class="params">(<span class="keyword">char</span> S[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> hashID = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(S[i]&gt;=<span class="string">'A'</span> &amp;&amp; S[i]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">      hashID = hashID*<span class="number">52</span> + S[i] - <span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S[i]&gt;=<span class="string">'a'</span> &amp;&amp; S[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">      hashID = hashID*<span class="number">52</span> + S[i]-<span class="string">'a'</span>+ <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = hashFunc(P[i],<span class="number">52</span>);</span><br><span class="line">hashTable[id] = P[i];</span><br></pre></td></tr></table></figure><h3 id="查询N个字符串中M个字符串出现的次数，每个字符串长度固定为5"><a href="#查询N个字符串中M个字符串出现的次数，每个字符串长度固定为5" class="headerlink" title="查询N个字符串中M个字符串出现的次数，每个字符串长度固定为5"></a>查询N个字符串中M个字符串出现的次数，每个字符串长度固定为5</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> S[maxn][<span class="number">5</span>],temp[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> hashTable[<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个字符串拥有唯一id</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashFunc</span><span class="params">(<span class="keyword">char</span> S[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    id = id*<span class="number">26</span> + (S[i]-<span class="string">'A'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sacnf(<span class="string">"%s"</span>, S[i]);</span><br><span class="line">    <span class="keyword">int</span> id  = hashFunc(s[i], <span class="number">3</span>);</span><br><span class="line">    hashTable[id]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sacnf(<span class="string">"%s"</span>,temp);</span><br><span class="line">    <span class="keyword">int</span> id = hashFunc(temp, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,hashTable[id]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-散列基础-&lt;br&gt;散列（hash）是常用的算法思想之一，它使用空间换时间的思想在我第一次碰到时就感觉巧妙如魔法一般。特别是在进行一些大量数字和字符串比较方面，hash能瞬间将O(n^2)的复杂度降到O(n),单次查询的复杂度降到O(1)，靠的就是数组下标与查询的元素之间建立的唯一转换关系。&lt;br&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Autonomous Vehicles translate -- datasets &amp; bechmarks</title>
    <link href="https://hyqskevin.github.io/2019/03/18/datasets-benchmarks/"/>
    <id>https://hyqskevin.github.io/2019/03/18/datasets-benchmarks/</id>
    <published>2019-03-17T16:03:14.000Z</published>
    <updated>2019-03-18T04:31:51.888Z</updated>
    
    <content type="html"><![CDATA[<p>Computer Vision for Autonomous Vehicles:<br>Problems, Datasets and State-of-the-Art<br>自动驾驶技术的计算机视觉：问题，数据和前沿技术<br><strong>数据集和基准</strong></p><a id="more"></a><h2 id="datasets-amp-Benchmarks-数据集和基准"><a href="#datasets-amp-Benchmarks-数据集和基准" class="headerlink" title="datasets &amp; Benchmarks 数据集和基准"></a>datasets &amp; Benchmarks 数据集和基准</h2><ul><li><p>Datasets have played a key role in the progress of many research fields by providing problem specific examples with ground truth. They allow quantitative evaluation of approaches providing key insights about their capacities and limitations. |In particular, several of these datasets Geiger et al. (2012b); Scharstein &amp; Szeliski (2002); Baker et al. (2011); Everingham et al. (2010); Cordts et al. (2016) also provide online evaluation servers which allow for a fair comparison on held-out test sets and provide researchers in the field an up-to-date overview over the state-of-the-art. |This way, current progress and remaining challenges can be easily identified by the research community. In the context of autonomous vehicles, the KITTI dataset Geiger et al. (2012b) and the Cityscapes dataset Cordts et al.(2016) have introduced challenging benchmarks for reconstruction, motion estimation and recognition tasks, and contributed to closing the gap between laboratory settings and challenging real-world situations. |Only a few years ago, datasets with a few hundred annotated examples were considered sufficient for many problems. The introduction of datasets with many hundred to thousands of labeled examples, however, has led to spectacular breakthroughs in many computer vision disciplines by training high-capacity deep models in a supervised fashion. |However, collecting a large amount of annotated data is not an easy endeavor, in particular for tasks such as optical flow or semantic segmentation. This initiated a collective effort to produce that kind of data in several areas by searching for ways to automate the process as much as possible such as through semi-supervised learning or synthesization.</p></li><li><p>数据集在许多研究领域进展方面发挥了关键作用，提供了真实的(ground truth)问题特例。它们允许通过提供有关其能力与局限的核心信息，数据集还可以对方法进行量化评估。</p></li><li>特别地，这些数据集中的几个比如Geiger（2012b）;Scharstein＆Szeliski（2002）; Baker（2011）;Everinghamet al（2010）; Cordts（2016）也提供在线评估服务器允许在延期测试（held-out）中进行公平的比较，而且为该领域的研究人员提供更新的目前最好的算法。</li><li>这种方式可以让研究团队很容易地确定目前的进展和剩下的挑战。在自主车辆的环境中，KITTI数据集Geiger（2012b）和Cityscapes数据集Cordts （2016）为重建、运动估计和识别任务引入了挑战性的基准，因此缩小了实验室设置与挑战现实世界的情况之间的差距。</li><li>几年前，有数百个注释例子的数据集对于解决很多问题是足够的。然而，有数百到数千个有标签的例子的数据集的引入，通过以监督的方式训练大容量深度模型，已经使得许多计算机视觉学科的重大突破。</li><li>然而，收集大量的注释数据不是一个容易的事情，特别是对于诸如光流或者语义分割的任务。这使得集体努力通过搜索尽可能多的方式来自动化过程，例如通过半监督学习或合成，从而在多个领域产生了这种数据。</li></ul><h4 id="Real-World-Datasets-真实数据集"><a href="#Real-World-Datasets-真实数据集" class="headerlink" title="Real-World Datasets 真实数据集"></a>Real-World Datasets 真实数据集</h4><ul><li>While several algorithmic aspects can be inspected using synthetic data, real-world datasets are necessary to guarantee performance of algorithms in real situations. For example, algorithms employed in practice need to handle complex objects and environments while facing challenging environmental conditions such as direct lighting, reflections from specular surfaces, fog or rain. The acquisition of ground truth is often labor intensive because very often this kind of information cannot be directly obtained with a sensor but requires tedious manual annotation. |For example, (Scharstein &amp; Szeliski (2002),Baker et al. (2011)) acquire dense pixel-level annotations in a controlled lab environment whereas Geiger et al. (2012b); Kondermann et al. (2016) provide sparse pixel-level annotations of real street scenes using a LiDAR laser scanner.</li><li><p>Recently, crowdsourcing with Amazon’s Mechanical Turk9 have become very popular to create annotations for large scale datasets, e.g., Deng et al. (2009); Lin et al. (2014); Leal-Taix´e et al. (2015); Milan et al. (2016). However, the annotation quality obtained via Mechanical Turk is often not sufficient to be considered as reference and significant efforts in post-processing and cleaning-up the obtained labels is typically required. |In the following, we will first discuss the most popular computer vision datasets and benchmarks addressing tasks relevant to autonomous vision. Thereafter, we will focus on datasets particularly dedicated to autonomous vehicle applications.</p></li><li><p>虽然可以使用合成数据检查几个算法方面，但实际数据集对于确保算法在实际情况下的性能是必要的。例如，在实践中使用的算法需要处理复杂的对象和环境，同时面对挑战性的环境条件，例如直接照明，镜面反射，雾或雨。获取ground truth通常是劳动密集型的，因为这种信息通常不能用传感器直接获得，而是需要繁琐的手动注释。</p></li><li>例如，（Scharstein＆Szeliski（2002），Baker（2011））在受控实验室环境中获得了密集的像素级注释，而Geiger等人（2012B）; Kondermann等人（2016）使用LiDAR激光扫描仪提供实际街景场景的稀疏像素级注解。</li><li>最近，亚马逊的Mechanical Turk的众包已经变得非常受欢迎，为大型数据集创建注释，例如Deng（2009）;Lin（2014）; Leal-Taix’e（2015）; Milan（2016）。然而，通过Mechanical Turk获得的注释质量通常不太合适被认为是参考，并且通常需要在后处理中最初的重大努力和清理所获得的标签中也是非常需要的。</li><li><p>在下文中，我们将首先讨论最流行的计算机视觉数据集和基准，以解决与自主视觉相关的任务。此后，我们将专注于数据集，尤其致力于自动驾驶车辆的应用。</p></li><li><p><strong>Stereo and 3D Reconstruction</strong>: The Middlebury stereo benchmark introduced by Scharstein &amp; Szeliski (2002) provides several multi-frame stereo data sets for comparing the performance of stereo matching algorithms. |Pixel-level ground truth is obtained by hand labeling and reconstructing planar components in piecewise planar scenes. Scharstein &amp; Szeliski (2002) further provide a taxonomy of stereo algorithms that allows the comparison of design decisions and a test bed for quantitative evaluation. |Approaches submitted to their benchmark website are evaluated using the root mean squared error and the percentage of bad pixels between the estimated and ground truth disparity maps.</p></li><li>Scharstein &amp; Szeliski (2003) and Scharstein et al. (2014) introduced novel datasets to the Middlebury benchmark comprising more complex scenes and including ordinary objects like chairs, tables and plants. In both works a structured lighting system was used to create ground truth. |For the latest version Middlebury v3, Scharstein et al. (2014) generate highly accurate ground truth for high-resolution stereo images with a novel technique for 2D subpixel correspondence search and self-calibration of cameras as well as projectors. This new version achieves significantly higher disparity and rectification accuracy than those of existing datasets and allows a more precise evaluation. An example depth map from the dataset is illustrated in Figure 1.</li><li><p>The Middlebury multi-view stereo (MVS) benchmark11 by Seitz et al. (2006) is a calibrated multi-view image dataset with registered ground truth 3D models for the comparison of MVS approaches. The benchmark played a key role in the advances of MVS approaches but is relatively small in size with only two scenes. |In contrast, the TUD MVS dataset12 by Jensen et al. (2014) provides 124 different scenes that were also recorded in controlled laboratory environment. Reference data is obtained by combining structured light scans from each camera position and the resulting scans are very dense, each containing 13.4 million points on average. For 44 scenes the full 360 degree model was obtained by rotation and scanning four times with 90 degree intervals. In contrast to the datasets so far, Sch¨ops et al. (2017) provide scenes that are not carefully staged in a controlled laboratory environment and thus represent real world challenges. Sch¨ops et al. (2017) recorded high-resolution DSLR imagery as well as synchronized low-resolution stereo videos in a variety of indoor and outdoor scenes. A high-precision laser scanner allows to register all images with a robust method. The high-resolution images enable the evaluation of detailed 3D reconstruction while the low-resolution stereo images are provided to compare approaches for mobile devices.</p></li><li><p>立体与 3D 重建类数据集：由Scharstein＆Szeliski（2002）引入的Middlebury立体声基准测试仪提供了多个立体声数据集，用于比较立体匹配算法的性能。</p></li><li>通过在分段平面场景中手工标记和重建平面构成获得像素级地面真值。Scharstein和Szeliski（2002）进一步提供立体声算法的分类法，允许通过比较设计决策和测试台来进行定量评估。</li><li>使用均方误差以及估计值和地面真实视差图之间坏像素的百分比来评估提交给其基准网站的方法。</li><li>Scharstein &amp; Szeliski (2003) 和 Scharstein et al. (2014)为Middlebury基准引入了一种新颖的数据集，这个数据及包含更多复杂的场景和普通的物体，比如椅子、桌子、植物等对象。在这两个工作中，均使用一个结构化的照明系统来创造地面实况。</li><li><p>对于最新版本的Middlebury v3，Scharstein（2014）采用新颖的2D子像素对应搜索和相机自动校准技术以及投影机为高分辨率立体图像生成高精度的地面实况。与现有数据集相比，该新版本的差异和整改精度明显提高，可以进行更精确的评估。 Figure 1是来自数据集的示例深度图：<br>Seitz等人的Middlebury多视点立体声（MVS）基准测试（2006）是注册地面真相3D模型用于比较MVS方法一种校准的多视图图像数据集。基准测试在MVS方法的进步中发挥了关键作用，但只有两个场景，尺寸相对较小。相比之下，Jensen等人的TUD MVS数据集（2014年）提供了124个不同的场景，这些场景也被记录在受控实验室环境中。 参考数据通过组合来自每个摄像机位置的结构光扫描获得，并且所得到的扫描非常密集，平均每个包含13.4million个点。对于44个场景，通过以90度的间隔旋转和扫描四次获得完整的360度模型。 与迄今为止的数据集相比，Sch¨ops等人（2017年）提供了在受控实验室环境中未仔细分级的场景，从而代表了现实世界的挑战。Sch¨ops et al. (2017) 录制了高分辨率DSLR单反相机图像以及各种室内和室外场景中同步的低分辨率立体视频。 高精度激光扫描仪允许以强大的方法注册所有图像。高分辨率图像可以评估详细的3D重建，同时提供低分辨率立体图像来比较移动设备的方法。</p></li><li><p><strong>Optical Flow</strong>: The Middlebury flow benchmark13 by Baker et al. (2011) provides sequences with non-rigid motion, synthetic sequences and a subset of the Middlebury stereo benchmark sequences (static scenes) for the evaluation of optical flow methods. For all non-rigid sequences, ground truth flow is obtained by tracking hidden fluorescent textures sprayed onto the objects using a toothbrush. The dataset comprises eight different sequences with eight frames each. Ground truth is provided for one pair of frames per sequence.</p></li><li>Besides the limited size, real world challenges like complex structures, lighting variation and shadows are missing as the dataset necessitates laboratory conditions which allow for manipulating the light source between individual captures. In addition, it only comprises very small motions of up to twelve pixels which do not admit the investigation of challenges provided by fast motions. Compared to other datasets, however, the Middlebury dataset allows to evaluate sub-pixel precision since it provides very accurate and dense ground truth. Performance is measured using the angular error (AEE) and the absolute end point error (EPE) between the estimated flow and the ground truth.</li><li>Janai et al. (2017) present a novel optical flow dataset comprising of complex real world scenes in contrast to the laboratory setting in Middlebury. High-speed video cameras are used to create accurate reference data by tracking pixel through densely sampled space-time volumes. This method allows to acquire optical flow ground truth in challenging everyday scenes in an automatic fashion and to augment realistic effects such as motion blur to compare methods in varying conditions. Janai et al. (2017) provide 160 diverse real-world sequences of dynamic scenes with a significantly larger resolution (1280X1024 Pixels) than previous optical datasets and compare several state of-the-art optical techniques on this data.</li></ul><p>光流类数据集：Baker等人的“Middlebury流量标准” （2011）提供了具有非刚性运动序列，合成序列和Middlebury立体声基准序列（静态场景）的子集的序列，用于评估光流方法。 对于所有非刚性序列，通过使用toothbrush牙刷追踪在物体上喷洒的隐藏的荧光纹理来获得地面真实流。 数据集包含八个不同的序列，每个序列具有八个帧。 每个序列提供一对帧的地面实况。<br>除了有限的大小之外，由于数据集需要实验室条件，允许在各个捕获之间操纵光源，所以缺少像复杂结构，照明变化和阴影这样的真实世界挑战。 此外，它只包含最多十二个像素的非常小的运动，不承认对快速运动提供的挑战的调查。 然而，与其他数据集相比，Middlebury数据集可以评估子像素精度，因为它提供了非常精确和密集的地面实例。 使用角度误差（AEE）和估计流量与地面实数之间的绝对终点误差（EPE）来测量性能。<br>Janai等人 （2017）提出了一个新颖的光流数据集，其中包括复杂的现实世界场景，与Middlebury的实验室设置相反。 高速视频摄像机用于通过密集采样的时空容量跟踪像素来创建精确的参考数据。 该方法允许以自动方式在挑战性的日常场景中获取光流场地真相，并且增加诸如运动模糊的现实效果以在不同条件下比较方法。  Janai等人 （2017年）提供了160个不同的现实世界动态场景序列，具有比以前的光学数据集显着更大的分辨率（1280x1024像素），并比较了这些数据的几种最先进的光学技术。</p><ul><li><strong>Object Recognition and Segmentation</strong>: The availability of large-scale, publicly available datasets such as ImageNet (Denget al. (2009)), PASCAL VOC (Everingham et al. (2010)), Microsoft COCO (Lin et al.(2014)), Cityscapes (Cordts et al.(2016)) and TorontoCity (Wang et al. (2016)) have had a major impact on the success of deep learning in object classification, detection, and semantic segmentation tasks.</li><li>The PASCAL Visual Object Classes (VOC) challenge14 by Everingham et al. (2010) is a benchmark for object classification, object detection, object segmentation and action recognition. It consists of challenging consumer photographs collected from Flickr with high quality annotations and contains large variability in pose, illumination and occlusion. Since its introduction, the VOC challenge has been very popular and was yearly updated and adapted to the needs of the community until the end of the program in 2012. Whereas the first challenge in 2005 had only 4 different classes, 20 dierent object classes<br>were introduced in 2007. Over the years, the benchmark grew in size reaching a total of 11,530 images with 27,450 ROI annotated objects in 2012.</li><li><p>In 2014, Lin et al. (2014) introduced the Microsoft COCO dataset15 for the object detection, instance segmentation and contextual reasoning. They provide images of complex everyday scenes containing common objects in their natural context. The dataset comprises 91 object classes, 2.5 million annotated instances and 328k images in total. Microsoft COCO is significantly larger in the number of instances per class than the PASCAL VOC object segmentation benchmark. All objects are annotated with per-instance segmentations in an extensive crowd worker effort. Similar to PASCAL VOC, the intersection-overunion metric is used for evaluation.</p></li><li><p>对象识别与分割类数据集：大量的公开数据集，如ImageNet（Deng等人（2009）），PASCAL VOC（Everingham等（2010）），Microsoft COCO（Lin等人（2014）），Cityscapes（Cordts （2016））和TorontoCity（Wang等人（2016年））对物体分类，目标检测和语义分割任务中深入学习的成功产生了重大影响。</p></li><li>由Everingham等人（2010）提供的PASCAL视觉对象类（VOC）挑战是对象分类，物体检测，物体分割和动作识别的基准。它由具有高质量标注的Flickr收集的有挑战性的消费者照片组成，并且包含姿势，照明和遮挡的大变化。 自从介绍以来，VOC的挑战一直很受欢并且逐年更新并适应社区的需求直到2012年计划结束。而2005年的第一个挑战只有4个不同的类，2007年引入了20个不同的对象类。多年来，基准规模在2012年达到总共11,530张图像当中共有27,450张ROI注释物体。</li><li><p>2014年，Lin等 （2014）介绍了Microsoft COCO数据集，用于物体检测，实例分割和上下文推理。 它们在自然环境中提供包含常见对象的复杂日常场景的图像。 数据集总共包括91个对象类，250万个注释实例和328k个图像。 Microsoft COCO在PASCAL VOC对象分割基准测试中每个类的实例数显著增加。 所有物体都在广泛的人群工作人员的努力下对每个实例进行标注。 与PASCAL VOC类似，IOU度量用于评估。</p></li><li><p><strong>Tracking</strong>: Leal-Taix´e et al. (2015); Milan et al. (2016) present the MOTChallenge16 which addresses the lack of a centralized benchmark for multi object tracking. The benchmark contains 14 challenging video sequences in unconstrained environments filmed with static and moving cameras and subsumes many existing multi-object tracking benchmarks such as PETS (Ferryman &amp; Shahrokni (2009)) and KITTI (Geiger et al.(2012b)). The annotations for three object classes are provided: moving or standing pedestrians, people that are not in an upright position and others. They use the two popular tracking measures, Multiple Object Tracking Accuracy (MOTA) and Multiple Object Tracking Precision (MOTP) introduced by Stiefelhagen et al. (2007) for the evaluation of the approaches. Detection ground truth provided by the authors allows to analyze the performance of tracking systems independent of a detection system. Methods using a detector and methods using the detection ground truth can be compared separately on their website. - Aerial Image Datasets: The ISPRS benchmark17 (Rottensteiner et al. (2013, 2014)) provides data acquired by airborne sensors for urban object detection and 3D building reconstruction and segmentation. It consists of two datasets: Vaihingen and Downtown Toronto. The object classes considered in the object detection task are building, road, tree, ground, and car. The Vaihingen dataset provides three areas with various object classes and a large test site for road detection algorithms. The Downtown Toronto dataset covers an area of about 1.45 km2 in the central area of Toronto, Canada. Similarly to Vaihingen, there are two smaller areas for object extraction and building reconstruction, as well as one large area for road detection. For each test area, aerial images with orientation parameters, digital surface model (DSM), orthophoto mosaic and airborne laser scans are provided. The quality of the approaches is assessed using several metrics for detection and reconstruction. In both cases completeness, correctness and quality is assessed on a per-area level and a per-object level.</p></li><li><p>追踪：Leal-Taix’e（2015），Milan（2016）提出了MOTChallenge16，解决了多对象跟踪缺乏集中的基准。该基准测试包含14个具有静态和移动摄像机拍摄的无约束环境的挑战性视频序列，并包含许多现有的多对象跟踪基准，如PETS（Ferryman＆Shahrokni（2009））和KITTI（Geiger等（2012b））。提供三个对象类的注释：移动或站立的行人，不在直立位置的人等。他们使用Stiefelhagen等人介绍的两个流行的跟踪措施，多目标跟踪精度（MOTA）和多对象跟踪精度（MOTP）。 （2007）评估方法。作者提供的检测基准真实性可以分析独立于检测系统的跟踪系统的性能。使用检测器的方法和使用检测基准的方法可以在其网站上单独进行比较。 - 空中图像数据集：ISPRS benchmark17（Rottensteiner等（2013，2014））提供了用于城市物体检测和3D建筑重建和分割的机载传感器获取的数据。它包括两个数据集：Vaihingen和多伦多市区。对象检测任务中考虑的对象类是建筑，道路，树木，地面和汽车。 Vaihingen数据集提供了三个不同对象类别的区域和一个用于道路检测算法的大型测试站点。多伦多市中心数据集在加拿大多伦多的中部地区面积约1.45平方公里。与Vaihingen类似，有两个较小的对象提取和建筑重建区域，以及一个大面积的道路检测。对于每个测试区域，提供具有取向参数，数字表面模型（DSM），正射影像马赛克和机载激光扫描的航空图像。使用检测和重建的几个度量来评估方法的质量。在这两种情况下，完整性，正确性和质量都在每个面积水平和每个物体水平上进行评估。</p></li><li><p><strong>Autonomous Driving</strong>: In 2012, Geiger et al. (2012b, 2013) have introduced the KITTI Vision Benchmark18 for stereo, optical flow, visual odometry/SLAM and 3D object detection (Figure). The dataset has been captured from an autonomous driving platform and comprises six hours of recordings using high-resolution color and grayscale stereo cameras, a Velodyne 3D laser scanner and high-precision GPS/IMU inertial navigation system. The stereo and optical flow benchmarks derived from this dataset comprise 194 training and 195 test image pairs at a resolution of 1280  376 pixels and sparse ground truth obtained by projecting accumulated 3D laser point clouds onto the image. Due to the limitations of the rotating laser scanner used as reference sensor, the stereo and optical flow benchmark is restricted to static scenes with camera motion.</p></li><li>To provide ground truth motion fields for dynamic scenes, Menze &amp; Geiger (2015) have annotated 400 dynamic scenes, fitting accurate 3D CAD models to all vehicles in motion in to order to obtain flow and stereo ground truth for these objects. The KITTI flow and stereo benchmarks use the percentage of erroneous (bad) pixels to assess the performance of the submitted methods. Additionally, Menze &amp; Geiger (2015) combined the stereo and flow ground truth to form a novel 3D scene flow benchmark. For evaluating scene flow, they combine classical stereo and optical flow measures.</li><li>The visual odometry / SLAM challenge consists of 22 stereo sequences, with a total length of 39.2 km. The ground truth pose is obtained using GPS/IMU localization unit which was fed with RTK correction signals. The translational and rotational error averaged over a particular trajectory length is considered for evaluation.</li><li>For the KITTI object detection challenge, a special 3D labeling tool has been developed to annotate all 3D objects with 3D bounding boxes for 7481 training and 7518 test images. The benchmark for the object detection task was separated into a vehicle, pedestrian and cyclist detection tasks, allowing to focus the analysis on the most important problems in the context of autonomous vehicles. Following PASCAL VOC Everingham et al. (2010), the intersection-over-union (IOU) metric is used for evaluation. For an additional evaluation, this metric has been extended to capture both 2D detection and 3D orientation estimation performance. A true 3D evaluation is planned to be released shortly.</li><li><p>The KITTI benchmark was extended by Fritsch et al. (2013) to the task of road/lane detection. In total, 600 diverse training and test images have been selected for manual annotation of road and lane areas. Mattyus et al. (2016) used aerial images to enhance the KITTI dataset with fine grained segmentation categories such as parking spots and sidewalk as well as the number and location of road lanes. The KITTI dataset has established itself as one of the standard benchmarks in all of the aforementioned tasks, in particular in the context of autonomous driving applications.</p></li><li><p>2012年，Geiger等（2012b，2013）推出了用于立体声，光流，视觉测距/ SLAM和3D物体检测的KITTI Vision Benchmark18（图）。数据集已从自主驾驶平台捕获，包括使用高分辨率彩色和灰度立体相机的六小时录音，Velodyne 3D激光扫描仪和高精度GPS / IMU惯性导航系统。从该数据集派生的立体声和光流基准测试包括194次训练和195个测试图像对，分辨率为1280？通过将累积的3D激光点云投影到图像上获得的376个像素和稀疏的地面真实。由于用作参考传感器的旋转激光扫描仪的局限性，立体声和光学流量基准仅限于具有摄像机运动的静态场景。</p></li><li>为了为动态场景提供地面真相运动场，Menze＆Geiger（2015）已​​经注明了400个动态场景，将精确的3D CAD模型适用于所有运动的车辆，以获得这些物体的流动和立体声地面实况。 KITTI流量和立体声基准使用错误（不良）像素的百分比来评估提交的方法的性能。此外，Menze＆Geiger（2015）结合了立体声和流动地面的真相，形成了一种新颖的3D场景流动基准。为了评估场景流，它们结合了古典立体声和光学流量测量。</li><li>视觉测距/ SLAM挑战包括22个立体声序列，总长39.2公里。使用馈送有RTK校正信号的GPS / IMU定位单元获得地面真实姿势。考虑在特定轨迹长度上平均的平移和旋转误差进行评估。</li><li>对于KITTI对象检测挑战，已经开发了一种特殊的3D标签工具，用于通过3D边界框注释所有3D对象，用于7481个训练和7518个测试图像。物体检测任务的基准被分为车辆，行人和骑车人员检测任务，允许将分析集中在自主车辆的上下文中最重要的问题。按照PASCAL VOC Everingham等（2010），交叉联合（IOU）度量用于评估。为了进一步评估，该指标已扩展到捕获2D检测和3D定向估计性能。计划即将发布真正的3D评估。</li><li><p>由Fritsch等人扩展了KITTI基准。 （2013年）到道路/车道检测任务。总共选择了600多种不同的训练和测试图像，用于手动注释道路和车道区域。 Mattyus等人（2016）使用航空图像来增强KITTI数据集，并提供诸如停车位和人行道之类的细粒度细分类别，以及道路的数​​量和位置。 KITTI数据集已经成为所有上述任务的标准基准之一，特别是在自主驾驶应用的上下文中。</p></li><li><p>Complementary to other datasets, the HCI benchmark19 proposed in Kondermann et al. (2016) specifically includes realistic, systematically varied radiometric and geometric challenges. Overall, a total of 28,504 stereo pairs with stereo and flow ground truth is provided. In contrast to previous datasets, ground truth uncertainties have been estimated for all static regions. The uncertainty estimate is derived from pixel-wise error distributions for each frame which are computed based on Monte Carlo sampling. Dynamic regions are manually masked out and annotated with approximate ground truth for 3,500 image pairs.</p></li><li>The major limitation of this dataset is that all sequences were recorded in a single street section, thus lacking diversity. On the other hand, this enabled better control over the content and environmental conditions. In contrast to the mobile laser scanning solution of KITTI, the static scene is scanned only once using a high-precision laser scanner in order to obtain a dense and highly accurate ground truth of all static parts. Besides the metrics used in KITTI and Middlebury, they use semantically meaningful performance metrics such as edge fattening and surface smoothness for evaluation Honauer et al. (2015). The HCI benchmark is rather new and not established yet but the controlled environment allows to simulate rarely occurring events such as accidents which are of great interest in the evaluation of autonomous driving systems.</li><li>The Caltech Pedestrian Detection Benchmark20 proposed by Dollar et al. (2009) provides 250,000 frames of sequences recorded by a vehicle while driving through regular traffic in an urban environment. 350,000 bounding boxes and 2,300 unique pedestrians were annotated including temporal correspondence between bounding boxes and detailed occlusion labels. Methods are evaluated by plotting the miss rate against false positives and varying the threshold on detection confidence.</li><li>The Cityscapes Dataset21 by Cordts et al. (2016) provides a benchmark and large-scale dataset for pixel-level and instancelevel semantic labeling that captures the complexity of realworld urban scenes. It consists of a large, diverse set of stereo video sequences recorded in streets of different cities. High quality pixel-level annotations are provided for 5,000 images while 20,000 additional images have been annotated with coarse labels obtained using a novel crowd sourcing platform. For two semantic granularities, i.e., classes and categories, they report mean performance scores and evaluate the intersection-overunion metric at instance-level to assess how well individual instances are represented in the labeling.</li><li><p>The TorontoCity benchmark presented byWang et al. (2016) covers the greater Toronto area with 712 km2 of land, 8,439 km of road and around 400,000 buildings. The benchmark covers a large variety of tasks including building height estimation (reconstruction), road centerline and curb extraction, building instance segmentation, building contour extraction, semantic labeling and scene type classification. The dataset was captured from airplanes, drones, and cars driving around the city to provide different perspectives.</p></li><li><p>与其他数据集的补充，在Kondermann等人提出的HCI基准19。 （2016）具体包括现实的，有系统地变化的辐射和几何挑战。总的来说，共提供了28,504立体声和流动地面真相的立体声对。与以前的数据集相比，所有静态区域的地面真实不确定度已被估计。不确定性估计是根据基于蒙特卡洛取样计算的每个帧的像素误差分布得出的。手动屏蔽动态区域并用3,500个图像对的近似地面实例进行注释。</p></li><li>这个数据集的主要限制是所有序列记录在单个街区，因此缺乏多样性。另一方面，这能够更好地控制内容和环境条件。与KITTI的移动激光扫描解决方案相比，静态场景仅使用高精度激光扫描仪扫描一次，以获得所有静态部件的致密和高精度的地面实况。除了KITTI和Middlebury使用的指标之外，他们使用语义有意义的性能指标，如边缘育肥和表面平滑度评估Honauer等。 （2015年）。 HCI基准相当新，尚未建立，但受控环境允许模拟很少发生的事件，例如对自主驾驶系统的评估感兴趣的事故。</li><li>美国加州大学提出的Caltech行人检测基准20 （2009）提供了车辆记录的25万帧序列，同时在城市环境中经常进行交通。包括350,000个边界框和2,300个独特的行人，包括边界框和详细遮挡标签之间的时间对应关系。通过绘制误差率与误报率并在检测置信度上改变阈值来评估方法。</li><li>由Cordts等人的Cityscapes Dataset21 （2016）为像素级和实例级语义标注提供了基准和大型数据集，捕捉到现实城市场景的复杂性。它由不同城市的街道上记录的大型，多样化的立体视频序列组成。为5,000张图像提供了高质量的像素级注释，而使用新颖的人群采购平台获得的粗略标签已经注明了20,000张附加图像。对于两个语义粒度，即类别和类别，他们报告平均绩效评分，并评估实例级别的交叉点平均度量，以评估在标签中表示个体实例的程度。</li><li><p>Wang等人提出的多伦多城市基准（2016年）覆盖多伦多地区，712平方公里的土地，8,439公里的道路和大约40万个建筑物。该基准涵盖了建筑高度估计（重建），道路中心线和路缘提取，建筑物实例分割，建筑轮廓提取，语义标注和场景类型分类等各种任务。数据集被从飞机，无人驾驶飞机和汽车驾驶在城市周围捕获，以提供不同的观点。</p></li><li><p><strong>Long-Term Autonomy</strong>: Several datasets such as KITTI or Cityscapes focus on the development of algorithmic competences for autonomous driving but do not address challenges of long-term autonomy, as for examples environmental changes over time. To address this problem, a novel dataset for autonomous driving has been presented by Maddern et al. (2016). They collected images, LiDAR and GPS data while traversing 1,000 km in central Oxford in the UK during one year. This allowed them to capture large variations in scene appearance due to illumination, weather and seasonal changes, dynamic objects, and constructions. Such long-term datasets allow for in-depth investigation of problems that detain the realization of autonomous vehicles such as localization in different times of the year.</p></li><li><p>长期自动：几个数据集，如KITTI或Cityscapes，着重于开发自主驾驶的算法能力，但不能解决长期自主的挑战，例如随着时间的推移环境变化。 为了解决这个问题，Maddern等人提出了一个用于自主驾驶的新型数据集。（2016）。 他们在一年内在英国牛津中心穿过1000公里的地方收集图像，LiDAR和GPS数据。 这允许他们捕获由于照明，天气和季节变化，动态对象和结构而导致的场景外观的大变化。 这些长期数据集允许深入调查在一年中的不同时期扣留自主车辆的实现问题，例如本地化。</p></li></ul><h4 id="Synthetic-Data"><a href="#Synthetic-Data" class="headerlink" title="Synthetic Data"></a>Synthetic Data</h4><ul><li><p>The generation of ground truth for real examples is very labor intensive and often not even possible at large scale when pixel-level annotations are required. On the other hand, pixel-level ground truth for large-scale synthetic datasets can be easily acquired. However, the creation of realistic virtual world is time-consuming. The popularity of movies and video games have led to an industry creating very realistic 3D content which nourishes the hope to replace real data completely using synthetic datasets. Consequently, several synthetic datasets have been proposed, recently, but it remains an open question whether the realism and variety attained is sufficient to replace real world datasets. Besides, creating realistic virtual content is a time consuming and expensive process itself and the trade-off between real and synthetic (or augmented) data is not clear yet.</p></li><li><p>为真实的例子生成地面真相是非常劳动密集型的，并且在需要像素级注释时通常甚至不可能大规模地实现。 另一方面，可以轻松获取大规模合成数据集的像素级地面实况。 然而，创造现实的虚拟世界是耗时的。 电影和视频游戏的普及导致了行业创造了非常逼真的3D内容，这些内容丰富了使用合成数据集完全替代实际数据的希望。 因此，最近已经提出了几个合成数据集，但是现实主义和品种是否足以替代现实世界数据集仍然是一个悬而未决的问题。 此外，创建逼真的虚拟内容是一个耗时且昂贵的过程本身，真实和合成（或增强）数据之间的权衡尚不清楚。</p></li><li><p><strong>MPI Sintel</strong>: The MPI Sintel Flow benchmark22 presented by Butler et al. (2012) takes advantage of the open source movie Sintel, a short animated film, to render scenes of varying complexity with optical flow ground truth. In total, Sintel comprises 1,628 frames. Different datasets obtained using different passes of the rendering pipeline vary in complexity shown in Figure 3. The albedo pass has roughly piecewise constant colors without illumination effects while the clean pass introduces illumination of various kinds. The final pass adds atmospheric effects, blur, color correction and vignetting. In addition to the average endpoint error, the benchmark website provides different rankings of the methods based on speed, occlusion boundaries, and disocclusions.</p></li><li><strong>Flying Chairs and Flying Things</strong>: The limited size of optical flow datasets hampered the training of deep high-capacity models. To train a convolutional neural network, Dosovitskiy et al.(2015) thus introduced a simple synthetic 2D dataset of flying chairs rendered on top of random background images from Flickr. As the limited realism and size of this dataset proved insufficient to learn highly accurate models, Mayer et al. (2016) presented another large-scale dataset consisting of three synthetic stereo video datasets: FlyingThings3D, Monkaa, Driving. FlyingThings3D provides everyday 3D objects flying along randomized 3D trajectories in a randomly created scene. Inspired by the KITTI dataset a driving dataset has been created which uses car models from the same pool as FlyingThings3D and additionally highly detailed tree and building models from 3D Warehouse. Monkaa is an animated short movie similar to Sintel used in the MPI Sintel benchmark.</li><li><p><strong>Game Engines</strong>: Unfortunately, data from animated movies is very limited since the content is hard to change and such movies are rarely open source. In contrast, game engines allow for creating an infinite amount of data. One way to create virtual worlds using a game engine is presented by Gaidon et al. (2016) which introduces the Virtual KITTI dataset23. They present an efficient real-to-virtual world cloning method to create realistic proxy worlds. A cloned virtual world allows to vary conditions such as weather or illumination and to use different camera settings. This way, the proxy world can be used for virtual data augmentation to train deep networks. Virtual KITTI contains 35 photo-realistic synthetic videos with a total of 17,000 high resolution frames. They provide ground truth for object detection, tracking, scene and instance segmentation, depth and optical flow.</p></li><li><p>MPI Sintel ：由Butler等人提出的MPI Sintel Flow benchmark22 （2012）利用开源电影Sintel（短片动画），以光流地面的真相呈现不同复杂度的场景。总共有Sintel包括1,628帧。使用不同渲染流程获得的不同数据集的复杂度如图3所示。反照率传递具有大致分段恒定颜色，无照明效果，而清洁通道则引入各种照明。最后的通行证增加了大气效果，模糊，颜色校正和渐晕。除了平均终点误差之外，基准网站还提供了基于速度，遮挡边界和不相关的方法的不同排名。</p></li><li>飞行椅和飞行事物：光流数据集的数量有限，妨碍了深层大容量模型的训练。为了训练卷积神经网络，Dosovitskiy等人（2015）引入了一个简单的合成2D数据集，它们呈现在Flickr的随机背景图像之上。由于该数据集的有限现实性和大小证明不足以学习高精度模型，Mayer等（2016）提出了另外一个由三个合成立体视频数据集组成的大型数据集：FlyingThings3D，Monkaa，Driving。 FlyingThings3D在随机创建的场景中提供随机3D轨迹飞行的每天3D对象。受KITTI数据集的启发，已经创建了一个驱动数据集，它使用与FlyingThings3D相同的池中的汽车模型，以及来自3D Warehouse的另外高度详细的树和建筑模型。 Monkaa是一个类似于Sintel的动画短片，用于MPI Sintel基准测试。</li><li><p>游戏引擎：不幸的是，动画电影的数据非常有限，因为内容很难改变，这样的电影很少是开源的。相比之下，游戏引擎允许创建无限量的数据。 Gaidon等人提出了使用游戏引擎创建虚拟世界的一种方式。 （2016）介绍了虚拟KITTI数据集23。他们提出了一种高效的实时虚拟世界克隆方法来创建现实的代理世界。克隆的虚拟世界允许改变诸如天气或照明的条件，并使用不同的相机设置。这样，代理世界可以用于虚拟数据扩充来训练深层网络。虚拟KITTI包含35张照片合成视频，总共17,000个高分辨率帧。它们为物体检测，跟踪，场景和实例分割，深度和光流提供了基础。</p></li><li><p>In concurrent work, Ros et al. (2016) created SYNTHIA24, a synthetic collection of Imagery and Annotations of urban scenarios for semantic segmentation. They rendered a virtual city with the Unity Engine. The dataset consists of 13,400 randomly taken virtual images from the city and four video sequences with 200,000 frames in total. Pixel-level semantic annotations are provided for 13 classes.</p></li><li><p>Richter et al. (2016) have extracted pixel-accurate semantic label maps for images from the commercial video game Grand Theft Auto V. Towards this goal, they developed a wrapper which operates between the game and the graphics hardware to obtain pixel-accurate object signatures across time and instances. The wrapper allows them to produce dense semantic annotations for 25 thousand images synthesized by the photorealistic open-world computer game with minimal human supervision. However, for legal reasons, the extracted 3D geometry can not be made publicly available. Similarly, Qiu &amp; Yuille (2016) provide an open-source tool to create virtual worlds by accessing and modifying the internal data structure of Unreal Engine 4. They show how virtual worlds can be used to test deep learning algorithms by linking them with the deep learning framework Caffe Jia et al. (2014).</p></li><li><p>在并行工作中，Ros et al。 （2016）创建了SYNTHIA24，一种用于语义分割的城市场景图像和注释的综合集合。他们用Unity Engine渲染了一个虚拟的城市。该数据集由13,400个随机抽取的城市虚拟图像和四个视频序列组成，共20万帧。为13个类提供像素级语义注释。</p></li><li>Richter et al。 （2016）已经为商业视频游戏“侠盗猎车手”V提取了图像的像素精确语义标签贴图。为了实现这一目标，他们开发了一种在游戏和图形硬件之间运行的包装器，以便跨越时间获得像素精确的对象签名，实例。包装器允许他们通过最小的人力监督来生成由真实感的开放世界电脑游戏合成的2.5万张图像的密集语义注释。然而，出于法律原因，提取的3D几何不能公开获得。同样，Qiu&amp;Yuille（2016）通过访问和修改虚幻引擎4的内部数据结构，提供了一个开源工具来创建虚拟世界。他们展示了虚拟世界如何通过将深度学习算法与深层次学习框架Caffe Jia（2014）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Computer Vision for Autonomous Vehicles:&lt;br&gt;Problems, Datasets and State-of-the-Art&lt;br&gt;自动驾驶技术的计算机视觉：问题，数据和前沿技术&lt;br&gt;&lt;strong&gt;数据集和基准&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="paper" scheme="https://hyqskevin.github.io/categories/paper/"/>
    
    
  </entry>
  
  <entry>
    <title>各类排序算法实践</title>
    <link href="https://hyqskevin.github.io/2019/03/17/sort/"/>
    <id>https://hyqskevin.github.io/2019/03/17/sort/</id>
    <published>2019-03-17T13:33:15.000Z</published>
    <updated>2019-03-23T14:26:55.445Z</updated>
    
    <content type="html"><![CDATA[<p>比较重要的基础算法，简单罗列一下一些排序的实践过程</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>从待排序部分a[i,m]选择最小元素，与待排序部分的第一个元素a[i]交换，形成新的有序区间a[1,i+1]<br>选择排序总体实践复杂度O(n^2)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> flag = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j] &lt; a[flag]) flag = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换a[i]和a[flag]</span></span><br><span class="line">    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">    a[i] = a[flag];</span><br><span class="line">    a[flag] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h2 id="sort函数运用"><a href="#sort函数运用" class="headerlink" title="sort函数运用"></a>sort函数运用</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比较重要的基础算法，简单罗列一下一些排序的实践过程&lt;/p&gt;
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
      <category term="algorithm" scheme="https://hyqskevin.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Autonomous Vehicles translate -- abstract &amp; previous &amp; history</title>
    <link href="https://hyqskevin.github.io/2019/03/14/abstract-previous-history/"/>
    <id>https://hyqskevin.github.io/2019/03/14/abstract-previous-history/</id>
    <published>2019-03-13T16:03:14.000Z</published>
    <updated>2019-03-13T16:09:58.768Z</updated>
    
    <content type="html"><![CDATA[<p>Computer Vision for Autonomous Vehicles:<br>Problems, Datasets and State-of-the-Art<br>自动驾驶技术的计算机视觉：问题，数据和前沿技术<br><strong>摘要，前沿和技术历史</strong></p><a id="more"></a><h2 id="Abstract-摘要"><a href="#Abstract-摘要" class="headerlink" title="Abstract 摘要"></a>Abstract 摘要</h2><ul><li>Recent years have witnessed amazing progress in AI related fields such as computer vision, machine learning and autonomous vehicles. |As with any rapidly growing field, however, it becomes increasingly difficult to stay up-to-date or enter the field as a beginner. |While several topic specific survey papers have been written, to date no general survey on problems, datasets and methods in computer vision for autonomous vehicles exists.|This paper attempts to narrow this gap by providing a state-of-the-art survey on this topic. Our survey includes both the historically most relevant literature as well as the current state-of-the-art on several specific topics, including recognition, reconstruction, motion estimation, tracking, scene understanding and end-to-end learning. |Towards this goal, we first provide a taxonomy to classify each approach and then analyze the performance of the state-of-the-art on several challenging benchmarking datasets including KITTI, ISPRS, MOT and Cityscapes. |Besides, we discuss open problems and current research challenges. To ease accessibility and accommodate missing references, we will also provide an interactive platform which allows to navigate topics and methods, and provides additional information and project links for each paper.<br>Keywords: Computer Vision, Autonomous Vehicles, Autonomous Vision</li><li>概述：人类见证了最近几年AI相关领域的惊人进步，如计算机视觉，机器学习和自动驾驶。<br>然而任何一个快速发展的领域，保持领先或刚开始进入这些领域变得越来越难(业内人员难以跟上行业节奏或者业外人员难入行)。<br>尽管已经(有人)发表了一些这方面的专题研究文章，但在自动驾驶技术中，计算机视觉的问题、数据和方法至今没有普遍的研究。<br>对于这个话题，这篇论文试图通过提供对前沿技术的研究来减少这种缺口。我们的研究包括最相关的历史资料和当前最前沿的技术，包括识别、重建运动估测、追踪场景理解和端到端学习等。<br>为完成这个目标，我们首先通过分类学对每一个方法进行分类，然后在一些具有挑战性的基础数据集上，如KITTI、ISPRS、MOT和Cityscapes上分析每一个方法在前沿技术上的表现<br>此外，我们还讨论了一些开放问题和当前研究的挑战，为了轻松访问和适应缺失的参考，我们将提供一个具有主题和方法的驾驶交互平台，并提供额外信息和每篇论文的项目链接<br>关键词：计算机视觉，自动驾驶，自主视觉</li></ul><h2 id="previous-前言"><a href="#previous-前言" class="headerlink" title="previous 前言"></a>previous 前言</h2><ul><li><p>Since the first successful demonstrations in the 1980s (Dick-manns &amp; Mysliwetz (1992); Dickmanns &amp; Graefe (1988); Thorpeet al. (1988)), great progress has been made in the field of autonomous vehicles. |Despite these advances, however, it is safe to believe that fully autonomous navigation in arbitrarily complex environments is still decades away. |The reason for this is two-fold: First, autonomous systems which operate in complex dynamic environments require artificial intelligence which generalizes to unpredictable situations and reasons in a timely manner. |Second, informed decisions require accurate perception, yet most of the existing computer vision systems produce errors at a rate which is not acceptable for autonomous navigation.</p></li><li><p>从20世纪80年代首次成功展示以来(Dick-manns &amp; Mysliwetz (1992); Dickmanns &amp; Graefe (1988); Thorpeet al. (1988))(Dick-manns &amp; Mysliwetz (1992); Dickmanns &amp; Graefe (1988); Thorpeet al. (1988))，自动驾驶技术领域已经取得了很大进展<br>尽管有了这些进展，但在任意复杂环境中，实现完全自动驾驶仍然被认为需要几十年<br>原因有两点：第一，在复杂的、动态的环境中运行的自动驾驶系统需要人工智能来归纳不可预测的情形和原因，给出及时的方法<br>第二，信息的决策需要准确的感知，目前大多数已有的计算机视觉系统有一定的错误率，这是自动驾驶技术无法接受的</p></li><li><p>In this paper, we focus on the second aspect which we call autonomous vision and investigate the performance of current perception systems for autonomous vehicles. |Towards this goal, we first provide a taxonomy of problems and classify existing datasets and techniques using this taxonomy, describing the pros and cons of each method. Second, we analyze the current state-of-the-art performance on several popular publicly available benchmarking datasets. |In particular, we provide a novel in-depth qualitative analysis of the KITTI benchmark which shows the easiest and most difficult examples based on the methods submitted to the evaluation server. |Based on this analysis, we discuss open research problems and challenges. To ease navigation, we also provide an interactive online tool which visualizes our taxonomy using a graph and provides additional information and links to project pages in an easily accessible manner. |We hope that our survey will become a useful tool for researchers in the field of autonomous vision and lowers the entry barrier for beginners by providing an exhaustive overview over the field.</p></li><li><p>在这篇论文中，我们关注第二个方面的问题，也就是自动驾驶视觉，同时调查最近的自动驾驶视觉中感知系统的表现<br>为完成这个目标，我们首先给出了问题的分类，归类了已有的数据和可使用的技术，描述每种方法的优缺点。第二，我们在几个流行的公开数据集上分析了最近前沿成果的表现<br>特别是我们给出一种KITTI基准的新的深入定性分析，这些分析展示了提交给评价服务器的方法中最简单和最困难的例子<br>基于这些分析，我们讨论了开放的研究问题和挑战，为了简化学习，我们也给出一个在线交互式工具，用图像可视化了分类，并提供额外信息和一个简单可行的方法与项目页链接<br>我们希望我们的研究能够成为自动驾驶领域研究人员的一个有用的工具，并通过透彻的概述，降低新人进入该领域的门槛</p></li><li><p>There exist several other related surveys. Winner et al. (2015) explains in detail systems for active safety and driver assistance, considering both their structure and their function. |Their focus is to cover all aspects of driver assistance systems and the chapter about machine vision covers only the most basic concepts of the autonomous vision problem. |Klette (2015) provide an overview over vision-based driver assistance systems. They describe most aspects of the perception problem at a high level, but do not provide an in-depth review of the state-of-the-art in each task as we pursue in this paper. |Complementary to our survey, Zhu et al. (2017) provide an overview of environment perception for intelligent vehicles, focusing on lane detection, traffic sign/light recognition as well as vehicle tracking. |In contrast, our goal is to bridge the gap between the robotics, intelligent vehicles, photogrammetry and computer vision communities by providing an extensive overview and comparison which includes works from all fields.</p></li><li>目前也有一些其它相关的研究，Winner et al. (2015)详细地解释了主动安全性和驾驶辅助系统，同时考虑了它们的结构和功能<br>这些研究注重覆盖辅助驾驶系统的所有方面，但关于机器视觉的章节只覆盖到了自动驾驶技术中最基础的概念。<br>Klette (2015)提供了一个基于视觉的辅助驾驶系统的概述，他们描述了高层次感知问题的大部分方面，但并没有像我们在论文中追求的一样，给出在各种前沿任务中比较深入的评测<br>Zhu et al. (2017)提出了智能汽车环境感知的概述，聚焦在车道检测，交通信号灯识别和机车追踪问题，这与我们的研究相互补充。<br>相比较下，我们的目标是通过提供广泛的概述和比较，包括在这个领域所有的成果，在机器人、智能汽车、摄影测绘和计算机视觉之间建立起一座桥梁</li></ul><h2 id="History-of-Autonomous-Driving-自动驾驶技术历史"><a href="#History-of-Autonomous-Driving-自动驾驶技术历史" class="headerlink" title="History of Autonomous Driving 自动驾驶技术历史"></a>History of Autonomous Driving 自动驾驶技术历史</h2><h3 id="Autonomous-Driving-Projects-自动驾驶项目"><a href="#Autonomous-Driving-Projects-自动驾驶项目" class="headerlink" title="Autonomous Driving Projects 自动驾驶项目"></a>Autonomous Driving Projects 自动驾驶项目</h3><ul><li><p>Many governmental institutions worldwide started various projects to explore intelligent transportation systems (ITS). The PROMETHEUS project started 1986 in Europe and involved more than 13 vehicle manufacturers, several research units from governments and universities of 19 European countries. |One of the first projects in the United States was Navlab Thorpe et al. (1988) by the Carnegie Mellon University which achieved a major milestone in 1995, by completing the first autonomous drive from Pittsburgh, PA and Sand Diego, CA. |After many initiatives were launched by universities, research centers and automobile companies, the U.S. government established the National Automated Highway System Consortium (NAHSC) in 1995. |Similar to the U.S., Japan established the Advanced Cruise-Assist Highway System Research Association in 1996 among many automobile industries and research centers to foster research on automatic vehicle guidance. |Bertozzi et al. (2000) survey many approaches to the challenging task of autonomous road following developed during these projects. They concluded that suffcient computing power is become increasingly available, but diffculties like reflections, wet road, direct sunshine, tunnels and shadows still make data interpretation challenging. |Thus, they suggested the enhancement of sensor capabilities. They also pointed out that the legal aspects related to the responsibility and impact of automatic driving on human passengers need to be considered carefully. |In summary, the automation will likely be restricted to special infrastructures and will be extended gradually.</p></li><li><p>世界各地的许多政府机构启动各式各样的项目来开发智能交通系统（ITS）。PROMETHEUS这个项目1986年在欧洲启动，包括超过13个交通工具生产商，当中的许多研究成员来自19个欧洲国家的政府和高校。<br>美国的其中一个项目就是由卡耐基梅隆大学的Navlab Thorpe等人(1988)创建的。这个项目完成了第一次从Pittsburgh，PA,Sand Diego和CA的自动驾驶，在1995年是一个重要的里程碑。<br>在许多大学，研究中心和自动驾驶公司的倡议下，美国政府在1995年成立了自动化公路系统联盟（NAHSC）。<br>和美国一样，日本于1996年成立了高级巡航公路系统研究协会(Advanced Cruise-Assist Highway System Research Association)，包括各大自动驾驶公司和研究中心，来促进自动驾驶导航的研究。<br>Bertozzi等人（2000）调查了许多具有挑战性的任务(通过这些项目发展的自动道路跟随),给出解决方法。他们得出结论，计算能力逐渐得到满足，但像反射，湿面潮湿，阳光直射，隧道和阴影这样的困难仍然使数据解释具有挑战性。<br>因此，他们建议提高传感器性能，同时也指出，关系到自动驾驶对行人法律方面的责任和影响，应该认真的考虑<br>总之，自动化技术(发展)可能会受限于特殊的基础设施，然后再慢慢的普及开来。</p></li><li><p>Motivated by the success of the PROMETHEUS projects to drive autonomously on highways, Franke et al. (1998) describe a real-time vision system for autonomous driving in complex urban traffic situations. |While highway scenarios have been studied intensively, urban scenes have not been addressed before. Their system included depth-based obstacle detection and tracking from stereo as well as a framework for monocular detection and recognition of relevant objects such as traffic signs.</p></li><li><p>The fusion of several perception systems developed by Vis-Lab have led to several proto-type vehicles including ARGO Broggi et al. (1999), TerraMax Braid et al. (2006), and BRAiVE Grisleri &amp; Fedriga (2010). |BRAiVE is the latest vehicle proto-type which is now integrating all systems that VisLab has developed so far. Bertozzi et al. (2011) demonstrated the robustness of their system at the VisLab Intercontinental Autonomous Challenge, a semi-autonomous drive from Italy to China. |The onboard system allows to detect obstacles, lane marking, ditches,berms and identify the presence and position of a preceding vehicle. The information produced by the sensing suite is used to perform different tasks such as leader-following and stop &amp; go.</p></li><li><p>PROMETHEUS项目可以实现在高速公路上自动驾驶，在这个成功的案例推动下，Franke等人描述了在复杂的城市交通场景下的自动驾驶的实时视觉系统。<br>虽然在此之前公路场景情况已经有很多深入的研究，但城市场景却从未得到解决。他们的系统包括基于深度的障碍检测和立体追踪，以及针对相关物体（比如：交通信号）的单目检测和识别框架。</p></li><li><p>Vis-Lab发展的多种传感系统的融合促成了几款原型车包括ARGO Broggi（1999），TerraMax Braid（2006）和BRAiVE Grisleri &amp; Fedriga（2010）的出现<br>BRAiVE是目前VisLab开发的整合所有系统的最新车型。 Bertozzi等人（2011）在VisLab洲际自治挑战赛（VisLab Intercontinental Autonomous Challenge，意大利到中国的半自主驾驶）展示了其系统的稳健性（鲁棒性）。<br>车载系统允许检测障碍物，标记车道、沟渠、护堤，并识别前方是否存在车辆和车辆位置。感应套件提供的信息被用于执行不同的任务，如(leader-following)和前进/停止。?</p></li><li><p>The PROUD project Broggi et al. (2015) slightly modified the BRAiVE prototype Grisleri &amp; Fedriga (2010) to drive in urban roads and freeways open to regular traffic in Parma. |Towards this goal they enrich an openly licensed map with information about the maneuver to be managed (e.g. pedestrian crossing, traffic light, . . . ). |The vehicle was able to handle complex situations such as roundabouts, intersections, priority roads, stops, tunnels, crosswalks, traffic lights, highways, and urban roads without any human intervention.</p></li><li><p>The V-Charge project Furgale et al. (2013) presents an electric automated car outfitted with close-to-market sensors. A fully operational system is proposed including vision-only localization, mapping, navigation and control. |The project supported many works on different problems such as calibration Heng et al. (2013, 2015), stereo H¨ane et al. (2014), reconstruction Haene et al. (2012, 2013, 2014), SLAM Grimmett et al.(2015) and free space detection H¨ane et al. (2015). In addition to these research objectives, the project keeps a strong focus on deploying and evaluating the system in realistic environments.</p></li><li><p>PROUD的项目Broggi（2015）略微修改了BRAiVE原型Grisleri &amp; Fedriga（2010）使得汽车可以在parma城市道路和高速公路的常规交通情况下开车。<br>为了实现这一目标，他们丰富了一份公开授权的地图，其中包含有待完成的机动信息（比如行人过路，交通信号灯等）。<br>该车辆能够在没有人为干涉的情况下处理复杂的场景，例如回旋处，交叉口，优先道路，站点，隧道，人行横道，交通信号灯，高速公路和城市道路。</p></li><li><p>V-Charge项目Furgale等人 （2013年）提供配备了近距离市场（close-to-market）传感器的电动自动车。提出了一个全面可使用的系统，包括视觉定位，映射，导航和控制。<br>该项目解决了诸多困难比如，Heng et al. (2013, 2015)的校准问题, H¨ane(2014)的立体问题,Haene(2012, 2013, 2014)的重建问题, Grimmett(2015)的SLAM问题和 H¨ane(2015)的空白区域检测的问题。除了这些研究目标，该项目还非常重视在现实环境中部署和系统评估。</p></li><li><p>Google started their self-driving car project in 2009 and completed over 1,498,000 miles autonomously until March 2016 in Mountain View, CA, Austin, TX and Kirkland, WA. |Different sensors (i.a. cameras, radars, LiDAR, wheel encoder, GPS) allow to detect pedestrians, cyclists, vehicles, road work and more in all directions. |According to their accident reports, Google’s self-driving cars were involved only in 14 collisions while 13 times were caused by others. In 2016, the project was split off to Waymo, an independent self-driving technology company.</p></li><li><p>Tesla Autopilot is an advanced driver assistant system developed by Tesla which was first rolled out(推出) in 2015 with version of their software. The automation level of the system allows full automation but requires the full attention of the driver to take control if necessary. |From October 2016, all vehicles produced by Tesla were equipped with eight cameras, twelve ultrasonic sensors and a forward-facing radar to enable full self-driving capability.</p></li><li><p>Google于2009年开始了自驾车项目，直到2016年3月完成了超过1,498,000英里的驾驶距离，在美国加利福尼亚州奥斯汀市的Mountain View，WA和柯克兰。<br>不同的传感器（例如摄像机，雷达，LiDAR，车轮编码器，GPS）可以全方位的检测行人，骑自行车的人，车辆，道路工作等等。<br>据他们的事故报道，Google的自动驾驶车只涉及14次碰撞，13次是由别人造成的。 在2016年，这个项目分引入到了一家独立的自动驾驶技术公司Waymo。</p></li><li><p>Tesla Autopilot是由特斯拉开发的高级驾驶员辅助系统，该系统于2015年第一次推出其视觉软件。系统的自动化级别允许完全的自动化，但是仍然需要 要求驾驶员集中注意来控制。<br>从2016年10月起，特斯拉生产的所有车辆配备了8台摄像机，12台超声波传感器和一个前置雷达，以实现全自动驾驶能力。</p></li><li><p><strong>Long Distance Test Demonstrations</strong>: In 1995 the team within the PROMETHEUS project Dickmanns et al. (1990); Franke et al. (1994); Dickmanns et al. (1994) performed the first autonomous long-distance drive from Munich, Germany, to Odense, Denmark, at velocities up to 175 km/h with about 95% autonomous driving. |Similarly, in the U.S. Pomerleau &amp; Jochem (1996) drove from Washington DC to San Diego in the ’No hands across America’ tour with 98% automated steering yet manual longitudinal control.</p></li><li><p>In 2014, Ziegler et al. (2014) demonstrated a 103 km ride from Mannheim to Pforzheim Germany, known as Bertha Benz memorial route, in nearly fully autonomous manner. |They present an autonomous vehicle equipped with close-to-production sensor hardware. Object detection and free-space analysis is performed with radar and stereo vision. Monocular vision is used for traffic light detection and object classification. |Two complementary vision algorithms, point feature based and lane marking based, allow precise localization relative to manually annotated digital road maps. They concluded that even thought the drive was successfully completed the overall behavior is far inferior to the performance level of an attentive human driver.</p></li><li><p>长距离测试演示：1995年，PROMETHEUS项目里Dickmanns（1990）、Franke（1994）、Dickmanns（1994年）的团队演示了从德国慕尼黑（Munich）到丹麦欧登塞（Odense）进行的第一次自动长途驾驶，速度达175公里/小时，其中约95％为自主驾驶。<br>同样，在美国Pomerleau和Jochem（1996）在‘No hands across from America ???’中从华盛顿特区开往圣地亚哥，整个行程中有98％的自动驾驶和偶尔的手动纵向控制。</p></li><li><p>2014年，Zieglar（2014）以近乎完全自动的方式，展示了从曼海姆（Mannheim）到德国普福尔茨海姆（Pforzheim Germany）的103km的骑行，也就是众人所熟知的Bertha Benz纪念路线。<br>他们展示了一种装配有接近生产(close-to-production)的传感器硬件的自动驾驶车辆。由雷达radar和立体视觉来进行物体检测和空白区域分析。单目视觉用来检测交通信号灯和目标分类。<br>两种互补的算法，基于点特征和基于场景标记，允许相对于手动注释的数字路线图进行精确定位。他们得出结论，甚至认为自动驾驶虽然成功完成了，但是整体行为远远达不到细心的驾驶司机的水平。</p></li><li><p>Recently, Bojarski et al. (2016) drove autonomously 98% of the time from Holmdel to Atlantic Highlands in Monmouth County NJ as well as 10 miles on the Garden State Parkway without intervention. |Towards this goal, a convolutional neural network which predicts vehicle control directly from images is used in the NVIDIA DRIVETM PX self-driving car. The system is discussed in greater detail in Section 11.</p></li><li><p>While all aforementioned performed impressively, the general assumption of precisely annotated road maps as well as prerecorded maps for localization demonstrates that autonomous systems are still far from human capabilities. |Most importantly, robust perception from visual information but also general artificial intelligence are required to reach human level reliability and react safely even in complex innercity situations.</p></li><li><p>最近，Bojarski（2016）从霍尔姆德尔（Holmdel）到新泽西州蒙茅斯县（Monmouth）的大西洋高原，以及在花园州立大道没有任何干扰的自动行驶了10英里，其中98%是在自动驾驶。<br>为了实现这一目标，在NVIDIA DRIVETM PX自动驾驶车中使用了一种从图像直接预测车辆控制的卷积神经网络。该系统在第11节中有更详细的讨论。</p></li><li>虽然所有上述表现令人印象深刻，但精确注释路线图的一般假设，以及用于定位的预先载入的地图证实了自主性系统仍然差强人意。<br>最重要的是，这不仅需要视觉信息的强大的感知，也需要一般的人工智能达到和人一样的可靠性，并且在复杂的城市情况下也能安全地做出反应。</li></ul><h3 id="Autonomous-Driving-Competitions-自动驾驶竞赛"><a href="#Autonomous-Driving-Competitions-自动驾驶竞赛" class="headerlink" title="Autonomous Driving Competitions 自动驾驶竞赛"></a>Autonomous Driving Competitions 自动驾驶竞赛</h3><ul><li>The European Land Robot Trial (ELROB) is a demonstration and competition of unmanned systems in realistic scenarios and terrains, focusing mainly on military aspects such as reconnaissance and surveillance, autonomous navigation and convoy transport. In contrast to autonomous driving challenges, ELROB scenarios typically include navigation in rough terrain.</li><li>The first autonomous driving competition focusing on road scenes (though primarily dirt roads) has been initiated by the American Defense Advanced Research Projects Agency (DARPA) in 2004. The DARPA Grand Challenge 2004 offered a prize money of 1 million for the team first finishing a 150 mile route which crossed the border from California to Nevada. |However, none of the robot vehicles completed the route. One year later, in 2005, DARPA announced a second edition of its challenge with 5 vehicles successfully completing the route (Buehler et al.(2007)). The third competition of the DARPA Grand Challenge, known as the Urban Challenge (Buehler et al. (2009)), took place on November 3, 2007 at the site of the George Air Force Base in California. The challenge involved a 96 km urban area course where traffic regulations had to be obeyed while negotiating with other vehicles and merging into traffic.</li><li><p>The Grand Cooperative Driving Challenge (GCDC, see also Geiger et al. (2012a)), a competition focusing on autonomous cooperative driving behavior was held in Helmond, Netherlands in 2011 for the first time and in 2016 for a second edition. During the competition, teams had to negotiate convoys, join convoys and lead convoys. The winner was selected based on a system that assigned points to randomly mixed teams.</p></li><li><p>European Land Robot Trial （ELROB）是现实场景和地形中无人系统的示范与竞赛，主要集中在军事方面，如侦察监视，自动导航和车队运输。与自主驾驶挑战相反，ELROB场景通常包括崎岖地形的导航。</p></li><li>2004年，美国国防高级研究计划署（DARPA）发起了第一个专注于道路场景（主要是泥土路）的自动驾驶比赛。挑战赛提供了100万美元的奖金给首先完成从加利福尼亚州内华达州过境的150英里的路线。<br>然而，机器人车辆都没有完成路线。 一年后，DARPA公布了第二版的挑战，5辆车顺利完成了路线（Buehler（2007））。DARPA大挑战赛的第三场比赛，被称为城市挑战赛（Buehler（2009）），于2007年11月3日在乔治航空加利福尼亚州的基地。<br>这个挑战涉及到一个96公里的城市地区航线，在这段路程中车辆在对其他车辆进行判断并汇合车流时，必须遵守交通法规。</li><li>专注于自动合作驾驶行为的大型合作驾驶挑战（GCDC，Geiger et al（2012a））在荷兰赫尔蒙德（Helmond）举行,2011年首次，2016年第二次。在比赛中，团队需要判断，加入和引导车队。获胜者是基于给随机混合团队分配点数的系统选出来的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Computer Vision for Autonomous Vehicles:&lt;br&gt;Problems, Datasets and State-of-the-Art&lt;br&gt;自动驾驶技术的计算机视觉：问题，数据和前沿技术&lt;br&gt;&lt;strong&gt;摘要，前沿和技术历史&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="paper" scheme="https://hyqskevin.github.io/categories/paper/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP &amp; MySQL learning notes (4)</title>
    <link href="https://hyqskevin.github.io/2019/03/03/php-notes3/"/>
    <id>https://hyqskevin.github.io/2019/03/03/php-notes3/</id>
    <published>2019-03-03T04:38:45.000Z</published>
    <updated>2019-03-03T08:23:01.401Z</updated>
    
    <content type="html"><![CDATA[<p>由于PHP和MySQL版本问题，对 <a href="https://hyqskevin.github.io/2018/10/28/w3school-php/#3-mySQL">PHP &amp; MySQL learning notes (1)</a> 中曾经写过用的PHP操作MySQL数据库进行笔记更新<br>完善 <a href="https://hyqskevin.github.io/2019/01/21/php-notes2/#MySQL">PHP &amp; MySQL learning notes (3)</a> 中的代码<br>重新用 MySQLi (面向对象) MySQLi (面向过程) PDO 三种方式演示PHP操作MySQL<br><a id="more"></a></p><p>可以通过 phpinfo() 查看 mysqli 和 PDO 是否可以使用</p><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><p>面向对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;"</span>, $username, $password);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关闭链接"><a href="#关闭链接" class="headerlink" title="关闭链接"></a>关闭链接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$conn-&gt;close();  <span class="comment">//面向对象</span></span><br><span class="line">mysqli_close($conn);  <span class="comment">//面向过程</span></span><br><span class="line">$conn = <span class="keyword">null</span>;  <span class="comment">//实例PDO</span></span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>面向对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line">$sql = <span class="string">"CREATE DATABASE myDatabase"</span>;</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error creating database: "</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line">$sql = <span class="string">"CREATE DATABASE myDatabase"</span>;</span><br><span class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error creating database: "</span> . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername"</span>, $username, $password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 PDO 错误模式为异常</span></span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">    $sql = <span class="string">"CREATE DATABASE myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 exec() ，因为没有结果返回</span></span><br><span class="line">    $conn-&gt;exec($sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建数据表-CREATE"><a href="#创建数据表-CREATE" class="headerlink" title="创建数据表 CREATE"></a>创建数据表 CREATE</h2><p>创建Mytest表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Mytest (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">6</span>) <span class="keyword">UNSIGNED</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    firstname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    lastname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    reg_date <span class="built_in">TIMESTAMP</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>面向对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabase"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sql 创建数据表</span></span><br><span class="line">$sql = <span class="string">"CREATE TABLE Mytest (</span></span><br><span class="line"><span class="string">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">firstname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">lastname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">email VARCHAR(50),</span></span><br><span class="line"><span class="string">reg_date TIMESTAMP</span></span><br><span class="line"><span class="string">)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Table Mytest</span></span><br><span class="line"><span class="string">   created successfully"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"创建数据表错误: "</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabase"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sql 创建数据表</span></span><br><span class="line">$sql = <span class="string">"CREATE TABLE Mytest (</span></span><br><span class="line"><span class="string">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">firstname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">lastname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">email VARCHAR(50),</span></span><br><span class="line"><span class="string">reg_date TIMESTAMP</span></span><br><span class="line"><span class="string">)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据表 Mytest</span></span><br><span class="line"><span class="string">   创建成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"创建数据表错误: "</span> . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</span><br><span class="line">    <span class="comment">// 设置 PDO 错误模式，用于抛出异常</span></span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sql 创建数据表</span></span><br><span class="line">    $sql = <span class="string">"CREATE TABLE MyTest</span></span><br><span class="line"><span class="string">   (</span></span><br><span class="line"><span class="string">    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    firstname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">    lastname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">    email VARCHAR(50),</span></span><br><span class="line"><span class="string">    reg_date TIMESTAMP</span></span><br><span class="line"><span class="string">    )"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 exec() ，没有结果返回</span></span><br><span class="line">    $conn-&gt;exec($sql);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据表 MyTest</span></span><br><span class="line"><span class="string">   创建成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插入数据-INSERT"><a href="#插入数据-INSERT" class="headerlink" title="插入数据 INSERT"></a>插入数据 INSERT</h2><p>使用INSERT进行插入操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...)</span><br></pre></td></tr></table></figure><h3 id="插入单条数据"><a href="#插入单条数据" class="headerlink" title="插入单条数据"></a>插入单条数据</h3><p>面向对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabase"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"INSERT INTO MyTest (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('John', 'Doe', 'john@example.com')"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabase"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"INSERT INTO MyTest (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('John', 'Doe', 'john@example.com')"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</span><br><span class="line">    <span class="comment">// 设置 PDO 错误模式，用于抛出异常</span></span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">    $sql = <span class="string">"INSERT INTO MyTest</span></span><br><span class="line"><span class="string">   (firstname, lastname, email)</span></span><br><span class="line"><span class="string">    VALUES ('John', 'Doe', 'john@example.com')"</span>;</span><br><span class="line">    <span class="comment">// 使用 exec() ，没有结果返回</span></span><br><span class="line">    $conn-&gt;exec($sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $conn-&gt;exec("INSERT INTO MyTest</span></span><br><span class="line"><span class="comment">   (firstname, lastname, email)</span></span><br><span class="line"><span class="comment">    VALUES ('John', 'Doe', 'john<span class="doctag">@example</span>.com')")</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h3><p>mysqli_multi_query() 函数可用来执行多条SQL语句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">"INSERT INTO MyTest (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('John', 'Doe', 'john@example.com');"</span>;</span><br><span class="line">$sql .= <span class="string">"INSERT INTO MyTest (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Mary', 'Moe', 'mary@example.com');"</span>;</span><br><span class="line">$sql .= <span class="string">"INSERT INTO MyTest (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Julie', 'Dooley', 'julie@example.com')"</span>;</span><br><span class="line"></span><br><span class="line">$conn-&gt;multi_query($sql) === <span class="keyword">TRUE</span> <span class="comment">// 面向对象</span></span><br><span class="line">mysqli_multi_query($conn, $sql)  <span class="comment">//面向过程</span></span><br></pre></td></tr></table></figure><p>PDO需要使用事务函数执行多条并提交，执行失败后要使用回滚</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</span><br><span class="line">    <span class="comment">// set the PDO error mode to exception</span></span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始事务</span></span><br><span class="line">    $conn-&gt;beginTransaction();</span><br><span class="line">    <span class="comment">// SQL 语句</span></span><br><span class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyTest</span></span><br><span class="line"><span class="string">   (firstname, lastname, email)</span></span><br><span class="line"><span class="string">    VALUES ('John', 'Doe', 'john@example.com')"</span>);</span><br><span class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyTest</span></span><br><span class="line"><span class="string">   (firstname, lastname, email)</span></span><br><span class="line"><span class="string">    VALUES ('Mary', 'Moe', 'mary@example.com')"</span>);</span><br><span class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyTest</span></span><br><span class="line"><span class="string">   (firstname, lastname, email)</span></span><br><span class="line"><span class="string">    VALUES ('Julie', 'Dooley', 'julie@example.com')"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    $conn-&gt;commit();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果执行失败回滚</span></span><br><span class="line">    $conn-&gt;rollback();</span><br><span class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用预处理语句优化"><a href="#使用预处理语句优化" class="headerlink" title="使用预处理语句优化"></a>使用预处理语句优化</h3><p>用于执行多个相同的 SQL 语句，也可以防止 MySQL 注入</p><p><strong>主要优势</strong></p><ol><li>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）</li><li>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句</li><li>预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性</li></ol><p><strong>流程</strong></p><ol><li>预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 <code>?</code> 标记，可以将其替换为整型，字符串，双精度浮点型和布尔值<br><code>INSERT INTO MyTest (firstname, lastname, email) VALUES(?, ?, ?)</code></li><li>绑定 SQL 参数并告知相关的值<br><code>$stmt-&gt;bind_param(&quot;sss&quot;, $firstname, $lastname, $email);</code></li></ol><ul><li>“sss” 参数列处理参数的数据类型，参数有以下四种类型:<br>i - integer（整型）<br>d - double（双精度浮点型）<br>s - string（字符串）<br>b - BLOB（binary large object:二进制大对象）</li><li>通过告诉数据库参数的数据类型，可以降低 SQL 注入的风险</li></ul><ol start="3"><li>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出</li><li>执行：最后，将应用绑定的值传递给参数（<code>?</code> 标记），数据库执行语句</li></ol><p>使用预处理语句插入多条数据</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测数据库链接状态 同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理及绑定</span></span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">"INSERT INTO MyTest (firstname, lastname, email) VALUES (?, ?, ?)"</span>);</span><br><span class="line">$stmt-&gt;bind_param(<span class="string">"sss"</span>, $firstname, $lastname, $email);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数并执行</span></span><br><span class="line">$firstname = <span class="string">"John"</span>;</span><br><span class="line">$lastname = <span class="string">"Doe"</span>;</span><br><span class="line">$email = <span class="string">"john@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">$firstname = <span class="string">"Mary"</span>;</span><br><span class="line">$lastname = <span class="string">"Moe"</span>;</span><br><span class="line">$email = <span class="string">"mary@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">$firstname = <span class="string">"Julie"</span>;</span><br><span class="line">$lastname = <span class="string">"Dooley"</span>;</span><br><span class="line">$email = <span class="string">"julie@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line"></span><br><span class="line">$stmt-&gt;close();</span><br><span class="line">$conn-&gt;close();</span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</span><br><span class="line">    <span class="comment">// 设置 PDO 错误模式为异常</span></span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理 SQL 并绑定参数</span></span><br><span class="line">    $stmt = $conn-&gt;prepare(<span class="string">"INSERT INTO MyTest</span></span><br><span class="line"><span class="string">   (firstname, lastname, email)</span></span><br><span class="line"><span class="string">    VALUES (:firstname, :lastname, :email)"</span>);</span><br><span class="line">    $stmt-&gt;bindParam(<span class="string">':firstname'</span>, $firstname);</span><br><span class="line">    $stmt-&gt;bindParam(<span class="string">':lastname'</span>, $lastname);</span><br><span class="line">    $stmt-&gt;bindParam(<span class="string">':email'</span>, $email);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入行</span></span><br><span class="line">    $firstname = <span class="string">"John"</span>;</span><br><span class="line">    $lastname = <span class="string">"Doe"</span>;</span><br><span class="line">    $email = <span class="string">"john@example.com"</span>;</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入其他行</span></span><br><span class="line">    $firstname = <span class="string">"Mary"</span>;</span><br><span class="line">    $lastname = <span class="string">"Moe"</span>;</span><br><span class="line">    $email = <span class="string">"mary@example.com"</span>;</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入其他行</span></span><br><span class="line">    $firstname = <span class="string">"Julie"</span>;</span><br><span class="line">    $lastname = <span class="string">"Dooley"</span>;</span><br><span class="line">    $email = <span class="string">"julie@example.com"</span>;</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询数据-SELECT"><a href="#查询数据-SELECT" class="headerlink" title="查询数据 SELECT"></a>查询数据 SELECT</h2><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>SELECT 语句用于从数据表中读取数据:<br><code>SELECT column_name(s) FROM table_name</code></p><p>面向对象</p><ol><li>设置 SQL 语句从 MyTest数据表中读取 id, firstname 和 lastname 三个字段。</li><li>使用 SQL 语句从数据库中取出结果集并赋给复制给变量 $result。</li><li>函数 num_rows() 判断返回的数据。</li><li>函数 fetch_assoc() 将结合集放入到关联数组并循环输出</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建和检测连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立索引</span></span><br><span class="line">$sql = <span class="string">"SELECT id, firstname, lastname FROM MyTest"</span>;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出数据</span></span><br><span class="line">    <span class="keyword">while</span>($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"firstname"</span>]. <span class="string">" "</span> . $row[<span class="string">"lastname"</span>]. <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"0 结果"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并检测连接</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT id, firstname, lastname FROM MyTest"</span>;</span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysqli_num_rows($result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出数据</span></span><br><span class="line">    <span class="keyword">while</span>($row = mysqli_fetch_assoc($result)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"firstname"</span>]. <span class="string">" "</span> . $row[<span class="string">"lastname"</span>]. <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"0 结果"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PDO</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"username"</span>;</span><br><span class="line">$password = <span class="string">"password"</span>;</span><br><span class="line">$dbname = <span class="string">"myDatabasePDO"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">    $stmt = $conn-&gt;prepare(<span class="string">"SELECT id, firstname, lastname FROM MyTest</span></span><br><span class="line"><span class="string">  "</span>);</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置结果集为关联数组</span></span><br><span class="line">    $result = $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">new</span> TableRows(<span class="keyword">new</span> RecursiveArrayIterator($stmt-&gt;fetchAll())) <span class="keyword">as</span> $k=&gt;$v) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">$conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/table&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 WHERE 子句, ORDER BY 子句进行查询时，必须使用 <code>mysqli::query</code> 或 <code>mysqli_query()</code> ，用于向 MySQL 连接发送查询或命令</li></ul><h2 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据 UPDATE"></a>修改数据 UPDATE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1=<span class="keyword">value</span>, column2=value2,...</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value</span><br></pre></td></tr></table></figure><p>必须使用  <code>mysqli::query</code> 或 <code>mysqli_query()</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败: "</span> . mysqli_connect_error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_query($con,<span class="string">"UPDATE Persons SET Age=36</span></span><br><span class="line"><span class="string">WHERE FirstName='Peter' AND LastName='Griffin'"</span>);</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除数据-DELETE"><a href="#删除数据-DELETE" class="headerlink" title="删除数据 DELETE"></a>删除数据 DELETE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column = some_value</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败: "</span> . mysqli_connect_error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_query($con,<span class="string">"DELETE FROM Persons WHERE LastName='Griffin'"</span>);</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用的类和函数汇总"><a href="#使用的类和函数汇总" class="headerlink" title="使用的类和函数汇总"></a>使用的类和函数汇总</h2><h3 id="mysqli-PHP和Mysql数据库之间的一个连接"><a href="#mysqli-PHP和Mysql数据库之间的一个连接" class="headerlink" title="mysqli PHP和Mysql数据库之间的一个连接"></a>mysqli PHP和Mysql数据库之间的一个连接</h3><p>mysqli::init — 初始化 MySQLi 并返回一个资源类型的值，这个值可以作为 mysqli_real_connect() 函数的传入参数<br>mysqli::$info — 返回最近执行的 SQL 语句的信息<br>mysqli::stat — 获取当前系统状态信息<br>mysqli::$connect_error/mysqli_connect_error() — 返回最后连接错误描述<br>mysqli::$error/mysqli_error() — 返回最后的错误描述<br>mysqli::__construct/mysqli_connect() — 开始一个新的MySQL服务连接<br>mysqli::real_connect — 建立一个 MySQL 服务器连接<br>mysqli::select_db — 选择用于数据库查询的默认数据库<br>mysqli::query — 对数据库执行一次查询<br>mysqli::real_query — 执行一个mysql查询<br>mysqli::send_query — 发送请求并返回结果<br>mysqli::multi_query — 执行查询<br>mysqli::real_escape_string — 根据当前连接的字符集，对于 SQL 语句中的特殊字符进行转义<br>mysqli::prepare — 准备执行一个 SQL 语句<br>mysqli::stmt_init — 初始化一条语句并返回一个用于mysqli_stmt_prepare(调用)的对象<br>mysqli::rollback — 回退当前事务<br>mysqli::close/mysqli_close() — 关闭先前打开的数据库连接</p><p>mysqli::autocommit — 打开或关闭本次数据库连接的自动命令提交事务模式<br>mysqli::change_user — 改变指定数据库连接的用户<br>mysqli::character_set_name — 返回当前数据库连接的默认字符编码<br>mysqli::commit — 提交一个事务<br>mysqli::$connect_errno — 返回最后连接错误代码<br>mysqli::errno — 返回最近函数调用的错误代码<br>mysqli::$error_list — 返回最后命令行执行错误列表<br>mysqli::$field_count — Returns the number of columns for the most recent query<br>mysqli::get_charset — Returns a character set object<br>mysqli::$client_info — 获取 MySQL 客户端信息<br>mysqli_get_client_version — 作为一个整数返回MySQL客户端的版本<br>mysqli::get_connection_stats — 返回客户端连接的统计数据<br>mysqli::$host_info — 返回一个表述使用的连接类型的字符串<br>mysqli::$protocol_version — 返回MySQL使用的协议版本号<br>mysqli::$server_info — 返回MySQL服务器的版本号<br>mysqli::$server_version — 作为一个整数返回MySQL服务器的版本<br>mysqli::get_warnings — Get result of SHOW WARNINGS<br>mysqli::$insert_id — 返回最后一条插入语句产生的自增 ID<br>mysqli::kill — 让服务器杀掉一个 MySQL 线程<br>mysqli::more_results — 检查批量查询中是否还有查询结果<br>mysqli::next_result — 为读取 multi_query 执行之后的下一个结果集做准备<br>mysqli::options — 设置选项<br>mysqli::ping — ping 一个连接，或者如果连接处于断开状态，重新连接<br>mysqli::poll — 轮询连接<br>mysqli::reap_async_query — 获取异步查询的结果<br>mysqli::refresh — 刷新<br>mysqli::release_savepoint — 从当前事务的保存点中移除一个命名保存点<br>mysqli::rpl_query_type — 返回 RPL 查询类型<br>mysqli::savepoint — 在当前事务中增加一个命名保存点<br>mysqli::set_charset — 设置默认字符编码<br>mysqli::set_local_infile_default — 取消用户指定的回调函数<br>mysqli::set_local_infile_handler — 设置 LOAD DATA LOCAL INFILE 命令的回调函数<br>mysqli::$sqlstate — 返回上一次 SQL 操作的 SQLSTATE 错误信息<br>mysqli::store_result — 转移上一次查询返回的结果集<br>mysqli::$thread_id — 返回当前连接的线程 ID<br>mysqli::thread_safe — 返回是否是线程安全的</p><h3 id="mysqli-stmt-预编译-SQL-语句"><a href="#mysqli-stmt-预编译-SQL-语句" class="headerlink" title="mysqli_stmt 预编译 SQL 语句"></a>mysqli_stmt 预编译 SQL 语句</h3><p>mysqli_stmt :: prepare - 准备一条SQL语句以便执行<br>mysqli_stmt :: bind_param - 将变量作为参数绑定到预准备语句<br>mysqli_stmt :: __ construct - 构造一个新的mysqli_stmt对象<br>mysqli_stmt :: $ num_rows/mysqli_num_rows() - 返回语句结果集中的行数<br>mysqli_stmt :: $ param_count - 返回给定语句的参数个数<br>mysqli_stmt :: $ errno - 返回最近语句调用的错误代码<br>mysqli_stmt :: $ error_list - 返回上一个执行语句的错误列表<br>mysqli_stmt :: $ error - 返回上一个语句错误的字符串描述<br>mysqli_stmt :: execute - 执行准备好的Query<br>mysqli_stmt :: fetch - 将预准备语句的结果提取到绑定变量中<br>mysqli_stmt :: close - 关闭准备好的语句</p><p>mysqli_stmt :: $ affected_rows - 返回上次执行的语句更改，删除或插入的总行数<br>mysqli_stmt :: attr_get - 用于获取语句属性的当前值<br>mysqli_stmt :: attr_set - 用于修改预准备语句的行为<br>mysqli_stmt :: bind_result - 将变量绑定到结果存储的预准备语句<br>mysqli_stmt :: data_seek - 寻找语句结果集中的任意行<br>mysqli_stmt :: fetch - 将预准备语句的结果提取到绑定变量中<br>mysqli_stmt :: $ field_count - 返回给定语句中的字段数<br>mysqli_stmt :: free_result - 释放给定语句句柄的存储结果内存<br>mysqli_stmt :: get_result - 从预准备语句中获取结果集<br>mysqli_stmt :: get_warnings - 获取SHOW WARNINGS的结果<br>mysqli_stmt :: $ insert_id - 获取先前INSERT操作生成的ID<br>mysqli_stmt :: more_results - 检查多个查询是否有更多查询结果<br>mysqli_stmt :: next_result - 从多个查询中读取下一个结果<br>mysqli_stmt :: reset - 重置预准备语句<br>mysqli_stmt :: result_metadata - 从预准备语句返回结果集元数据<br>mysqli_stmt :: send_long_data - 以块为单位发送数据<br>mysqli_stmt :: $ sqlstate - 从前一个语句操作返回SQLSTATE错误<br>mysqli_stmt :: store_result - 从预准备语句中传输结果集</p><h3 id="mysqli-result-从一个数据库查询中获取的结果集"><a href="#mysqli-result-从一个数据库查询中获取的结果集" class="headerlink" title="mysqli_result 从一个数据库查询中获取的结果集"></a>mysqli_result 从一个数据库查询中获取的结果集</h3><p>mysqli_result :: fetch_all - 将所有结果行提取为关联数组，数字数组或两者<br>mysqli_result :: fetch_array - 将结果行提取为关联行，数字数组或两者<br>mysqli_result :: fetch_assoc/mysqli_fetch_assoc() - 将结果行作为关联数组获取<br>mysqli_result :: $ lengths - 返回结果集中当前行的列长度<br>mysqli_result :: $ num_rows - 获取结果中的行数</p><p>mysqli_result :: $ current_field - 获取结果指针的当前字段偏移量<br>mysqli_result :: data_seek - 将结果指针调整为结果中的任意行<br>mysqli_result :: fetch_field_direct - 获取单个字段的元数据<br>mysqli_result :: fetch_field - 返回结果集中的下一个字段<br>mysqli_result :: fetch_fields - 返回表示结果集中字段的对象数组<br>mysqli_result :: fetch_object - 将结果集的当前行作为对象返回<br>mysqli_result :: fetch_row - 将结果行作为枚举数组<br>mysqli_result :: $ field_count - 获取结果中的字段数<br>mysqli_result :: field_seek - 将结果指针设置为指定的字段偏移量<br>mysqli_result :: free - 释放与结果相关的内存</p><hr><p>相关链接：<br><a href="https://hyqskevin.github.io/2019/02/15/mysql/">mysql 学习笔记</a><br><a href="https://hyqskevin.github.io/2019/01/21/php-notes2/">PHP &amp; MySQL learning notes (3)</a><br><a href="https://hyqskevin.github.io/2018/10/28/w3school-php/">PHP &amp; MySQL learning notes (1)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于PHP和MySQL版本问题，对 &lt;a href=&quot;https://hyqskevin.github.io/2018/10/28/w3school-php/#3-mySQL&quot;&gt;PHP &amp;amp; MySQL learning notes (1)&lt;/a&gt; 中曾经写过用的PHP操作MySQL数据库进行笔记更新&lt;br&gt;完善 &lt;a href=&quot;https://hyqskevin.github.io/2019/01/21/php-notes2/#MySQL&quot;&gt;PHP &amp;amp; MySQL learning notes (3)&lt;/a&gt; 中的代码&lt;br&gt;重新用 MySQLi (面向对象) MySQLi (面向过程) PDO 三种方式演示PHP操作MySQL&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="php" scheme="https://hyqskevin.github.io/tags/php/"/>
    
      <category term="mysql" scheme="https://hyqskevin.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>看论文了嘛</title>
    <link href="https://hyqskevin.github.io/2019/03/01/paper/"/>
    <id>https://hyqskevin.github.io/2019/03/01/paper/</id>
    <published>2019-03-01T15:48:06.000Z</published>
    <updated>2019-03-13T15:55:11.535Z</updated>
    
    <content type="html"><![CDATA[<p>paper page test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;paper page test.&lt;/p&gt;

      
    
    </summary>
    
      <category term="paper" scheme="https://hyqskevin.github.io/categories/paper/"/>
    
    
  </entry>
  
  <entry>
    <title>好耶 是python -- 那些神奇的py代码</title>
    <link href="https://hyqskevin.github.io/2019/03/01/nice-python/"/>
    <id>https://hyqskevin.github.io/2019/03/01/nice-python/</id>
    <published>2019-03-01T15:46:41.000Z</published>
    <updated>2019-03-13T15:55:02.209Z</updated>
    
    <content type="html"><![CDATA[<p>nice python page test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nice python page test.&lt;/p&gt;

      
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
  </entry>
  
  <entry>
    <title>这周上Github了吗 -- 那些有意思的项目收集</title>
    <link href="https://hyqskevin.github.io/2019/03/01/github-repo/"/>
    <id>https://hyqskevin.github.io/2019/03/01/github-repo/</id>
    <published>2019-03-01T15:33:15.000Z</published>
    <updated>2019-03-13T15:55:06.385Z</updated>
    
    <content type="html"><![CDATA[<p>gtihub repository page test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gtihub repository page test.&lt;/p&gt;

      
    
    </summary>
    
      <category term="github-repo" scheme="https://hyqskevin.github.io/categories/github-repo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hunger Game （饥饿游戏 原版）单词笔记</title>
    <link href="https://hyqskevin.github.io/2019/03/01/hunger-game/"/>
    <id>https://hyqskevin.github.io/2019/03/01/hunger-game/</id>
    <published>2019-03-01T15:25:30.000Z</published>
    <updated>2019-03-13T16:18:20.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter-15"><a href="#Chapter-15" class="headerlink" title="Chapter 15"></a>Chapter 15</h2><p>abrupt<br>美[əˈbrʌpt] 英[əˈbrʌpt]<br>adj. 突然的，意外的;无理的，唐突的;不连贯的;陡峭的;</p><p>anticipate<br>美[ænˈtɪsəˌpet] 英[ænˈtɪsɪpeɪt]<br>vt. 预感;预见;预料;先于…行动;<br>vi. 过早地提出;过早地考虑（或说、做）一件事;（在口头或<br>用文字）预言;预测;</p><p>crawl<br>美[krɔl] 英[krɔ:l]<br>vi. 爬行;缓慢行进;巴结;<br>n. 缓慢的爬行;〈美俚〉跳舞，自由式游泳;养鱼（龟）池;</p><p>dab<br>美[dæb] 英[dæb]<br>n. 少许;是…能手;做某事很在行;在某方面技术熟练;<br>vt. （用某物）轻触;轻而快地擦掉（或抹掉）;快速擦拭;（用<br>某物）轻而快地涂上（或点上）…;</p><p>damp<br>美[dæmp] 英[dæmp]<br>adj. 微湿的，潮湿的;消沉的，沮丧的;沉闷的;情绪低落的;<br>n. 潮湿;消沉，失望;矿井瓦斯;有毒气体;<br>vt. 使潮湿;使泄气，使沮丧;抑制，阻抑;使减弱;<br>vi. [物]阻尼;减幅;</p><p>desperate<br>美[ˈdɛspərɪt] 英[ˈdespərət]<br>adj. 绝望的;由绝望而引起的;铤而走险的，孤注一掷的;急切<br>的，极度渴望的;</p><p>dew<br>美[du] 英[dju:]<br>n. 水珠，露水;<br>vt. 弄湿;</p><p>dread<br>美[drɛd] 英[dred]<br>vt. 害怕，担心;（古语）敬畏;<br>n. 恐惧，畏惧;令人恐惧的事物;<br>adj. 可怕的;<br>vi. 十分害怕;</p><p>feeble<br>美[ˈfibəl] 英[ˈfi:bl]<br>adj. 虚弱的，衰弱的;无效的，无意的;缺乏决心的，缺乏活<br>力的;</p><p>fetal<br>美[ˈfitl] 英[‘fi:tl]<br>adj. 胎儿的，胎的;</p><p>filthy<br>美[ˈfɪlθi] 英[ˈfɪlθi]<br>adj. 肮脏的，污秽的;猥亵的，淫秽的;下流的;</p><p>foliage<br>美[ˈfoʊliɪdʒ] 英[ˈfəʊliɪdʒ]<br>n. 植物的叶子（总称），叶子及梗和枝;树叶;</p><p>grin<br>美[ɡrɪn] 英[grɪn]<br>vi. 露齿而笑;<br>vt. 露齿笑着表示;<br>n. 咧嘴笑，露齿而笑;</p><p>hallucination<br>美[həˌlusəˈneʃən] 英[həˌlu:sɪˈneɪʃn]<br>n. 幻觉，幻想;错觉;</p><p>hip<br>美[hɪp] 英[hɪp]<br>n. 臀部;[建筑学]屋脊;臀围（尺寸）;臀部…的;<br>adj. （衣服、音乐等方面）时髦的，赶时髦的;<br>vt. 使…的髋关节脱臼，损伤…的髋部;[建筑学]给（房屋）建<br>屋脊;使知晓，使了解，告诉;使消息灵通;</p><p>honeysuckle<br>美[ˈhʌniˌsʌkəl] 英[ˈhʌnisʌkl]<br>n. 忍冬，金银花;</p><p>manifest<br>美[ˈmænəˌfɛst] 英[ˈmænɪfest]<br>vt. 显示，表明;证明;使显现;<br>adj. 明白的，明显的;<br>n. 货单，旅客名单;</p><p>moss<br>美[mɔs] 英[mɒs]<br>n. 苔藓;藓沼;莫斯（男子名）;泥炭沼;<br>vt. 以苔藓覆盖;使长满苔藓;<br>abbr. <a href="=manned orbital space station">宇</a>载人轨道航天站;</p><p>nectar<br>美[ˈnɛktɚ] 英[ˈnektə(r)]<br>n. 花蜜;（古希腊、罗马神话中的）众神饮的酒;琼浆玉液;甘<br>美的饮料;<br>adj. &lt;古&gt;充满美酒的，芳香甜蜜的;</p><p>noxious<br>美[ˈnɑkʃəs] 英[ˈnɒkʃəs]<br>adj. 有害的，有毒的;</p><p>onslaught<br>美[ˈɑnslɔt] 英[ˈɒnslɔ:t]<br>n. 猛攻，攻击;突击;大量的倾泻;</p><p>orchard<br>美[ˈɔrtʃərd] 英[ˈɔ:tʃəd]<br>n. （通常指围起来的）果园;果园里的全部果树;&lt;俚&gt;棒球场;</p><p>pervade<br>美[pərˈveɪd] 英[pəˈveɪd]<br>vt. 遍及，弥漫;渗透，充满;</p><p>pluck<br>美[plʌk] 英[plʌk]<br>n. 勇气，精神;内脏;快而猛的拉;〈俚〉不及格;<br>vt. 采，摘;拔掉;鼓起（勇气等）;弹（乐器）;<br>vi. 拉，拽;</p><p>plump<br>美[plʌmp] 英[plʌmp]<br>adj. 丰满的;肥胖的;丰富的;充裕的;<br>adv. 突然地，猛地;<br>vt&amp;vi. （使）圆胖;（使）鼓起;（使）突然沉重地落下;<br>n. 扑通声;〈英〉阵雨;群;</p><p>prominent<br>美[ˈprɑmɪnənt] 英[ˈprɒmɪnənt]<br>adj. 突出的，杰出的;突起的;著名的;</p><p>quench<br>美[kwɛntʃ] 英[kwentʃ]<br>vt. 解（渴）;终止（某事物）;（用水）扑灭（火焰等）;将（<br>热物体）放入水中急速冷却;</p><p>rib<br>美[rɪb] 英[rɪb]<br>n. 肋骨;（船或屋顶等的）肋拱;肋骨状的东西;（织物的）凸<br>条花纹;<br>vt. 嘲笑，逗弄，开（某人的）玩笑;装肋于，给…装肋材;</p><p>rinse<br>美[rɪns] 英[rɪns]<br>vt. 漂洗;冲洗;漂净;冲掉;<br>n. 冲洗;染发剂;漂洗;</p><p>rinse out<br>美[rɪns aʊt] 英[rins aut]<br>v. 冲洗掉;</p><p>rot<br>美[rɑt] 英[rɒt]<br>n. 腐烂，腐朽;<br>vt&amp;vi. （使）腐烂，（使）腐朽;</p><p>rotten<br>美[ˈrɑtn] 英[ˈrɒtn]<br>adj. 腐烂的;恶臭的;堕落的;极坏的;<br>adv. 非常;极其;</p><p>slime<br>美[slaɪm] 英[slaɪm]<br>n. 黏质物;黏液;黏泥;软泥;<br>v. （用稀泥等）涂，糊;分泌黏液使黏滑;清除黏液[稀泥等];〈<br>英俚〉滑脱，用狡猾手段脱身溜掉(away through etc.);</p><p>soot<br>美[sʊt, sut] 英[sʊt]<br>n. 煤烟，烟灰;油烟;<br>v. 煤烟弄脏;弄得尽是煤烟;</p><p>splash<br>美[splæʃ] 英[splæʃ]<br>vt. 使（液体）溅起;<br>vi. （指液体）溅落;<br>n. （光、色等的）斑点;溅泼声;溅上的斑点;溅泼的量;</p><p>stiff<br>美[stɪf] 英[stɪf]<br>adj. 严厉的;僵硬的，坚硬的;呆板的，拘谨的;顽固的;<br>adv. &lt;口&gt;极度地，非常;<br>n. 死尸;笨蛋，傻瓜;流动工人;吝啬鬼穷光蛋;<br>vt. 诈骗;失信;</p><p>stretch<br>美[strɛtʃ] 英[stretʃ]<br>v. 伸展;延伸;持续;包括;<br>n. 伸展;弹性;一片;一段时间;<br>adj. 可伸缩的;弹性的;</p><p>strip down<br>美[strɪp daʊn] 英[strip daun]<br>脱光衣服;</p><p>swell<br>美[swɛl] 英[swel]<br>vt&amp;vi. 增强;肿胀;膨胀;充满（激情）;<br>n. 汹涌;重要人士;（尤指身体部位）凸起的形状;声音渐强;<br>adj. 极好的;了不起的;非常棒的;</p><p>swollen<br>美[ˈswolən] 英[ˈswəʊlən]<br>adj. 膨胀的;肿起的;涨满的;<br>v. 增强，肿胀，鼓起(swell的过去式和过去分词);</p><p>tangle<br>美[ˈtæŋɡəl] 英[ˈtæŋgl]<br>n. 纠缠，纠纷;混乱，慌乱;昏乱的状态;争论;<br>vt&amp;vi. （使）缠结，（使）乱作一团;使陷入，捕获;使纠纷;<br>参加辩论、争执或冲突;</p><p>tentative<br>美[ˈtɛntətɪv] 英[ˈtentətɪv]<br>adj. 试探性的;试验的;尝试性的;不确定的;<br>n. 假设;实验;尝试;</p><p>tread<br>美[trɛd] 英[tred]<br>vi. 踩，踏;行走;交尾;<br>vt. 踩成;踏出;步行于;踩（烂）;<br>n. 踏，踩，走;交尾;（楼梯的）踏板;轮胎接触地面的部分;</p><p>twig<br>美[twɪɡ] 英[twɪg]<br>n. 细枝，嫩枝;<br>v. 理解，明白;</p><p>vein<br>美[ven] 英[veɪn]<br>n. 静脉;[地]矿脉，岩脉;[植]叶脉;气质，倾向;<br>v. 使有脉络;使有纹理;象脉络般分布于;</p><p>venom<br>美[ˈvɛnəm] 英[ˈvenəm]<br>n. （某些蛇、蝎子等分泌的）毒液;恶意;&lt;古&gt;毒物;<br>v. 放毒;</p><p>wholly<br>美[ˈhoʊlli] 英[ˈhəʊlli]<br>adv. 完全地，全部地;十足，统统;专门;一并;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Chapter-15&quot;&gt;&lt;a href=&quot;#Chapter-15&quot; class=&quot;headerlink&quot; title=&quot;Chapter 15&quot;&gt;&lt;/a&gt;Chapter 15&lt;/h2&gt;&lt;p&gt;abrupt&lt;br&gt;美[əˈbrʌpt] 英[əˈbrʌpt]&lt;br&gt;adj
      
    
    </summary>
    
      <category term="language-learning" scheme="https://hyqskevin.github.io/categories/language-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>session_cookie</title>
    <link href="https://hyqskevin.github.io/2019/02/28/session-cookie/"/>
    <id>https://hyqskevin.github.io/2019/02/28/session-cookie/</id>
    <published>2019-02-28T12:42:38.000Z</published>
    <updated>2019-03-03T14:02:50.694Z</updated>
    
    <content type="html"><![CDATA[<p>Cookie和Session都是会话技术<br>Cookie是运行在客户端，Session是运行在服务器端<br>浅谈一下Session与Cookie之间的区别和联系<br><a id="more"></a></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session是服务器端使用的一种记录客户端状态的机制，客户端（浏览器）访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>客户端（浏览器）发送请求</li><li>服务器端生成Session和一个Session ID来作为这个Session的唯一标识，将Session ID发送到客户端</li><li>客户端第二次发送请求，将前一次响应的Session ID一并发送</li><li>服务器端从请求中提取出Session ID，和保存的所有Session ID进行对比，找到对应的Session，如果该Session已经被销毁，生成新的Session</li><li>服务器端如果保存Session超出时间限制会销毁Session</li></ol><img src="https://hyqskevin.github.io/pic/session_cookie/session.png" class="[Session的工作原理]"><h3 id="Session的生命周期"><a href="#Session的生命周期" class="headerlink" title="Session的生命周期"></a>Session的生命周期</h3><p>Session保存在服务器端，为了获得更高的存取速度，服务器一般把Session放在内存里。</p><p>如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。</p><p>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。</p><p>随着用户访问服务器，Session会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。</p><h3 id="Session的用法（不详细展开）"><a href="#Session的用法（不详细展开）" class="headerlink" title="Session的用法（不详细展开）"></a>Session的用法（不详细展开）</h3><p><code>void setAttribute(String attribute, Object value)</code><br>设置Session属性<br><code>removeAttribute(String attribute)</code><br>移除Session属性<br><code>getLastAccessedTime()</code><br>返回Session的最后活跃时间<br><code>getMaxInactiveInterval()</code><br>返回Session的超时时间<br><code>void invalidate()</code><br>使该Session失效</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie技术是客户端的解决方案，由服务器端发给客户端的特殊信息会以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>用户使用客户端（浏览器）访问，提供个人信息并且提交至服务器</li><li>服务器在向客户端回传的同时发回个人信息，存放于HTTP响应头</li><li>当客户端（浏览器）接收到来自服务器的响应之后，浏览器会将这些信息存放在cookie文件夹下，然后再向服务器发送请求，把相应的Cookie再次发回至服务器。信息则存放在HTTP请求头</li><li>服务器端在接收到来自客户端浏览器的请求，通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容</li></ol><img src="https://hyqskevin.github.io/pic/session_cookie/cookie.png" class="[Cookie的工作原理]"><h3 id="Cookie的有效期"><a href="#Cookie的有效期" class="headerlink" title="Cookie的有效期"></a>Cookie的有效期</h3><p>Cookie的maxAge决定着Cookie的有效期，单位为秒（Second）Cookie会在maxAge秒之后自动失效</p><h3 id="Cookie的属性"><a href="#Cookie的属性" class="headerlink" title="Cookie的属性"></a>Cookie的属性</h3><p>String name：该Cookie的名称<br>Object value：该Cookie的值<br>int maxAge：该Cookie失效的时间，单位秒<br>boolean secure：该Cookie是否仅被使用安全协议传输<br>String domain：可以访问该Cookie的域名<br>String comment：该Cookie的用处说明</p><h2 id="difference-amp-connection"><a href="#difference-amp-connection" class="headerlink" title="difference &amp; connection"></a>difference &amp; connection</h2><p>区别</p><ol><li>cookie数据存放在客户的浏览器上，session数据放在服务器上</li><li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到<strong>安全</strong>应当使用session；</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到<strong>减轻服务器性能</strong>方面，应当使用COOKIE；</li><li>单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K；</li></ol><p>联系</p><p>服务端执行session机制时候会生成session的id值，这个id值会发送给客户端，客户端每次请求都会把这个id值放到http请求的头部发送给服务端，而这个id值在客户端会保存下来，保存的容器就是cookie</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cookie和Session都是会话技术&lt;br&gt;Cookie是运行在客户端，Session是运行在服务器端&lt;br&gt;浅谈一下Session与Cookie之间的区别和联系&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="session" scheme="https://hyqskevin.github.io/tags/session/"/>
    
      <category term="cookie" scheme="https://hyqskevin.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>Laravel SQL migration</title>
    <link href="https://hyqskevin.github.io/2019/02/27/migration/"/>
    <id>https://hyqskevin.github.io/2019/02/27/migration/</id>
    <published>2019-02-27T14:25:58.000Z</published>
    <updated>2019-02-27T16:49:51.738Z</updated>
    
    <content type="html"><![CDATA[<p>结合Laravel的Schema构建器构建应用的数据库表结构，类似于数据库的版本控制，允许团队成员间编辑并共享应用的数据库表结构<br>Laravel 的 Schema 门面提供了与数据库系统无关的创建和操纵表的支持，在 Laravel 所支持的所有数据库系统中提供一致的、优雅的、流式的 API，将SQL转成PHP去执行</p><p>部署环境(WAMP)<br>php 7.3.1<br>composer 1.8.4<br>laravel 5.8.0<br>MySQL 5.7.24<br><a id="more"></a></p><h2 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h2><ol><li>MySQL数据库创建Database</li><li>到laravel目录下修改<code>.env</code>文件符合数据库配置</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=your_database_name</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=</span><br></pre></td></tr></table></figure><ol start="3"><li><p>到laravel目录创建新的迁移<br><code>php artisan make:migration create_table_name</code><br>创建的数据表在<code>laravel\database\migration</code>目录下</p><p><code>--table</code>和<code>--create</code>选项可以用于指定表名以及该迁移是否要创建一个新的数据表。这些选项只需要简单放在上述迁移命令后面并指定表名<br><code>php artisan make:migration create_users_table --create=users</code><br><code>php artisan make:migration add_votes_to_users_table --table=users</code></p></li><li><p>编写迁移数据表<br>迁移类包含了两个方法：<code>up</code>和<code>down</code>。<code>up</code>方法用于新增表，列或者索引到数据库，而<code>down</code>方法就是<code>up</code>方法的反操作<br>用到 Laravel 的<code>schema</code>构建器来创建和修改表，后面给出具体实现方法</p></li><li><p>运行迁移表到数据库<br><code>php artisan migrate</code></p><p>强制运行这些命令而不被提示，可以使用–force（不推荐）<br><code>php artisan migrate --force</code></p><p>在MySQL中可以看到Database下有新的表</p><img src="https://hyqskevin.github.io/pic/laravel/laraveltest.png" class="[database laraveltest]"></li><li><p>执行回滚</p><p>在Database下有migration表，使得laravel可以回滚</p><img src="https://hyqskevin.github.io/pic/laravel/migration.png" class="[migration rollback]"><p>执行文件中的<code>public function down()</code>,回滚最后一批运行的迁移<br><code>php artisan migrate:rollback</code><br>回滚所有的应用迁移<br><code>php artisan migrate:reset</code><br>先回滚所有数据库迁移<br><code>php artisan migrate:refresh</code><br>回滚或重建指定数量的迁移,refresh命令提供的step选项<br><code>php artisan migrate:refresh --step=5</code></p></li><li><p>在迁移之前进行试验<br><code>php artisan migrate --pretend</code></p></li></ol><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>使用Schema门面上的create方法来创建新的数据表。create方法接收两个参数，第一个是表名，第二个是获取用于定义新表的Blueprint对象的闭包<br><code>Schema::create(&#39;table_name&#39;, function (Blueprint $table){ })</code></p><h3 id="创建表中的列"><a href="#创建表中的列" class="headerlink" title="创建表中的列"></a>创建表中的列</h3><p>在Schema中创建表中的列结构 <code>$table-&gt;类型(&#39;名称&#39;);</code></p><ul><li>常用属性</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$table-&gt;bigIncrements(<span class="string">'id'</span>);<span class="comment">//自增ID，类型为bigint</span></span><br><span class="line">$table-&gt;bigInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中的BIGINT类型</span></span><br><span class="line">$table-&gt;binary(<span class="string">'data'</span>);<span class="comment">//等同于数据库中的BLOB类型</span></span><br><span class="line">$table-&gt;boolean(<span class="string">'confirmed'</span>);<span class="comment">//等同于数据库中的BOOLEAN类型</span></span><br><span class="line">$table-&gt;char(<span class="string">'name'</span>, <span class="number">4</span>);<span class="comment">//等同于数据库中的CHAR类型</span></span><br><span class="line">$table-&gt;date(<span class="string">'created_at'</span>);<span class="comment">//等同于数据库中的DATE类型</span></span><br><span class="line">$table-&gt;dateTime(<span class="string">'created_at'</span>);<span class="comment">//等同于数据库中的DATETIME类型</span></span><br><span class="line">$table-&gt;dateTimeTz(<span class="string">'created_at'</span>);<span class="comment">//等同于数据库中的DATETIME类型（带时区）</span></span><br><span class="line">$table-&gt;decimal(<span class="string">'amount'</span>, <span class="number">5</span>, <span class="number">2</span>);<span class="comment">//等同于数据库中的DECIMAL类型，带一个精度和范围</span></span><br><span class="line">$table-&gt;double(<span class="string">'column'</span>, <span class="number">15</span>, <span class="number">8</span>);<span class="comment">//等同于数据库中的DOUBLE类型，带精度, 总共15位数字，小数点后8位.</span></span><br><span class="line">$table-&gt;enum(<span class="string">'choices'</span>, [<span class="string">'foo'</span>, <span class="string">'bar'</span>]);<span class="comment">//等同于数据库中的 ENUM类型</span></span><br><span class="line">$table-&gt;float(<span class="string">'amount'</span>);<span class="comment">//等同于数据库中的 FLOAT 类型</span></span><br><span class="line">$table-&gt;increments(<span class="string">'id'</span>);<span class="comment">//数据库主键自增ID</span></span><br><span class="line">$table-&gt;integer(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中的 INTEGER 类型</span></span><br><span class="line">$table-&gt;ipAddress(<span class="string">'visitor'</span>);<span class="comment">//等同于数据库中的 IP 地址</span></span><br><span class="line">$table-&gt;json(<span class="string">'options'</span>);<span class="comment">//等同于数据库中的 JSON 类型</span></span><br><span class="line">$table-&gt;jsonb(<span class="string">'options'</span>);<span class="comment">//等同于数据库中的 JSONB 类型</span></span><br><span class="line">$table-&gt;longText(<span class="string">'description'</span>);<span class="comment">//等同于数据库中的 LONGTEXT 类型</span></span><br><span class="line">$table-&gt;macAddress(<span class="string">'device'</span>);<span class="comment">//等同于数据库中的 MAC 地址</span></span><br><span class="line">$table-&gt;mediumIncrements(<span class="string">'id'</span>);<span class="comment">//自增ID，类型为无符号的mediumint</span></span><br><span class="line">$table-&gt;mediumInteger(<span class="string">'numbers'</span>);<span class="comment">//等同于数据库中的 MEDIUMINT类型</span></span><br><span class="line">$table-&gt;mediumText(<span class="string">'description'</span>);<span class="comment">//等同于数据库中的 MEDIUMTEXT类型</span></span><br><span class="line">$table-&gt;morphs(<span class="string">'taggable'</span>);<span class="comment">//添加一个 INTEGER类型的 taggable_id 列和一个 STRING类型的 taggable_type列</span></span><br><span class="line">$table-&gt;nullableTimestamps();<span class="comment">//和 timestamps()一样但允许 NULL值.</span></span><br><span class="line">$table-&gt;rememberToken();<span class="comment">//添加一个 remember_token 列： VARCHAR(100) NULL.</span></span><br><span class="line">$table-&gt;smallIncrements(<span class="string">'id'</span>);<span class="comment">//自增ID，类型为无符号的smallint</span></span><br><span class="line">$table-&gt;smallInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中的 SMALLINT 类型</span></span><br><span class="line">$table-&gt;softDeletes();<span class="comment">//新增一个 deleted_at 列 用于软删除.</span></span><br><span class="line">$table-&gt;string(<span class="string">'email'</span>);<span class="comment">//等同于数据库中的 VARCHAR 列  .</span></span><br><span class="line">$table-&gt;string(<span class="string">'name'</span>, <span class="number">100</span>);<span class="comment">//等同于数据库中的 VARCHAR，带一个长度</span></span><br><span class="line">$table-&gt;text(<span class="string">'description'</span>);<span class="comment">//等同于数据库中的 TEXT 类型</span></span><br><span class="line">$table-&gt;time(<span class="string">'sunrise'</span>);<span class="comment">//等同于数据库中的 TIME类型</span></span><br><span class="line">$table-&gt;timeTz(<span class="string">'sunrise'</span>);<span class="comment">//等同于数据库中的 TIME 类型（带时区）</span></span><br><span class="line">$table-&gt;tinyInteger(<span class="string">'numbers'</span>);<span class="comment">//等同于数据库中的 TINYINT 类型</span></span><br><span class="line">$table-&gt;timestamp(<span class="string">'added_on'</span>);<span class="comment">//等同于数据库中的 TIMESTAMP 类型</span></span><br><span class="line">$table-&gt;timestampTz(<span class="string">'added_on'</span>);<span class="comment">//等同于数据库中的 TIMESTAMP 类型（带时区）</span></span><br><span class="line">$table-&gt;timestamps();<span class="comment">//添加 created_at 和 updated_at列</span></span><br><span class="line">$table-&gt;timestampsTz();<span class="comment">//添加 created_at 和 updated_at列（带时区）</span></span><br><span class="line">$table-&gt;unsignedBigInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中无符号的 BIGINT 类型</span></span><br><span class="line">$table-&gt;unsignedInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中无符号的 INT 类型</span></span><br><span class="line">$table-&gt;unsignedMediumInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中无符号的 MEDIUMINT 类型</span></span><br><span class="line">$table-&gt;unsignedSmallInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中无符号的 SMALLINT 类型</span></span><br><span class="line">$table-&gt;unsignedTinyInteger(<span class="string">'votes'</span>);<span class="comment">//等同于数据库中无符号的 TINYINT 类型</span></span><br><span class="line">$table-&gt;uuid(<span class="string">'id'</span>);<span class="comment">//等同于数据库的UUID</span></span><br></pre></td></tr></table></figure><ul><li>常用约束</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">-&gt;after(<span class="string">'column'</span>)<span class="comment">//将该列置于另一个列之后 (仅适用于MySQL)</span></span><br><span class="line">-&gt;comment(<span class="string">'my comment'</span>)<span class="comment">//添加注释信息</span></span><br><span class="line">-&gt;default($value)<span class="comment">//指定列的默认值</span></span><br><span class="line">-&gt;first()<span class="comment">//将该列置为表中第一个列 (仅适用于MySQL)</span></span><br><span class="line">-&gt;nullable()<span class="comment">//允许该列的值为NULL</span></span><br><span class="line">-&gt;storedAs($expression)<span class="comment">//创建一个存储生成列（只支持MySQL）</span></span><br><span class="line">-&gt;unsigned()<span class="comment">//设置 integer 列为 UNSIGNED</span></span><br><span class="line">-&gt;virtualAs($expression)<span class="comment">//创建一个虚拟生成列（只支持MySQL）</span></span><br></pre></td></tr></table></figure><ul><li>格式示例</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateTableName</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the migrations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">'table_name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">        $table-&gt;bigIncrements(<span class="string">'id'</span>);</span><br><span class="line">        $table-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">        $table-&gt;string(<span class="string">'email'</span>)-&gt;unique();</span><br><span class="line">        $table-&gt;timestamp(<span class="string">'email_verified_at'</span>)-&gt;nullable();</span><br><span class="line">        $table-&gt;string(<span class="string">'password'</span>);</span><br><span class="line">        $table-&gt;rememberToken();</span><br><span class="line">        $table-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reverse the migrations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::dropIfExists(<span class="string">'table_name'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改、重命名、删除列"><a href="#修改、重命名、删除列" class="headerlink" title="修改、重命名、删除列"></a>修改、重命名、删除列</h3><p><code>-&gt;change()</code>方法允许你修改已存在的列为新的类型，或者修改列的属性<br><code>-&gt;renameColumn()</code>方法可以重命名一个列<br><code>-&gt;dropColumn</code>方法可以删除列</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Schema::table(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($table)</span> </span>&#123;</span><br><span class="line">    $table-&gt;string(<span class="string">'name'</span>, <span class="number">50</span>)-&gt;change();  <span class="comment">//name列的尺寸从 25 增加到 50</span></span><br><span class="line">    $table-&gt;renameColumn(<span class="string">'from'</span>, <span class="string">'to'</span>);  <span class="comment">//重命名 from 为 to</span></span><br><span class="line">    $table-&gt;dropColumn(<span class="string">'votes'</span>);  <span class="comment">//删除一个列</span></span><br><span class="line">    $table-&gt;dropColumn([<span class="string">'votes'</span>, <span class="string">'avatar'</span>, <span class="string">'location'</span>]);  <span class="comment">//删除多个列</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>需要添加doctrine/dbal依赖到composer.json文件</li><li>暂不支持enum类型的列的修改和重命名</li></ul><h3 id="添加索引键"><a href="#添加索引键" class="headerlink" title="添加索引键"></a>添加索引键</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$table-&gt;primary(<span class="string">'id'</span>);<span class="comment">//添加主键索引</span></span><br><span class="line">$table-&gt;primary([<span class="string">'first'</span>, <span class="string">'last'</span>]);<span class="comment">//添加混合索引</span></span><br><span class="line">$table-&gt;unique(<span class="string">'email'</span>);<span class="comment">//添加唯一索引</span></span><br><span class="line">$table-&gt;unique(<span class="string">'state'</span>, <span class="string">'my_index_name'</span>);<span class="comment">//指定自定义索引名称</span></span><br><span class="line">$table-&gt;index(<span class="string">'state'</span>);<span class="comment">//添加普通索引</span></span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$table-&gt;dropPrimary(<span class="string">' '</span>);<span class="comment">//删除主键索引</span></span><br><span class="line">$table-&gt;dropUnique(<span class="string">' '</span>);<span class="comment">//删除唯一索引</span></span><br><span class="line">$table-&gt;dropIndex(<span class="string">' '</span>); <span class="comment">//删除普通索引</span></span><br></pre></td></tr></table></figure><h3 id="外键约束（loading…）"><a href="#外键约束（loading…）" class="headerlink" title="外键约束（loading…）"></a>外键约束（loading…）</h3><h2 id="检查列表是否存在"><a href="#检查列表是否存在" class="headerlink" title="检查列表是否存在"></a>检查列表是否存在</h2><p>使用 <code>hasTable</code> 和 <code>hasColumn</code> 方法检查表或列是否存在</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Schema::hasTable(<span class="string">'users'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Schema::hasColumn(<span class="string">'users'</span>, <span class="string">'email'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置表的存储引擎，在schema构建器上设置engine属性"><a href="#设置表的存储引擎，在schema构建器上设置engine属性" class="headerlink" title="设置表的存储引擎，在schema构建器上设置engine属性"></a>设置表的存储引擎，在schema构建器上设置engine属性</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($table)</span> </span>&#123;</span><br><span class="line">    $table-&gt;engine = <span class="string">'InnoDB'</span>;</span><br><span class="line">    $table-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="重命名-删除表"><a href="#重命名-删除表" class="headerlink" title="重命名/删除表"></a>重命名/删除表</h2><p>在<code>public function up()</code>中添加<br><code>Schema::rename(&#39;your_table_name&#39;,&#39;change_name&#39;);</code><br>更新<code>public function down()</code>中的表名</p><p>在<code>public function down()</code>中添加<br><code>Schema::drop(&#39;users&#39;);</code> 或 <code>Schema::dropIfExists(&#39;users&#39;);</code><br>用于迁移的回滚</p><hr><p>参考：<br> <a href="https://laravelacademy.org/post/9580.html" target="_blank" rel="noopener">Laravel数据库迁移</a><br> <a href="https://laravel.com/docs/5.7/migrations" target="_blank" rel="noopener">Database Migration</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结合Laravel的Schema构建器构建应用的数据库表结构，类似于数据库的版本控制，允许团队成员间编辑并共享应用的数据库表结构&lt;br&gt;Laravel 的 Schema 门面提供了与数据库系统无关的创建和操纵表的支持，在 Laravel 所支持的所有数据库系统中提供一致的、优雅的、流式的 API，将SQL转成PHP去执行&lt;/p&gt;
&lt;p&gt;部署环境(WAMP)&lt;br&gt;php 7.3.1&lt;br&gt;composer 1.8.4&lt;br&gt;laravel 5.8.0&lt;br&gt;MySQL 5.7.24&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="laravel" scheme="https://hyqskevin.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>mysql like子句和正则表达式匹配</title>
    <link href="https://hyqskevin.github.io/2019/02/23/mysql-regular/"/>
    <id>https://hyqskevin.github.io/2019/02/23/mysql-regular/</id>
    <published>2019-02-23T04:12:55.000Z</published>
    <updated>2019-03-03T08:52:10.768Z</updated>
    
    <content type="html"><![CDATA[<p>-基础笔记-<br>MySQL like子句和正则表达式的使用<br>MySQL可以通过 LIKE …% 来进行模糊匹配，也可以使用 <code>REGEXP</code> 操作符来进行正则表达式匹配<br><a id="more"></a></p><h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h2><p>当需要获取 <code>WHERE</code> 字段中包含的匹配记录，就需要在 <code>WHERE</code> 子句中使用 <code>LIKE</code> 子句<br><code>WHERE</code> 子句中可以使用 <code>=</code> 来设定获取数据的条件，<code>LIKE</code> 子句中使用百分号 <code>%</code> 字符来表示任意字符.如果没有使用 <code>%</code>, <code>LIKE</code>子句与 <code>=</code> 的效果是一样的<br>可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件,可以在 <code>DELETE</code> 或 <code>UPDATE</code> 命令中使用 <code>WHERE...LIKE</code> 子句来指定条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> <span class="string">`condition`</span> [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 = <span class="string">'somevalue'</span></span><br></pre></td></tr></table></figure><h2 id="与WHERE条件结合"><a href="#与WHERE条件结合" class="headerlink" title="与WHERE条件结合"></a>与WHERE条件结合</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">'%a'     //以a结尾的数据</span><br><span class="line">'a%'     //以a开头的数据</span><br><span class="line">'%a%'    //含有a的数据</span><br><span class="line">'_a_'    //三位且中间字母是a的</span><br><span class="line">'_a'     //两位且结尾字母是a的</span><br><span class="line">'a_'     //两位且开头字母是a的</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>MySQL 正则模式可应用于 REGEXP 操作符中<br><strong>MySQL中正则表达式匹配不区分大小写，如希望区分大小写，可使用binary关键字</strong></p><p>模式|描述<br>|—|—|<br>|<code>^</code>|<strong>匹配输入字符串的开始位置</strong>。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。<br>|<code>$</code>|<strong>匹配输入字符串的结束位置</strong>。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。<br>|<code>.</code>|<strong>匹配除 “\n” 之外的任何单个字符</strong>。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。<br>|<code>[...]</code>|<strong>字符集合。匹配所包含的任意一个字符</strong>。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。<br>|<code>[^...]</code>|<strong>负值字符集合。匹配未包含的任意字符</strong>。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。<br>|<code>p1|p2|p3</code>|<strong>匹配 p1 或 p2 或 p3</strong>。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。<br>|<code>*</code>|<strong>匹配前面的子表达式零次或多次</strong>。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。<br>|<code>+</code>|<strong>匹配前面的子表达式一次或多次</strong>。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。<br>|<code>{n}</code>|<strong>n 是一个非负整数。匹配确定的 n 次</strong>。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。<br>|<code>{n,m}</code>|<strong>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次</strong>。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>任意字母数字：[a-zA-Z0-9]<br>任意十六进制：[a-fA-F0-9]<br>任意字符：[a-zA-Z]<br>空格和制表符：[\t]<br>任意空白字符：[\f\n\r\t\v] (换页\换行\回车\制表\纵向制表)<br>x OR y：”x|y”<br>email：”@163[.,]com$”<br>x至少出现一次，最多出现三次：”x{1，3}”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-基础笔记-&lt;br&gt;MySQL like子句和正则表达式的使用&lt;br&gt;MySQL可以通过 LIKE …% 来进行模糊匹配，也可以使用 &lt;code&gt;REGEXP&lt;/code&gt; 操作符来进行正则表达式匹配&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="mysql" scheme="https://hyqskevin.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>fund_flow</title>
    <link href="https://hyqskevin.github.io/2019/02/20/fund-flow/"/>
    <id>https://hyqskevin.github.io/2019/02/20/fund-flow/</id>
    <published>2019-02-20T07:41:56.000Z</published>
    <updated>2019-02-27T16:59:53.903Z</updated>
    
    <content type="html"><![CDATA[<p>-服务外包项目-<br>资金流入流出问题的研究笔记，数据来自蚂蚁金服大数据赛题<br>笔记持续更新中<br><a id="more"></a></p><h2 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h2><h3 id="资金流入流出问题"><a href="#资金流入流出问题" class="headerlink" title="资金流入流出问题"></a>资金流入流出问题</h3><ol><li><strong>时间序列模型分析</strong>：启动时间短，训练数据量不大，成本低<br>自回归算法 AR：呈现过去时刻对预测的直接影响<br>移动平均算法 MA：预测意料之外的事<br>自回归+移动平均 ARMA：综合以上的平衡<br>齐次非平稳 ARIMA：针对非平稳序列</li></ol><ul><li>时间序列可较好的预测短期价格变动，时期增长会导致误差率增高</li></ul><ol start="2"><li>投资分析：长期分析法，利用经济学角度分析内在价值</li></ol><ul><li>基本分析：宏观经济分析，行业分析和公司分析<br>应用不够直观，市场反应不够敏锐</li><li>技术分析：根据图标信息，技术指标记录推断变化趋势<br>技术指标滞后，无法把控整体趋势  </li></ul><ol start="3"><li>混沌动力学</li><li>神经网络<br>利用探索数据间的交叉关系建立模型<br>契合资金波动的高度非线性特点</li><li>定性预测：专家意见，德尔菲法</li><li>因果预测：回归分析，定性和定量分析</li></ol><h3 id="组合算法"><a href="#组合算法" class="headerlink" title="组合算法"></a>组合算法</h3><ol><li>统计学+机器学习</li></ol><ul><li>灰色系统+神经网络</li><li>时间序列+神经网络</li></ul><ol start="2"><li>集成学习 ensemble learning</li></ol><ul><li>串行思路：采用串行的方式生成多个学习器目的在于减少偏差（bias），使用多个弱分类器组合成为一个强分类器，代表算法Bagging，boosting，GBDT</li><li>并行思路：通过使用并行的学习，得到多个学习模型然后取其平均结果目的在于减少方差，代表算法 Random Forest</li></ul><h3 id="因子分解机-Factorization-Machine-loading…"><a href="#因子分解机-Factorization-Machine-loading…" class="headerlink" title="因子分解机 Factorization Machine (loading…)"></a>因子分解机 Factorization Machine (loading…)</h3><p>通过特征向量去模拟因子分解模型，利用特征抽取的方法构造出特征并借助因子分解模型对不同变量间的相互作用进行建模</p><p>FM算法常用来解决二分类，回归，排序问题</p><h2 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h2><p>数据集–&gt;数据预处理–&gt;特征抽取–&gt;预测算法设计–&gt;误差分析–&gt;优化</p><p>数据预处理：剔除异常值，表格间数据集成<br>特征抽取：时间特征，用户特征，利率特征<br>预测算法设计(loading…)<br>误差分析：用均方根误差评价</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="余额宝用户数据"><a href="#余额宝用户数据" class="headerlink" title="余额宝用户数据"></a>余额宝用户数据</h3><p>基本信息数据 user_profile：</p><table><thead><tr><th>列名</th><th>类型</th><th style="text-align:center">含义</th><th>示例</th></tr></thead><tbody><tr><td>user_id</td><td>bigint</td><td style="text-align:center">用户</td><td>ID</td><td>1234</td></tr><tr><td>Sex</td><td>bigint</td><td style="text-align:center">用户性别（ 1 ：男， 0：女 ）</td><td>0</td></tr><tr><td>City</td><td>bigint</td><td style="text-align:center">所在城市</td><td>6081949</td></tr><tr><td>constellation</td><td>string</td><td style="text-align:center">星座</td><td>射手座</td></tr></tbody></table><p>申购赎回数据 user_balance：</p><table><thead><tr><th>列名</th><th>类型</th><th style="text-align:center">含义</th><th>示例</th></tr></thead><tbody><tr><td>user_id</td><td>bigint</td><td style="text-align:center">用户 id</td><td>1234</td></tr><tr><td>report_date</td><td>string</td><td style="text-align:center">日期</td><td>20140407</td></tr><tr><td>tBalance</td><td>bigint</td><td style="text-align:center">今日余额</td><td>109004</td></tr><tr><td>yBalance</td><td>bigint</td><td style="text-align:center">昨日余额</td><td>97389</td></tr><tr><td>total_purchase_amt</td><td>bigint</td><td style="text-align:center">今日总购买量 = 直接购买 + 收益</td><td>21876</td></tr><tr><td>direct_purchase_amt</td><td>bigint</td><td style="text-align:center">今日直接购买量</td><td>21863</td></tr><tr><td>purchase_bal_amt</td><td>bigint</td><td style="text-align:center">今日支付宝余额购买量</td><td>0</td></tr><tr><td>purchase_bank_amt</td><td>bigint</td><td style="text-align:center">今日银行卡购买量</td><td>21863</td></tr><tr><td>total_redeem_amt</td><td>bigint</td><td style="text-align:center">今日总赎回量 = 消费 + 转出</td><td>10261</td></tr><tr><td>consume_amt</td><td>bigint</td><td style="text-align:center">今日消费总量</td><td>0</td></tr><tr><td>transfer_amt</td><td>bigint</td><td style="text-align:center">今日转出总量</td><td>10261</td></tr><tr><td>tftobal_amt</td><td>bigint</td><td style="text-align:center">今日转出到支付宝余额总量</td><td>0</td></tr><tr><td>tftocard_amt</td><td>bigint</td><td style="text-align:center">今日转出到银行卡总量</td><td>10261</td></tr><tr><td>share_amt</td><td>bigint</td><td style="text-align:center">今日收益</td><td>13</td></tr><tr><td>category1</td><td>bigint</td><td style="text-align:center">今日类目 1 消费总额</td><td>0</td></tr><tr><td>category2</td><td>bigint</td><td style="text-align:center">今日类目 2 消费总额</td><td>0</td></tr><tr><td>category3</td><td>bigint</td><td style="text-align:center">今日类目 3 消费总额</td><td>0</td></tr><tr><td>category4</td><td>bigint</td><td style="text-align:center">今日类目 4 消费总额</td><td>0</td></tr></tbody></table><p>收益率数据 mfd_day_share_interest：</p><table><thead><tr><th>列名</th><th>类型</th><th style="text-align:center">含义</th><th>示例</th></tr></thead><tbody><tr><td>mfd_date</td><td>string</td><td style="text-align:center">日期</td><td>20140102</td></tr><tr><td>mfd_daily_yield</td><td>double</td><td style="text-align:center">万份收益，即 1 万块钱的收益。</td><td>1.5787</td></tr><tr><td>mfd_7daily_yield</td><td>double</td><td style="text-align:center">七日年化收益率（ % ）</td><td>6.307</td></tr></tbody></table><p>银行拆借利率数据 mfd_bank_shibor：</p><table><thead><tr><th>列名</th><th>类型</th><th style="text-align:center">含义</th><th>示例</th></tr></thead><tbody><tr><td>mfd_date</td><td>String</td><td style="text-align:center">日期</td><td>20140102</td></tr><tr><td>Interest_O_N</td><td>Double</td><td style="text-align:center">隔夜利率（%）</td><td>2.8</td></tr><tr><td>Interest_1_W</td><td>Double</td><td style="text-align:center">1周利率（%）</td><td>4.25</td></tr><tr><td>Interest_2_W</td><td>Double</td><td style="text-align:center">2周利率（%）</td><td>4.9</td></tr><tr><td>Interest_1_M</td><td>Double</td><td style="text-align:center">1个月利率（%）</td><td>5.04</td></tr><tr><td>Interest_3_M</td><td>Double</td><td style="text-align:center">3个月利率（%）</td><td>4.91</td></tr><tr><td>Interest_6_M</td><td>Double</td><td style="text-align:center">6个月利率（%）</td><td>4.79</td></tr><tr><td>Interest_9_M</td><td>Double</td><td style="text-align:center">9个月利率（%）</td><td>4.76</td></tr><tr><td>Interest_1_Y</td><td>Double</td><td style="text-align:center">1年利率（%）</td><td>4.78</td></tr></tbody></table><h3 id="数据关系"><a href="#数据关系" class="headerlink" title="数据关系"></a>数据关系</h3><p>今日余额 = 昨日余额 + 今日申购 - 今日赎回<br>今日余额 = 昨日余额 + [直接购买(支付宝+银行)+ 收益] - [消费 + 支出(支付宝+银行)]<br>tBalance = yBalance + (direct_purchase_amt + share_amt) - (consume_amt + transfer_amt)</p><h2 id="抽取特征"><a href="#抽取特征" class="headerlink" title="抽取特征"></a>抽取特征</h2><h2 id="资金流预测"><a href="#资金流预测" class="headerlink" title="资金流预测"></a>资金流预测</h2><p>采用时间序列预测的ARIMA模型，BP神经网络，集成学习来进行预测，并结合不同的算法进行组合预测</p><h3 id="ARIMA"><a href="#ARIMA" class="headerlink" title="ARIMA"></a>ARIMA</h3><h3 id="BP"><a href="#BP" class="headerlink" title="BP"></a>BP</h3><h3 id="ARIMA-BP"><a href="#ARIMA-BP" class="headerlink" title="ARIMA+BP"></a>ARIMA+BP</h3><h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><h3 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-服务外包项目-&lt;br&gt;资金流入流出问题的研究笔记，数据来自蚂蚁金服大数据赛题&lt;br&gt;笔记持续更新中&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="https://hyqskevin.github.io/categories/practice/"/>
    
    
      <category term="time_series" scheme="https://hyqskevin.github.io/tags/time-series/"/>
    
      <category term="ensemble_learning" scheme="https://hyqskevin.github.io/tags/ensemble-learning/"/>
    
      <category term="bp_nn" scheme="https://hyqskevin.github.io/tags/bp-nn/"/>
    
  </entry>
  
  <entry>
    <title>pandas comparison with SQL</title>
    <link href="https://hyqskevin.github.io/2019/02/19/pandas%20compare%20with%20SQL/"/>
    <id>https://hyqskevin.github.io/2019/02/19/pandas compare with SQL/</id>
    <published>2019-02-19T07:41:56.000Z</published>
    <updated>2019-03-03T12:21:19.006Z</updated>
    
    <content type="html"><![CDATA[<p>-loading…-<br>some examples of how various SQL operations would be performed using pandas<br>收集和比较pandas使用过程中和数据库类似的一些操作，方便使用pandas进行数据分析<br><a id="more"></a></p><p>import pandas and NumPy as follows</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'total_bill'</span>, <span class="string">'tip'</span>, <span class="string">'smoker'</span>, <span class="string">'time`'</span></span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>With pandas, column selection is done by passing a list of column names to your DataFrame:<br><code>tips[[&#39;total_bill&#39;, &#39;tip&#39;, &#39;smoker&#39;, &#39;time&#39;]].head(5)</code></p><p>pandas中利用列名和head()进行筛选<br>SELECT * = 不列举列名，显示所有列</p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">time</span> = <span class="string">'Dinner'</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>DataFrames can be filtered in multiple ways; the most intuitive of which is using boolean indexing.<br><code>tips[tips[&#39;time&#39;] == &#39;Dinner&#39;].head(5)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_dinner = tips[<span class="string">'time'</span>] == <span class="string">'Dinner'</span></span><br><span class="line">is_dinner.value_counts()</span><br><span class="line"></span><br><span class="line"><span class="keyword">True</span>     <span class="number">176</span></span><br><span class="line"><span class="keyword">False</span>     <span class="number">68</span></span><br><span class="line">Name: time, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tips of more than $5.00 at Dinner meals</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">time</span> = <span class="string">'Dinner'</span> <span class="keyword">AND</span> tip &gt; <span class="number">5.00</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">size</span> &gt;= <span class="number">5</span> <span class="keyword">OR</span> total_bill &gt; <span class="number">45</span>;</span><br></pre></td></tr></table></figure><p>multiple conditions can be passed to a DataFrame using | (OR) and &amp; (AND)<br><code>tips[(tips[&#39;time&#39;] == &#39;Dinner&#39;) &amp; (tips[&#39;tip&#39;] &gt; 5.00)]</code><br><code>tips[(tips[&#39;size&#39;] &gt;= 5) | (tips[&#39;total_bill&#39;] &gt; 45)]</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> frame</span><br><span class="line"><span class="keyword">WHERE</span> col2 <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> frame</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>NULL checking is done using the notna() and isna() methods.<br><code>frame[frame[&#39;col2&#39;].isna()]</code><br><code>frame[frame[&#39;col1&#39;].notna()]</code></p><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="comment">-- Female 87 Male 157</span></span><br></pre></td></tr></table></figure><p>GROUP BY operations are performed using the similarly named groupby() method<br><code>tips.groupby(&#39;sex&#39;).size()</code></p><p>we used size() and not count(). This is because count() applies the function to each column, returning the number of not null records within each.</p><p>we could have applied the count() method to an individual column:<br><code>ips.groupby(&#39;sex&#39;)[&#39;total_bill&#39;].count()</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">day</span>, <span class="keyword">AVG</span>(tip), <span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Fri   2.734737   19</span></span><br><span class="line"><span class="comment">Sat   2.993103   87</span></span><br><span class="line"><span class="comment">Sun   3.255132   76</span></span><br><span class="line"><span class="comment">Thur  2.771452   62</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>agg() allows you to pass a dictionary to your grouped DataFrame, indicating which functions to apply to specific columns.<br><code>tips.groupby(&#39;day&#39;).agg({&#39;tip&#39;: np.mean, &#39;day&#39;: np.size})</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> smoker, <span class="keyword">day</span>, <span class="keyword">COUNT</span>(*), <span class="keyword">AVG</span>(tip)</span><br><span class="line"><span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> smoker, <span class="keyword">day</span>;</span><br></pre></td></tr></table></figure><p>Grouping by more than one column is done by passing a list of columns to the groupby() method.<br><code>tips.groupby([&#39;smoker&#39;, &#39;day&#39;]).agg({&#39;tip&#39;: [np.size, np.mean]})</code></p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><h3 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> df1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> df2</span><br><span class="line">  <span class="keyword">ON</span> df1.key = df2.key;</span><br></pre></td></tr></table></figure><p>JOINs can be performed with join() or merge()<br><code>pd.merge(df1, df2, on=&#39;key&#39;)</code></p><p>merge() also offers parameters for cases when you’d like to join one DataFrame’s column with another DataFrame’s index<br><code>indexed_df2 = df2.set_index(&#39;key&#39;)</code></p><h3 id="left-outer-join"><a href="#left-outer-join" class="headerlink" title="left outer join"></a>left outer join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- show all records from df1</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> df1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> df2</span><br><span class="line">  <span class="keyword">ON</span> df1.key = df2.key;</span><br></pre></td></tr></table></figure><p><code>pd.merge(df1, df2, on=&#39;key&#39;, how=&#39;left&#39;)</code></p><h3 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- show all records from df1</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> df1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> df2</span><br><span class="line">  <span class="keyword">ON</span> df1.key = df2.key;</span><br></pre></td></tr></table></figure><p><code>pd.merge(df1, df2, on=&#39;key&#39;, how=&#39;right&#39;)</code></p><h3 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- show all records from both tables</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> df1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> df2</span><br><span class="line">  <span class="keyword">ON</span> df1.key = df2.key;</span><br></pre></td></tr></table></figure><p><code>pd.merge(df1, df2, on=&#39;key&#39;, how=&#39;outer&#39;)</code></p><ul><li>full join are not supported in all RDBMS(关系型数据库)</li></ul><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> df1</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> city, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> df2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         city  rank</span></span><br><span class="line"><span class="comment">      Chicago     1</span></span><br><span class="line"><span class="comment">San Francisco     2</span></span><br><span class="line"><span class="comment">New York City     3</span></span><br><span class="line"><span class="comment">      Chicago     1</span></span><br><span class="line"><span class="comment">       Boston     4</span></span><br><span class="line"><span class="comment">  Los Angeles     5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>UNION ALL can be performed using <code>concat()</code>.<br><code>pd.concat([df1, df2])</code></p><p>use <code>concat().drop_duplicates()</code> to remove duplicate rows<br><code>pd.concat([df1, df2]).drop_duplicates()</code></p><h3 id="analytic-and-aggregate"><a href="#analytic-and-aggregate" class="headerlink" title="analytic and aggregate"></a>analytic and aggregate</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tips</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tip <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>根据<code>tip</code>降序排序，从最小5开始输出10个结果<br><code>tips.nlargest(10 + 5, columns=&#39;tip&#39;).tail(10)</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Oracle's ROW_NUMBER() analytic function</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    t.*,</span><br><span class="line">    ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">day</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_bill <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">  <span class="keyword">FROM</span> tips t</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> rn &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">day</span>, rn;</span><br></pre></td></tr></table></figure><p><code>ROW_NUMBER() OVER (PARTITION BY COL1 ORDER BY COL2)</code>row_number从1开始，为每一条分组记录返回一个数字,根据COL1分组，在分组内部根据 COL2排序，而此函数计算的值就表示每组内部排序后的顺序编号（组内连续的唯一的)<br>MySQL本身不含<code>row_number()</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(tips.assign(rn=tips.sort_values([<span class="string">'total_bill'</span>], ascending=<span class="keyword">False</span>)</span><br><span class="line">    .groupby([<span class="string">'day'</span>])</span><br><span class="line">    .cumcount() + <span class="number">1</span>)</span><br><span class="line">    .query(<span class="string">'rn &lt; 3'</span>)</span><br><span class="line">    .sort_values([<span class="string">'day'</span>, <span class="string">'rn'</span>]))</span><br></pre></td></tr></table></figure><p>sort_values([‘total_bill’], ascending=False 根据total_bill的值倒叙排序，赋值rn<br>groupby([‘day’]) 根据day聚合<br>query(‘rn &lt; 3’) 筛选rn&lt;3的行</p><h4 id="Top-N-rows-with-offset"><a href="#Top-N-rows-with-offset" class="headerlink" title="Top N rows with offset"></a>Top N rows with offset</h4><h4 id="Top-N-rows-per-group"><a href="#Top-N-rows-per-group" class="headerlink" title="Top N rows per group"></a>Top N rows per group</h4><h3 id="uodate"><a href="#uodate" class="headerlink" title="uodate"></a>uodate</h3><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-loading…-&lt;br&gt;some examples of how various SQL operations would be performed using pandas&lt;br&gt;收集和比较pandas使用过程中和数据库类似的一些操作，方便使用pandas进行数据分析&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="https://hyqskevin.github.io/categories/practice/"/>
    
    
      <category term="python" scheme="https://hyqskevin.github.io/tags/python/"/>
    
      <category term="pandas" scheme="https://hyqskevin.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>book-list</title>
    <link href="https://hyqskevin.github.io/2019/02/16/book-list/"/>
    <id>https://hyqskevin.github.io/2019/02/16/book-list/</id>
    <published>2019-02-16T03:02:57.000Z</published>
    <updated>2019-03-03T09:06:30.005Z</updated>
    
    <content type="html"><![CDATA[<p>个人书库，收集正在看的和准备要看的好书，不定期更新<br><a id="more"></a></p><h4 id="【2018年《华盛顿邮报》推荐书单】"><a href="#【2018年《华盛顿邮报》推荐书单】" class="headerlink" title="【2018年《华盛顿邮报》推荐书单】"></a>【2018年《华盛顿邮报》推荐书单】</h4><p>本年度推荐的书：<br>《Good Aand Mad》（《善良与狂暴》）、<br>《The Library Book》（图书馆的书）、<br>《The line becomes a river》（《一条线变成一条河》）、<br>《The maze at Windermere》（《温德米尔的迷宫》）、<br>《On desperate ground》（《在绝望的战场上》）、<br>《One person,no vote》（《一人，零票》）、<br>《The Overstory》（《上层林冠》）、<br>《A place for US》（《属于我们的地方》）、<br>《There  There》（《好了，没事了》）、<br>《Washington Black》（《华盛顿黑人》）<br><br></p><h4 id="【2018年《华尔街日报》十佳书单】"><a href="#【2018年《华尔街日报》十佳书单】" class="headerlink" title="【2018年《华尔街日报》十佳书单】"></a>【2018年《华尔街日报》十佳书单】</h4><p>本年度推荐的书：<br>《不对称》(ASYMMETRY)<br>《丘吉尔传》(CHURCHILL)<br>《暴风骤雨》(CLOUDBURSTS)<br>《意识的本能》(THE CONSCIOUSNESS INSTINCT)<br>《弗雷德里克·道格拉斯传》(FREDERICK DOUGLASS)<br>《天赐良机》(GODSEND)<br>《伊庇鲁斯的挽歌》(LAMENT FROM EPIRUS)<br>《我自己的生活》(A LIFE OF MY OWN)<br>《头号爱国者》(PATRIOT NUMBER ONE)<br>《暗影季节》(SEASON OF THE SHADOW)<br><br></p><h4 id="【2018《金融时报》和麦肯锡年度“最佳商业图书奖”入围书单-】"><a href="#【2018《金融时报》和麦肯锡年度“最佳商业图书奖”入围书单-】" class="headerlink" title="【2018《金融时报》和麦肯锡年度“最佳商业图书奖”入围书单 】"></a>【2018《金融时报》和麦肯锡年度“最佳商业图书奖”入围书单 】</h4><p>本年度推荐的书：<br>《美国资本主义》（Capitalism in America）<br>《崩溃》（Crashed）<br>《短命的银行》（The Bank That Lived A Little）<br>《受损的商品》（Damaged Goods）<br>《滴血成金》（Bad Blood）<br>《十亿美元鲸鱼》（Billion Dollar Whale）：<br>《简斯维尔》（Janesville），<br>《认清事实》（Factfulness）：<br>《万物价值》（The Value of Everything）<br>《给人民发钱》（Give People Money）<br>《新势力》（New Power）<br>《零工》（Gigged）<br>《亿万富翁的天下》（The Billionaire Raj）<br>《崛起的五千万》（Fifty Million Rising）<br>《极乐男权》（Brotopia）<br>《谁是迈克尔·奥维茨？》（Who Is Michael Ovitz?）<br><br></p><h4 id="【2018年比尔·盖茨推荐的5本书】"><a href="#【2018年比尔·盖茨推荐的5本书】" class="headerlink" title="【2018年比尔·盖茨推荐的5本书】"></a>【2018年比尔·盖茨推荐的5本书】</h4><p>本年度推荐的书：<br>《21世纪的21一个教训 21 Lessons for the 21st Century》<br>《一扫光的武器  Army of None_ Autonomous Weapons and the Future of War》<br>《Educated 》<br>《Bad Blood》<br>《Meditation and Mindfulness》<br><br></p><h4 id="【《经济学人》2018年推荐书单】"><a href="#【《经济学人》2018年推荐书单】" class="headerlink" title="【《经济学人》2018年推荐书单】"></a>【《经济学人》2018年推荐书单】</h4><p>《Moneyland》<br>《Enlightenment Now》<br>《Fascism: A Warning》<br>《First Raise a Flag》<br>《Into the Hands of the Soldiers》<br>《Shadows of Empire》<br>《A History of America in 100 Maps》<br>《Pogrom》<br>《The China Mission》<br>《Rise and Kill First》<br>《We the Corporations》<br>《AI Superpowers》<br>《Radical Markets》<br>《EuroTragedy》<br>《Crashed》<br>《The Wife’s Tale: A Personal History》<br>《Educated》<br>《Barracoon》<br>《Napoleon: A Life》<br>《Churchill: Walking with Destiny》<br>《Gandhi》<br>《The Spy and the Traitor》<br><br></p><h4 id="【彭博盘点2018年书单】"><a href="#【彭博盘点2018年书单】" class="headerlink" title="【彭博盘点2018年书单】"></a>【彭博盘点2018年书单】</h4><p>《high growth handbook》<br>《The Coddling of the American Mind: How Good Intentions and Bad Ideas Are Setting Up a Generation for Failure》<br>《Our Towns: A 100,000-Mile Journey Into the Heart of America》<br>《Educated: A Memoir》<br>《Stubborn Attachments: A Vision for a Society of Free, Prosperous, and Responsible Individuals》<br>《Refugee》<br>《Factfulness: Ten Reasons We’re Wrong About the World—and Why Things Are Better Than You Think》<br>《The Efficiency Paradox: What Big Data Can’t Do》<br>《The Third Plate: Field Notes on the Future of Food》<br>《Inspired: How to Create Tech Products Customers Love》<br>《Bad Blood: Secrets and Lies in a Silicon Valley Startup》<br>《Grant》<br>《Principles: Life and Work》<br>《The Coddling of the American Mind: How Good Intentions and Bad Ideas Are Setting Up a Generation for Failure》<br>《The Culture Code: The Secrets of Highly Successful Groups》<br>《Hit Refresh: The Quest to Rediscover Microsoft’s Soul and Imagine a Better Future for Everyone》<br>《Keeping At It: The Quest for Sound Money and Good Government》<br>《New Power: How Power Works in Our Hyperconnected World—and How to Make It Work for You》<br>《The Complete Personal Memoirs of Ulysses S. Grant》<br>《The Book of Why: The New Science of Cause and Effect》<br>《Powerful: Building a Culture of Freedom and Responsibility》<br>《The Courage to Be Disliked: The Japanese Phenomenon That Shows You How to Change Your Life and Achieve Real 》《Happiness》<br>《Dare to Lead: Brave Work. Tough Conversations. Whole Hearts.》<br>《Without Precedent: Chief Justice John Marshall and His Times》<br>《The Largesse of the Sea Maiden: Stories》<br>《Paris in the Present Tense》<br>《Destined for War: Can America and China Escape Thucydides’s Trap?》<br>《Small Fry》<br>《Life 3.0: Being Human in the Age of Artificial Intelligence》<br>《Love and Ruin》<br><br></p><ul><li><a href="https://www.jianshu.com/p/0dc43df2c3eb" target="_blank" rel="noopener">来源：jianshu.com/p/0dc43df2c3eb</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人书库，收集正在看的和准备要看的好书，不定期更新&lt;br&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="book" scheme="https://hyqskevin.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>mysql 学习笔记</title>
    <link href="https://hyqskevin.github.io/2019/02/15/mysql/"/>
    <id>https://hyqskevin.github.io/2019/02/15/mysql/</id>
    <published>2019-02-15T07:59:50.000Z</published>
    <updated>2019-03-14T05:36:39.366Z</updated>
    
    <content type="html"><![CDATA[<p>-基础笔记-<br>二次回顾，学校课程 + 慕课网 MySQL 详细学习笔记<br>包括MySQL架构，MySQL操作，数据类型，数据库操作，数据表操作（创增删改查排序分组）及子句操作<br><a id="more"></a></p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>DB：数据库(Database)<br>DBS：数据库系统(Database System)<br>DBMS：数据库管理系统(Database Management System)</p><p>SQL语言：</p><ul><li>DDL  数据定义语言</li><li>DML  数据操作语言</li><li>DQL  数据查询语言</li><li>DCL  数据控制语言</li></ul><h2 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h2><p>MySQL是由SQL接口、解析器、优化器、缓存和存储引擎组成</p><ul><li>Connectors  指的是不同语言与SQL的交互接口</li><li>Management Serivices &amp; Utillities  系统管理和工具</li><li>Connection Pool  连接池，管理缓冲用户连接，线程处理等需要缓存的需求</li><li>SQL Interface  接收用户的SQL指令，并且返回需要查询的结果</li><li>Parser  解析器</li><li>Optimizer  查询优化器  选取-投影-联接</li><li>Caches &amp; Buffers  查询缓存</li><li>Engine  存储引擎</li></ul><img src="https://hyqskevin.github.io/pic/mysql.png" class="[MySQL架构]"><h3 id="MySQL存储引擎-loading…"><a href="#MySQL存储引擎-loading…" class="headerlink" title="MySQL存储引擎(loading…)"></a>MySQL存储引擎(loading…)</h3><h4 id="memory存储引擎"><a href="#memory存储引擎" class="headerlink" title="memory存储引擎"></a>memory存储引擎</h4><h4 id="CSV存储引擎"><a href="#CSV存储引擎" class="headerlink" title="CSV存储引擎"></a>CSV存储引擎</h4><h4 id="archive存储引擎"><a href="#archive存储引擎" class="headerlink" title="archive存储引擎"></a>archive存储引擎</h4><h4 id="myisam存储引擎"><a href="#myisam存储引擎" class="headerlink" title="myisam存储引擎"></a>myisam存储引擎</h4><h4 id="innodb存储引擎"><a href="#innodb存储引擎" class="headerlink" title="innodb存储引擎"></a>innodb存储引擎</h4><h2 id="mysql相关操作"><a href="#mysql相关操作" class="headerlink" title="mysql相关操作"></a>mysql相关操作</h2><p>my.cnf是MySQL的配置文件</p><h3 id="登陆-退出MySQL"><a href="#登陆-退出MySQL" class="headerlink" title="登陆/退出MySQL"></a>登陆/退出MySQL</h3><p>登陆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">mysql -hlocalhost -uroot -p -P3306</span><br><span class="line">mysql -uroot -p --prompt=命令提示符  //登陆的同时修改密令提示符</span><br><span class="line">mysql -uroot -p -D db_name  //登陆的同时打开指定数据库</span><br></pre></td></tr></table></figure><p>\h 主机<br>\u 当前登陆的用户<br>\d 当前打开的数据库<br>\D 当前服务器的日期时间<br>\c取消当前命令的执行<br>help或者\h或者?加上相关关键字来查看手册<br>命令行结束符默认使用;或者\g来结束</p><p>退出：exit | quit | \q | ctrl+c</p><h3 id="MySQL语句"><a href="#MySQL语句" class="headerlink" title="MySQL语句"></a>MySQL语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()  //得到登陆的用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()  //得到MySQL的版本信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>()  //得到当前的日期时间</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>()  //得到当前打开的数据库</span><br></pre></td></tr></table></figure><h3 id="MySQL常用函数"><a href="#MySQL常用函数" class="headerlink" title="MySQL常用函数"></a>MySQL常用函数</h3><p>CEIL()    进一取整<br>FLOOR()    舍掉小数部分<br>ROUND()    四舍五入<br>TRUNCATE()    截取小数点后几位<br>MOD()    取余数<br>ABS()    取绝对值<br>POWER()    幂运算<br>PI()    圆周率<br>RAND()或者RAND(X)    0~1之间的随机数<br>SIGN(X)    得到数字符号<br>EXP(X)    计算e的x次方</p><h2 id="数据库相关操作"><a href="#数据库相关操作" class="headerlink" title="数据库相关操作"></a>数据库相关操作</h2><ol><li><p>创建数据库<br><code>CREATE {DATABASE|SCHEMA} db_name;</code><br>检测数据库名称是否存在，不存在则创建<br><code>CREATE DATABASE [IF NOT EXISTS] db_name;</code><br>在创建数据库的同时指定编码方式<br><code>CREATE DATABASE [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset;</code></p></li><li><p>查看当前服务器下全部数据库<br><code>SHOW DATABASES|SCHEMAS;</code></p></li><li><p>查看指定数据库的详细信息<br><code>SHOW CREATE DATABASE db_name;</code></p></li><li><p>修改指定数据库的编码方式<br><code>ALTER DATABASE db_name [DEFAULT] CHARACTER SET [=] charset;</code></p></li><li><p>打开指定数据库<br><code>USE db_name;</code></p></li><li><p>得到当前打开的数据库<br><code>SELECT DATABASE()|SCHEMA();</code></p></li><li><p>删除指定的数据库<br><code>DROP DATABASE db_name;</code><br>如果数据库存在则删除<br><code>DROP DATABASE [IF EXISTS] db_name;</code></p></li></ol><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><img src="https://hyqskevin.github.io/pic/int.png" class="[整数型]"><img src="https://hyqskevin.github.io/pic/float.png" class="[浮点数型]"><img src="https://hyqskevin.github.io/pic/char.png" class="[字符串型]"><p>CHAR效率高于VARCHAR,CHAR相当于拿空间换时间，VARCHAR拿时间换空间<br>CHAR默认存储数据的时候，后面会用空格填充到指定长度；而在检索的时候会去掉后面空格；VARCHAR在保存的时候不进行填充，尾部的空格会留下<br>TEXT列不能有默认值,检索的时候不存在大小写转换<br><img src="https://hyqskevin.github.io/pic/date.png" class="[日期时间型]"></p><h2 id="数据表相关操作"><a href="#数据表相关操作" class="headerlink" title="数据表相关操作"></a>数据表相关操作</h2><p>数据表：数据表由行(row)和列(column)来组成。每个数据表中至少有一列，行可以有零行一行或者多行组成。表名要求唯一，不要包含特殊字符，最好含义明确</p><ol><li>创建表<br>CREATE TABLE [IF NOT EXISTS] tbl_name(<br> 字段名称 字段类型 [完整性约束条件],<br> 字段名称 字段类型 [完整性约束条件],<br>…<br>)ENGINE=存储引擎 CHARSET=编码方式;</li></ol><ul><li><p><strong>约束条件</strong><br>UNSIGNED  无符号，没有负数，从0开始<br>ZEROFILL  零填充，当数据的显示长度不够的时候可以使用前补0的效果填充至指定长度,字段会自动添加UNSIGNED<br>NOT NULL  非空约束，也就是插入值的时候这个字段必须要给值,值不能为空<br>DEFAULT  默认值，如果插入记录的时候没有给字段赋值，则使用默认值<br>PRIMARY KEY  主键，标识记录的唯一性，值不能重复，一个表只能有一个主键，自动禁止为空<br>AUTO_INCREMENT  自动增长，只能用于数值列，而且配合索引使用,默认起始值从1开始，每次增长1<br>UNIQUE KEY  唯一性，一个表中可以有多个字段是唯一索引，同样的值不能重复，但是NULL值除外<br>FOREIGN KEY  外键约束</p></li><li><p>示例1（无约束条件）</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> personal_info(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">CHAR</span>(<span class="number">32</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">age TINYINT,</span><br><span class="line">card <span class="built_in">CHAR</span>(<span class="number">18</span>),</span><br><span class="line">tel <span class="built_in">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">salary <span class="built_in">FLOAT</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">married TINYINT(<span class="number">1</span>),</span><br><span class="line">addr <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">sex ENUM(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'保密'</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=UTF8;</span><br></pre></td></tr></table></figure><ul><li>示例2（带约束条件）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`personal_info2`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line"><span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="string">`age`</span> TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">18</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line"><span class="string">`sex`</span> ENUM(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'保密'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'保密'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line"><span class="string">`tel`</span> <span class="built_in">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'电话'</span>,</span><br><span class="line"><span class="string">`addr`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'北京'</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line"><span class="string">`card`</span> <span class="built_in">CHAR</span>(<span class="number">18</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'身份证号'</span>,</span><br><span class="line"><span class="string">`married`</span> TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0代表未结婚，1代表已结婚'</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">FLOAT</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'薪水'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=UTF8;</span><br></pre></td></tr></table></figure><ul><li>要注意单引号和反引号的使用</li></ul><ol start="2"><li>查看当前数据库下已有数据表<br><code>SHOW TABLES;</code><br><code>SHOW [FULL] TABLES [{FROM | IN} db_name] [LIKE &#39;pattern&#39; | WHERE expr];</code></li><li>查看指定数据表的详细信息<br><code>SHOW CREATE TABLE tbl_name;</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| personal_info2 | CREATE TABLE `personal_info2` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT <span class="string">'用户编号'</span>,</span><br><span class="line">  `username` varchar(20) NOT NULL COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `password` char(32) NOT NULL COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `email` varchar(50) NOT NULL COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line">  `age` tinyint(3) unsigned NOT NULL DEFAULT <span class="string">'18'</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">  `sex` enum(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'保密'</span>) NOT NULL DEFAULT <span class="string">'保密'</span> COMMENT <span class="string">'性别'</span>,</span><br><span class="line">  `tel` char(11) NOT NULL COMMENT <span class="string">'电话'</span>,</span><br><span class="line">  `addr` varchar(50) NOT NULL DEFAULT <span class="string">'北京'</span> COMMENT <span class="string">'地址'</span>,</span><br><span class="line">  `card` char(18) NOT NULL COMMENT <span class="string">'身份证号'</span>,</span><br><span class="line">  `married` tinyint(1) NOT NULL DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'0代表未结婚，1代表已结婚'</span>,</span><br><span class="line">  `salary` <span class="built_in">float</span>(8,2) NOT NULL DEFAULT <span class="string">'0.00'</span> COMMENT <span class="string">'薪水'</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `username` (`username`),</span><br><span class="line">  UNIQUE KEY `email` (`email`),</span><br><span class="line">  UNIQUE KEY `tel` (`tel`),</span><br><span class="line">  UNIQUE KEY `card` (`card`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br></pre></td></tr></table></figure><ol start="4"><li>查看表结构<br><code>DESC tbl_name;</code><br><code>DESCRIBE tbl_name;</code><br><code>SHOW COLUMNS FROM tbl_name;</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------+------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field    | Type                   | Null | Key | Default | Extra          |</span><br><span class="line">+----------+------------------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(10) unsigned       | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(20)            | NO   | UNI | NULL    |                |</span><br><span class="line">| password | char(32)               | NO   |     | NULL    |                |</span><br><span class="line">| email    | varchar(50)            | NO   | UNI | NULL    |                |</span><br><span class="line">| age      | tinyint(3) unsigned    | NO   |     | 18      |                |</span><br><span class="line">| sex      | enum(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'保密'</span>)  | NO   |     | 保密    |                |</span><br><span class="line">| tel      | char(11)               | NO   | UNI | NULL   |                |</span><br><span class="line">| addr     | varchar(50)            | NO   |     | 北京    |                |</span><br><span class="line">| card     | char(18)               | NO   | UNI | NULL    |                |</span><br><span class="line">| married  | tinyint(1)             | NO   |     | 0       |                |</span><br><span class="line">| salary   | <span class="built_in">float</span>(8,2)             | NO   |     | 0.00    |                |</span><br><span class="line">+----------+------------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><ol start="5"><li>删除指定的数据表<br><code>DROP TABLE [IF EXISTS] tbl_name;</code></li></ol><h3 id="表结构相关操作"><a href="#表结构相关操作" class="headerlink" title="表结构相关操作"></a>表结构相关操作</h3><p>add | drop | modify | change | set default | add/drop primary key |  add/drop unique |rename</p><ol><li>添加字段<br><code>ALTER TABLE tbl_name</code><br><code>ADD 字段名称 字段属性 [完整性约束条件] [FIRST|AFTER 字段名称]</code></li><li>删除字段<br><code>ALTER TABLE tbl_name</code><br><code>DROP 字段名称</code></li><li>添加默认值<br><code>ALTER TABLE tbl_name</code><br><code>ALTER 字段名称 SET DEFAULT 默认值;</code></li><li>删除默认值<br><code>ALTER TABLE tbl_name</code><br><code>ALTER 字段名称 DROP DEFAULT</code></li><li>修改字段类型、字段属性<br><code>ALTER TABLE tbl_name</code><br><code>MODIFY 字段名称 字段类型 [字段属性] [FIRST | AFTER 字段名称]</code></li><li>修改字段名称、字段类型、字段属性<br><code>ALTER TABLE tbl_name</code><br><code>CHANGE 原字段名称 新字段名称 字段类型 字段属性 [FIRST | AFTER 字段名称]</code></li><li>添加主键<br><code>ALTER TABLE tbl_name</code><br><code>ADD PRIMARY KEY(字段名称)</code></li><li>删除主键<br><code>ALTER TABLE tbl_name</code><br><code>DROP PRIMARY KEY;</code></li><li>添加唯一<br><code>ALTER TABLE tbl_name</code><br><code>ADD UNIQUE KEY|INDEX [index_name] (字段名称)</code></li><li>删除唯一<br><code>ALTER TABLE tbl_name</code><br><code>DROP index_name;</code></li><li>修改数据表名称<br><code>ALTER TABLE tbl_name</code><br><code>RENAME [TO|AS] new_tbl_name</code><br><code>RENAME TABLE tbl_name TO new_tbl_name;</code></li><li>修改AUTO_INCREMENT的值<br><code>ALTER TABLE tbl_name AUTO_INCREMENT=值</code></li></ol><h2 id="数据内容相关操作"><a href="#数据内容相关操作" class="headerlink" title="数据内容相关操作"></a>数据内容相关操作</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p><code>INSERT [INTO] tbl_name[(col_name,...)] {VALUE|VALUES}(VALUES...);</code></p><ul><li>不指定字段名称，需要按照建表时的字段顺序给每一个字段赋值<br><code>INSERT tbl_name VALUE(value...)</code></li><li>列出指定字段<br><code>INSERT tbl_name(字段名称,...) VALUES(值,...)</code></li><li>INSERT … SET的形式<br><code>INSERT tbl_name SET 字段名称=值,...;</code></li><li>INSERT … SELECT<br><code>INSERT tbl_name[(字段名称...)] SELECT 字段名称,... FROM  tbl_name [WHERE 条件]</code></li><li><p>一次添加多条记录<br><code>INSERT tbl_name[(字段名称,...)] VALUES(VALUES,...),(VALUES,....),()...</code></p></li><li><p>示例</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试添加记录</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> kevin <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> <span class="string">'UTF8'</span>;</span><br><span class="line"><span class="keyword">USE</span> kevin;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">    age TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="number">18</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'xxxx@qq.com'</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=UTF8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定字段名称</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span> <span class="keyword">VALUE</span>(<span class="number">1</span>,<span class="string">'kevin'</span>,<span class="number">24</span>,<span class="string">'420376@qq.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span> <span class="keyword">VALUES</span>(<span class="keyword">DEFAULT</span>,<span class="string">'hex'</span>,<span class="number">26</span>,<span class="string">'hex@qq.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出指定字段的形式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span>(username,email) <span class="keyword">VALUES</span>(<span class="string">'rose'</span>,<span class="string">'rose@qq.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span>(age,email,<span class="keyword">id</span>,username) <span class="keyword">VALUES</span>(<span class="number">34</span>,<span class="string">'xxxx@qq.com'</span>,<span class="number">5</span>,<span class="string">'xxxx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次插入3条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'a'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>),</span><br><span class="line">(<span class="literal">NULL</span>,<span class="string">'b'</span>,<span class="number">56</span>,<span class="string">'b@qq.com'</span>),</span><br><span class="line">(<span class="literal">NULL</span>,<span class="string">'c'</span>,<span class="number">14</span>,<span class="string">'c@qq.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT ...SET 的形式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span> <span class="keyword">SET</span> username=<span class="string">'d'</span>,age=<span class="number">45</span>,email=<span class="string">'d@qq.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT SELECT</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span>(username) <span class="keyword">SELECT</span> a <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>DELETE FROM tbl_name [WHERE 条件]</code><br>如果不添加条件，表中所有记录都会被删除<br>DELETE 清空数据表的时候不会重置AUTO_INCREMENT的值，可以通过ALTER 语句将其重置为1</p><p><code>TRUNCATE [TABLE] tbl_name;</code><br>清除表中所有记录<br>会重置AUTO_INCREMENT的值</p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试删除语句</span></span><br><span class="line"><span class="comment">-- 删除用户名</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username=<span class="string">'kevin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除年龄为24的用户</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age=<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中所有记录</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><code>UPDATE tbl_name SET 字段名称=值,字段名称=值 [WHERE 条件]</code><br>如果不添加条件，整个表中的记录都会被更新</p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试修改语句</span></span><br><span class="line"><span class="comment">-- 修改第一个用户的信息 id=1</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> age=<span class="number">29</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有用户年龄+10</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> age=age+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将id&lt;=5的用户年龄改为-20，将邮箱改为默认值</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> age=age<span class="number">-20</span>,email=<span class="keyword">DEFAULT</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="查询（重点）"><a href="#查询（重点）" class="headerlink" title="查询（重点）"></a>查询（重点）</h3><p><code>SELECT select_expr,... FROM tbl_name [WHERE 条件] [GROUP BY {col_name|position} HAVING 二次筛选] [ORDER BY {col_name|position|expr} [ASC|DESC]] [LIMIT 限制结果集的显示条数]</code></p><p>查询表中所有记录<br><code>SELECT * FROM tbl_name;</code><br>指定字段的信息<br><code>SELECT 字段名称,... FROM tbl_name</code><br>库名.表名<br><code>SELECT 字段名称,... FROM db_name.tbl_name;</code><br>给字段起别名<br><code>SELECT 字段名称 [AS] 别名名称,... FROM db_name.tbl_name;</code><br>给数据表起别名<br><code>SELECT 字段名称 ,... FROM tbl_name [AS] 别名;</code><br>表名.字段名的<br><code>SELECT tbl_name.col_name,... FROM tbl_name;</code></p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表中所有记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- username,addr,age</span></span><br><span class="line"><span class="keyword">SELECT</span> username,addr,age <span class="keyword">FROM</span> user1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库下user1表中的所有记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> kevin.user1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询user1表中的id 编号 username 用户名 sex 性别</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> <span class="string">'编号'</span>,username <span class="keyword">AS</span> <span class="string">'用户名'</span>, sex <span class="keyword">AS</span> <span class="string">'性别'</span></span><br><span class="line"><span class="keyword">FROM</span> user1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username <span class="keyword">FROM</span> user1 <span class="keyword">AS</span> u;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找表名中的字段名</span></span><br><span class="line"><span class="keyword">SELECT</span> user1.id,user1.username,user1.age <span class="keyword">FROM</span> user1 ;</span><br><span class="line"><span class="keyword">SELECT</span> u.id,u.username,u.addr,u.sex <span class="keyword">FROM</span> user1 <span class="keyword">AS</span> u;</span><br></pre></td></tr></table></figure><h4 id="避免重复"><a href="#避免重复" class="headerlink" title="避免重复"></a>避免重复</h4><p>关键词 DISTINCT 用于返回唯一不同的值。<br><code>SELECT DISTINCT 列名称 FROM 表名称</code></p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t，对于重复的emp_no进行忽略。</span></span><br><span class="line"><span class="keyword">SELECT</span> title, <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> emp_no) <span class="keyword">AS</span> t <span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> title <span class="keyword">HAVING</span> t &gt;= <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="where条件"><a href="#where条件" class="headerlink" title="where条件"></a>where条件</h4><p><code>&gt; &gt;= &lt; &lt;= != &lt;&gt; &lt;=&gt;</code> 比较运算符<br><code>IS [NOT] NULL</code>  检测值是否为NULL或者NOT NULL<br><code>[NOT] BETWEEN ... AND</code>  指定范围<br><code>[NOT] IN(值,...)</code>  指定集合<br><code>[NOT] LIKE</code>  匹配字符<br><code>% %</code> 任意长度的字符串<br><code>___</code>  任意一个字符</p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,userDesc <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> userDesc&lt;=&gt;<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,userDesc <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> userDesc <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">18</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询编号为1,3,5,7,9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">78</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> sex=<span class="string">'男'</span> <span class="keyword">AND</span> age&gt;=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex,salary,addr <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">60000</span> <span class="keyword">AND</span> <span class="number">100000</span> <span class="keyword">AND</span> sex=<span class="string">'男'</span> <span class="keyword">AND</span> addr=<span class="string">'北京'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">OR</span> username=<span class="string">'kevin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%in%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br></pre></td></tr></table></figure><h4 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h4><ol><li>GROUP_CONCAT()查看组中某个字段的详细信息</li><li>配合聚合函数使用<br>COUNT()  //统计记录总数。如果写的是COUNT(字段名称)，字段中的值为NULL，不统计进来，写COUNT(*)会统计NULL值<br>SUM()  //求和<br>MAX()  //求最大值<br>MIN()  //求最小值<br>AVG()  //求平均值</li><li>配合<code>WITH ROLLUP</code>关键使用,会在记录末尾添加一条记录，是上面所有记录的总和</li><li><code>HAVING</code>子句对分组结果进行二次筛选</li></ol><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组sex</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照addr分组</span></span><br><span class="line"><span class="keyword">SELECT</span> username,age,sex,addr <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，查询组中的用户名有哪些</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(username),age,sex,addr <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试COUNT()</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> user1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照sex分组，得到用户名详情，并且计算组中的总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照addr分组，得到用户名的详情，总人数，得到组中年龄的总和，年龄的最大值、最小值、平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> addr,</span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers,</span><br><span class="line"><span class="keyword">SUM</span>(age) <span class="keyword">AS</span> sum_age,</span><br><span class="line"><span class="keyword">MAX</span>(age) <span class="keyword">AS</span> max_age,</span><br><span class="line"><span class="keyword">MIN</span>(age) <span class="keyword">AS</span> min_age,</span><br><span class="line"><span class="keyword">AVG</span>(age) <span class="keyword">AS</span> avg_age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照字段的位置来分组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,sex,</span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers,</span><br><span class="line"><span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> sum_salary,</span><br><span class="line"><span class="keyword">MAX</span>(salary) <span class="keyword">AS</span> max_salary,</span><br><span class="line"><span class="keyword">MIN</span>(salary) <span class="keyword">AS</span> min_salary,</span><br><span class="line"><span class="keyword">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询age&gt;=30的用户并且按照sex分组</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> age&gt;=<span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对于分组结果进行二次筛选，条件是组中总人数&gt;=3</span></span><br><span class="line"><span class="keyword">SELECT</span> addr,</span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> addr</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 要求平均薪水&gt;=40000</span></span><br><span class="line"><span class="keyword">SELECT</span> addr,</span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(username) <span class="keyword">AS</span> usersDetail,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> totalUsers,</span><br><span class="line"><span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> sum_salary,</span><br><span class="line"><span class="keyword">MAX</span>(salary) <span class="keyword">AS</span> max_salary,</span><br><span class="line"><span class="keyword">MIN</span>(salary) <span class="keyword">AS</span> min_salary,</span><br><span class="line"><span class="keyword">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> addr</span><br><span class="line"><span class="keyword">HAVING</span> avg_salary&gt;=<span class="number">40000</span>;</span><br></pre></td></tr></table></figure><h4 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h4><p>ORDER BY 字段名称 ASC|DESC</p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按照id降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照age升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照多个字段排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>,<span class="keyword">id</span> <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试条件+排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">WHERE</span> age&gt;=<span class="number">30</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实现随机记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">RAND</span>();</span><br></pre></td></tr></table></figure><h4 id="LIMIT-限制结果集显示条数"><a href="#LIMIT-限制结果集显示条数" class="headerlink" title="LIMIT 限制结果集显示条数"></a>LIMIT 限制结果集显示条数</h4><p>LIMIT 值<br>显示结果集的前几条记录<br>LIMIT offset,row_count<br>从offset开始，显示几条记录,offset从0开始</p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示结果集的前5条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,username,age,sex</span><br><span class="line"><span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新前3条记录，将age+5</span></span><br><span class="line"><span class="keyword">UPDATE</span> user1 <span class="keyword">SET</span> age=age+<span class="number">5</span> <span class="keyword">LIMIT</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照id降序排列，更新前三条记录，将age-10</span></span><br><span class="line"><span class="keyword">UPDATE</span> user1 <span class="keyword">SET</span> age=age<span class="number">-10</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除前三条记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> user1</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ol><li>笛卡尔积的形式</li><li>内连接的形式<br><code>SELECT 字段名称,... FROM tbl_name1 INNER JOIN tbl_name2 ON 连接条件</code>  //查询两个表中符合连接条件的记录</li><li>外连接的形式</li></ol><ul><li>左外连接<br><code>SELECT 字段名称,... FROM tbl_name1 LEFT OUTER JOIN tbl_name2 ON 条件;</code><br>左表为主表，先显示左表中的全部记录，再去右表中查询复合条件的记录，不符合的以NULL代替</li><li><p>右外连接<br><code>SELECT 字段名称,... FROM tbl_name1 RIGHT [OUTER] JOIN tbl_name2 ON 条件;</code><br>右表为主表，先显示右表中的全部记录，再去左表中查询复合条件的记录，不符合的以NULL代替</p></li><li><p>示例</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp id username age addr dep id depName depDesc</span></span><br><span class="line"><span class="keyword">SELECT</span> e.id,e.username,e.age,e.addr,</span><br><span class="line">d.id,d.depName,d.depDesc</span><br><span class="line"><span class="keyword">FROM</span> dep <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">JOIN</span> emp <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">ON</span> d.id=e.depId;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e.id,e.username,e.age,d.depName,d.depDesc</span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dep <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">ON</span> e.depId=d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e.id,e.username,e.age,d.depName,d.depDesc</span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dep <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">ON</span> e.depId=d.id;</span><br></pre></td></tr></table></figure><h3 id="外键约束-loading…"><a href="#外键约束-loading…" class="headerlink" title="外键约束(loading…)"></a>外键约束(loading…)</h3><p><strong>只有InnoDB存储引擎支持外键</strong></p><ol><li>建表时指定外键<br><code>[CONSTRAINT 外键名称 ]FOREIGN KEY(字段名称) REFERENCES 主表(字段名称)</code><br>子表的外键字段和主表的主键字段类型要相似；如果是数值型要求一致，并且无符号也要一致；如果是字符型，要求类型一致，长度可以不同<br>如果外键字段没有创建索引，MySQL会自动帮我们添加索引<br>子表的外键关联的必须是父表的主键</li></ol><ul><li>外键约束的参照操作<br>CASCADE  从附表删除或更新，子表也跟着删除或者更新，级联的操作<br>SET NULL  从附表删除或者更新记录，并设置子表的外键列为NULL。<br>NO ACTION | RESTRICT  拒绝对父表做更新或者删除操作</li></ul><ol start="2"><li>动态添加外键<br><code>ALTER TABLE tbl_name [CONSTRAINT 外键名称] ADD FOREIGN KEY(外键字段) REFERENCES 主表(主键字段);</code><br>动态添加外键之前表中的记录一定合法的记录，没有脏值，否则外键添加不成功</li><li>动态删除外键<br><code>ALTER TABLE tbl_name DROP FOREIGN KEY fk_name;</code></li></ol><h3 id="特殊形式查询-loading…"><a href="#特殊形式查询-loading…" class="headerlink" title="特殊形式查询(loading…)"></a>特殊形式查询(loading…)</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p><code>SELECT 字段名称 FROM tbl_name WHERE col_name=(SELECT col_name FROM tbl_name)</code></p><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><ol><li>UNION<br><code>SELECT 字段名称,... FROM tbl_name1 UNION SELECT 字段名称... FROM tbl_name2;</code></li><li>UNION ALL<br><code>SELECT 字段名称,... FROM tbl_name1 UNION ALL SELECT 字段名称... FROM tbl_name2;</code><br>UNION ALL 是简单的合并，UNION会去掉表中重复记录</li></ol><h4 id="自身连接查询"><a href="#自身连接查询" class="headerlink" title="自身连接查询"></a>自身连接查询</h4><h4 id="正则表达式查询"><a href="#正则表达式查询" class="headerlink" title="正则表达式查询"></a>正则表达式查询</h4><p><code>^</code> 匹配字符串开始的部分<br><code>$</code> 匹配字符串结束部分<br><code>.</code> 代表一个任意字符<br><code>[字符集合]</code> [abc] [a-z] [0-9]<br><code>[^字符集合]</code> 除了集合中的内容<br><code>s1|s2|s3</code> 匹配s1或者s2或者s3<br><code>*</code> 代表匹配前面的字符0次1次或者多次<br><code>+</code> 代表匹配前面的字符至少出现1次<br><code>字符{n}</code> 前面的字符正好出现n次<br><code>字符{m,n}</code> 前面的字符至少出现m次，最多出现n次</p><h2 id="其它注意事项"><a href="#其它注意事项" class="headerlink" title="其它注意事项"></a>其它注意事项</h2><p>SQL语句语法规范</p><ul><li>常用MySQL的关键字我们需要大写，库名、表名、字段名称等使用小写</li><li>SQL语句支持折行操作，拆分的时候不能把完整单词拆开</li><li><p>数据库名称、表名称、字段名称不要使用MySQL的保留字，如果必须要使用，需要用反引号<code></code>将其括起来</p></li><li><p>创建的数据库名称最好有意义，名称不要包含特殊字符或者是MySQL关键字</p></li></ul><p>常用SQL语句</p><ul><li>SHOW WARNINGS;  //查看上一步操作产生的警告信息</li><li>CHECK TABLE tbl_name  //检测表</li><li>REPAIR TABLE tbl_name  //修复表</li></ul><hr><p>相关链接：<br><a href="https://hyqskevin.github.io/2019/01/21/php-notes3/">PHP &amp; MySQL learning notes (4)</a><br><a href="https://hyqskevin.github.io/2019/01/21/php-notes2/">PHP &amp; MySQL learning notes (3)</a><br><a href="https://hyqskevin.github.io/2019/01/21/php-notes/">PHP &amp; MySQL learning notes (2)</a><br><a href="https://hyqskevin.github.io/2018/10/28/w3school-php/">PHP &amp; MySQL learning notes (1)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-基础笔记-&lt;br&gt;二次回顾，学校课程 + 慕课网 MySQL 详细学习笔记&lt;br&gt;包括MySQL架构，MySQL操作，数据类型，数据库操作，数据表操作（创增删改查排序分组）及子句操作&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="mysql" scheme="https://hyqskevin.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
