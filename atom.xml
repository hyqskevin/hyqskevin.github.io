<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MonoShow</title>
  
  <subtitle>Monologue from Kevin_W</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyqskevin.github.io/"/>
  <updated>2021-01-16T03:41:52.857Z</updated>
  <id>https://hyqskevin.github.io/</id>
  
  <author>
    <name>Kevin W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web API 接口参考</title>
    <link href="https://hyqskevin.github.io/2020/12/16/web-api/"/>
    <id>https://hyqskevin.github.io/2020/12/16/web-api/</id>
    <published>2020-12-16T13:40:43.000Z</published>
    <updated>2021-01-16T03:41:52.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>&emsp;&emsp;文档对象模型 (DOM) 将 web 页面与到脚本或编程语言连接起来。DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM 的方法(methods)让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。</p><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>&emsp;&emsp;Document 接口表示浏览器中载入的 DOM 树，向网页文档本身提供了全局操作功能。</p><p>构造器：new Document()<br>常用属性</p><ul><li>Document.URL：以字符串形式返回文档的地址栏链接</li><li>Document.title：获取或设置当前文档的标题</li><li>Document.body：返回当前文档的 <code>&lt;body&gt;</code> 或 <code>&lt;frameset&gt;</code> 节点</li><li>Document.documentElement：返回当前文档的直接子节点</li><li>Document.head：返回当前文档的 <code>&lt;head&gt;</code> 元素</li><li>Document.images：返回当前文档中所包含的图片的列表</li><li>Document.documentURI：以字符串的类型，返回当前文档的路径</li><li>Document.links：返回一个包含文档中所有超链接的列表</li><li>Document.scripts：返回文档中所有的 <code>&lt;script&gt;</code> 元素</li></ul><p>常用方法</p><ul><li>Document.createElement()：创建一个新的元素</li><li>Document.createEvent()：创建一个 event 对象</li><li>Document.createTextNode()：创建一个文本节点</li><li>document.getElementById(String id)：返回一个匹配特定 ID 的元素</li><li>Document.getElementsByName()：根据给定的 name 返回一个在 (X)HTML document 的节点列表集合</li><li>Document.getElementsByClassName()：返回一个包含了所有指定类名的子元素的类数组对象</li><li>Document.getElementsByTagName()：返回一个包括所有给定标签名称的元素的 HTML 集合 HTMLCollection</li><li>Document.querySelector()：返回文档中与指定选择器或选择器组匹配的第一个 HTMLElement 对象。 如果找不到匹配项，则返回 null</li><li>Document.querySelectorAll()：返回与指定的选择器组匹配的文档中的元素列表 (使用深度优先的先序遍历文档的节点)。返回的对象是 NodeList</li><li>Document.open()：打开一个要写入的文档</li><li>Document.write()：将一个文本字符串写入一个由 document.open() 打开的文档流</li><li>Document.close()：用于结束由 对文档的 Document.write() 写入操作，这种写入操作一般由 Document.open() 打开</li><li>Document.whiteln()：向文档中写入一串文本，并紧跟着一个换行符</li></ul><p>参考地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document</a></p><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><p>&emsp;&emsp;Element 是一个通用性非常强的基类，所有 Document 对象下的对象都继承自它。这个接口描述了所有相同种类的元素所普遍具有的方法和属性。</p><p>使用<code>document.getElementById</code>，<code>document.getElementsByName</code>，<code>document.getElementsByClassName</code>，<code>document.getElementsByTagName</code> 获取到 element</p><p>常用属性</p><ul><li>Element.attributes：返回一个与该元素相关的所有属性集合</li><li>Element.classList：返回该元素包含的 class 属性</li><li>Element.className：返回该元素的 class</li><li>Element.id：返回该元素的 id</li><li>Element.innerHTML：设置或获取 HTML 语法表示的元素的后代，设置 HTML 时可能会造成安全问题</li><li>Element.tagName：返回当前元素的标签名</li></ul><p>常用方法</p><ul><li>Element.getAttribute()：返回元素上一个指定的属性值。如果指定的属性不存在，则返回 null 或 “”</li><li>Element.getAttributeNames()：返回一个 Array，该数组包含指定元素（Element）的所有属性名称，如果该元素不包含任何属性，则返回一个空数组。</li><li>Element.hasAttribute()：返回一个布尔值，指示该元素是否包含有指定的属性（attribute）。</li><li>Element.setAttribute()：设置指定元素上的某个属性值。如果属性已经存在，则更新该值；否则，使用指定的名称和值添加一个新的属性。</li><li>Element.removeAttribute()：从指定的元素中删除一个属性。</li><li>Element.getElementsByClassName()：返回一个即时更新的 HTMLCollection，包含了所有拥有指定 class 的子元素。</li><li>Element.getElementsByTagName()：返回一个动态的包含所有指定标签名的元素的 HTML 集合 HTMLCollection。</li><li>Element.querySelector()：返回与指定的选择器组匹配的元素的后代的第一个元素。</li><li>Element.querySelectorAll(selectors)：selectors 是一组 CSS 选择器，返回一个 non-live 的 NodeList, 它包含所有元素的非活动节点，该元素来自与其匹配指定的 CSS 选择器组的元素。(基础元素本身不包括，即使它匹配。)</li></ul><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>&emsp;&emsp;Event 接口表示在 DOM 中出现的事件，很多 DOM 元素可以被设计接收(或者监听) 这些事件, 并且执行代码去响应（或者处理）它们。通过 EventTarget.addEventListener()方法可以将事件处理函数绑定到不同的 HTML elements 上。这种绑定事件处理函数的方式基本替换了老版本中使用 HTML event handler attributes 来绑定事件处理函数的方式。除此之外，通过正确使用 removeEventListener()方法，这些事件处理函数也能被移除。</p><p>构造器：<code>new Event(typeArg, eventInit)</code><br>typeArg 表示所创建事件的名称，eventInit 为可选项，接受以下字段:<br>“bubbles”，可选，Boolean 类型，默认值为 false，表示该事件是否冒泡。<br>“cancelable”，可选，Boolean 类型，默认值为 false， 表示该事件能否被取消。<br>“composed”，可选，Boolean 类型，默认值为 false，指示事件是否会在影子 DOM 根节点之外触发侦听器。</p><p>常用属性</p><ul><li>Event.target：触发事件的对象 (某个 DOM 元素) 的引用</li><li>Event.currentTarget：当事件沿着 DOM 触发时事件的当前目标。</li><li>Event.type：表示该事件对象的事件类型</li></ul><h3 id="EventTarget"><a href="#EventTarget" class="headerlink" title="EventTarget"></a>EventTarget</h3><p>EventTarget 是一个 DOM 接口，由可以接收事件、并且可以创建侦听器的对象实现。</p><p>构造器：new EventTarget()，创建一个新的 EventTarget 对象实例</p><p>常用方法</p><ul><li>EventTarget.addEventListener()：将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</li><li>EventTarget.dispatchEvent()：向一个指定的事件目标派发一个事件, 并以合适的顺序同步调用目标元素相关的事件处理函数。</li><li>EventTarget.removeEventListener()：删除使用 EventTarget.addEventListener() 方法添加的事件。</li></ul><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>&emsp;&emsp;URL 接口用于解析，构造，规范化和编码 URLs，如果浏览器尚不支持 URL()构造函数，则可以使用 Window 中的 Window.URL 属性。</p><p>构造器：new URL()<br>常用属性：host hostname href pathname port protocol search searchParams username<br>常用方法</p><ul><li>createObjectURL()：创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。</li><li>revokeObjectURL()：销毁之前使用 URL.createObjectURL()方法创建的 URL 实例</li><li>toJSON()：返回一个序列化的 URL</li><li>toString()：字符串化方法返回一个 URL</li></ul><p>参考地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL</a></p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h2 id="FullScreen"><a href="#FullScreen" class="headerlink" title="FullScreen"></a>FullScreen</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API</a></p><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Storage_API</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API</a></p><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API</a></p><h2 id="WebSockets"><a href="#WebSockets" class="headerlink" title="WebSockets"></a>WebSockets</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Websockets_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Websockets_API</a></p><h2 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API</a></p><hr><p>参考资料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;文档对象模型 (DOM) 将 web 页面与到脚本或编程语言连接起来。DOM 模型用一个逻辑树来表示一个文档
      
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="JavaScript" scheme="https://hyqskevin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Temer EDH combo</title>
    <link href="https://hyqskevin.github.io/2020/11/26/EDH-combo/"/>
    <id>https://hyqskevin.github.io/2020/11/26/EDH-combo/</id>
    <published>2020-11-26T06:00:00.000Z</published>
    <updated>2020-12-16T06:29:38.138Z</updated>
    
    <content type="html"><![CDATA[<p>List the useful 2-4 cards combos in my EDH decks.</p><p>Color now mostly used: RUG</p><p>Commander now mostly used</p><ul><li>Kalamax, the Stormsire 风暴君父卡拉马科斯 | combo</li><li>Xyris, the Writhing Storm 纠拧风暴灾里斯 | mid &amp; token</li><li>Haldan, Avid Arcanist 热切奥术师哈丹 / Pako, Arcane Retriever 奥术猎犬帕科 | enchantment combo</li><li>Omnath, Locus of the Roil 狂搅核欧那斯 | landfall / element aggro</li><li>Animar, Soul of Elements 元素之魂阿尼玛 | combo</li></ul><a id="more"></a><p>Commander now in testing:</p><ul><li>Brago, King Eternal 不朽国王布莱戈</li><li>Derevi, Empyrial Tactician 穹光策士德蕾薇</li><li>Golos, Tireless Pilgrim 不倦朝圣械戈罗斯</li><li>Sisay, Weatherlight Captain 晴空号船长西赛</li><li>Omnath, Locus of Creation 生机核欧那斯</li></ul><h3 id="Combos-in-Kalamax"><a href="#Combos-in-Kalamax" class="headerlink" title="Combos in Kalamax"></a>Combos in Kalamax</h3><p><strong>Kalamax, the Stormsire + Reverberate/Twincast… =&gt; Infinite large Kalamax =&gt; Soul’s fire</strong></p><ul><li>prerequisites:<br>Kalamax tapped<br>No instants played this turn<br>response the instant or sorcery from other players<br>Enough mana to cast spells</li></ul><ol><li>Cast any copy instant</li><li>Kalamax triggers (first Instant played this turn), copying instant</li><li>Have the copy and target the original</li><li>Kalamax triggers off of the copying, gaining a +1/+1 counter</li><li>The copy resolves, creating another copy</li><li>Repeat steps</li><li>In your turn you get infinite large Kalamax</li></ol><p><strong>Kalamax, the Stormsire + Chandra’s Ignition + Reverberate/Twincast =&gt; Infinite damage/large Kalamax</strong></p><ul><li>prerequisites:<br>Kalamax tapped<br>No instants played this turn<br>Enough mana to cast spells</li></ul><ol><li>Cast Chandra’s Ignition, holding priority</li><li>Cast Reverberate targeting Chandra’s Ignition</li><li>Kalamax triggers (first Instant played this turn), copying Reverberate</li><li>Have the copy of Reverberate target the original</li><li>Kalamax triggers off of the copying, gaining a +1/+1 counter</li><li>The copy of Reverberate resolves, creating another copy</li><li>Repeat steps 4-6 until Kalamax is adequately large, then copy Chandra’s Ignition with Reverberate, ending the loop and dealing an arbitrarily large amount of damage to your opponents (and each other creature)</li></ol><p><strong>Kalamax, the Stormsire + Ral, Storm Conduit + Reverberate/Twincast… =&gt; Infinite damage/large Kalamax</strong></p><ul><li>prerequisites:<br>Kalamax tapped<br>No instants played this turn<br>response the instant or sorcery from other players<br>Enough mana to cast spells</li></ul><ol><li>Cast any copy instant, triggering Ral and Kalamax, copying instant</li><li>Have the copy and target the original, triggering Ral</li><li>Kalamax triggers off of the copying, gaining a +1/+1 counter</li><li>The copy resolves, creating another copy, triggering Ral</li><li>Repeat steps until Ral trigger infinite times, then copy the first ability other player played, ending the loop and dealing an arbitrarily large amount of damage to your opponents and get infinite large Kalamax</li></ol><p><strong>Fury Storm + Ral, Storm Conduit =&gt; Infinite damage</strong></p><ul><li>prerequisites:<br>must have cast your commander at least once<br>2RR mana available</li></ul><ol><li>Cast your instant or sorcery, triggering Ral</li><li>Resolve the Ral trigger and respond to the instant or sorcery by casting Fury Storm targeting the instant or sorcery which triggers Fury Storm and Ral</li><li>Place the Ral trigger on top and the Fury Storm trigger below it and resolve the Ral trigger</li><li>Resolve the Fury Storm trigger targeting the original Fury Storm with the copy which triggers Ral</li><li>Resolve the Ral trigger and resolve the Fury Storm copy copying Fury Storm and triggering Ral</li><li>Repeat step 5</li></ol><p><a href="https://CommanderSpellbook.com/?id=5022" target="_blank" rel="noopener">https://CommanderSpellbook.com/?id=5022</a></p><p><strong>Heart Defence/Chord of Calling =&gt; Kiki-Jiki, Mirror Breaker + Aphetto Alchemist/Corridor Monitor =&gt; Infinite combat damage + blue mana =&gt; Thassa’s Oracle</strong></p><ul><li>prerequisites:<br>Kiki-Jiki, Mirror Breaker and Aphetto Alchemist on the battlefield<br>Thassa’s Oracle in hand and UU mana to cast it</li></ul><ol><li>Activate Kiki-Jiki, targeting Aphetto Alchemist to create a hasty token copy of it</li><li>Activate the token’s ability to untap Kiki-Jiki</li><li>Repeat the loop to generate an arbitrarily large number of tapped Aphetto Alchemist tokens, each of which is worth blue mana devotion</li><li>Cast Thassa’s Oracle</li><li>As your devotion to blue mana is greater than the number of cards in your library, you win the game with its ETB trigger</li></ol><p><strong>Primal Amulet + Frantic Search + Narset’s Reversal =&gt; Infinite colored mana/card draw/storm count =&gt; brain freeze</strong></p><ul><li>prerequisites:<br>primal amulet with 3 counters<br>frantic search and narset’s reversal in hand<br>access to 1UU mana from lands</li></ul><ol><li>cast frantic search for 1U mana (reduced by primal amulet)</li><li>let the trigger from primal amulet resolve to transform primal amulet in to primal wellspring</li><li>you now have an extra land, use primal wellspring to tap for blue mana and an additional blue mana from an other land to pay for narset’s reversal, creating a copy of narset’s reversal</li><li>let the copy of narset’s reversal target the original narset’s reversal to bounce it and create an other copy</li><li>the second copy of narset’s reversal targets frantic search, returning it to your hand and creating a copy of frantic search to untap 3 lands (must untap primal wellspring) and loot 2 cards</li><li>tap 3 lands for 2U mana and use the blue mana from primal wellspring + 2 mana from the other lands to cast frantic search</li><li>let the copy of frantic search resolve to untap 3 lands and loot 2</li><li>tap 3 lands for 1U mana and use the blue manaa from primal wellspring blue mana from the other lands start the loop again at step 3 by casting narset’s reversal from primal wellspring, netting you 1 mana and 2 loots each loop</li></ol><p><a href="https://commanderspellbook.com/?id=4843" target="_blank" rel="noopener">https://commanderspellbook.com/?id=4843</a></p><p><strong>Mizzix of the Izmagnus + Bonus Round + Frantic Search + Narset’s Reversal =&gt; Infinite mana/loot/storm count =&gt; brain freeze</strong></p><ul><li>prerequisites:<br>Bonus Round, Frantic Search and Narset’s Reversal in hand<br>Mizzix on the battlefield<br>You have at least 1 experience counter<br>Ability to produce a (R/U)(R/U)(R/U) mana from lands</li></ul><ol><li>Cast Bonus Round for RR</li><li>Let the Mizzix trigger and bonus round resolve, you now have 2 experience counters</li><li>Cast Frantic search for U (reduced by mizzix)</li><li>Let the copy from bonus rounds resolve to loot 2 cards, untap 3 lands that can tap for at least UU</li><li>Cast Narset’s Reversal for UU, let the copy from bonus rounds resolve, targeting the original Narset’s Reversal</li><li>This bounces the original and makes a new copy which targets the original frantic search</li><li>This bounces the original frantic search and creates a new copy</li><li>Let the frantic search copy resolve to loot 2 cards and untap 3 lands</li><li>You now have frantic search and narset’s reversal back in your hand and can start the loop again</li></ol><p><a href="https://CommanderSpellbook.com/?id=4930" target="_blank" rel="noopener">https://CommanderSpellbook.com/?id=4930</a></p><p><strong>High Tide + Archaeomancer + Snap =&gt; Infinite storm count/colored mana =&gt; brain freeze</strong></p><ul><li>prerequisites:<br>All cards in hand<br>5 untapped Islands under your control</li></ul><p>Tap 1 Island, producing U, to cast High Tide<br>Tap 2 Islands, producing 4U, to cast Archaeomancer, getting back High Tide<br>Tap 1 Island, producing 2U, to cast High Tide, floating U<br>Tap 1 Island, producing 3U to cast Snap to return Archaeomancer and untap two islands, floating 2U<br>Tap 2 Islands, procuing 6U, to cast Archaeomancer, returning Snap and floating 2U<br>Repeat steps 4-5</p><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><hr><hr><p>link:<br><a href="https://scryfall.com/" target="_blank" rel="noopener">Scryfall: card search</a><br><a href="http://www.mtgtop8.com/" target="_blank" rel="noopener">MTGTop8</a><br><a href="https://tappedout.net/mtg-deck-builder/" target="_blank" rel="noopener">MTG Deck Builder</a><br><a href="https://edhrec.com/" target="_blank" rel="noopener">EDHRec</a><br><a href="https://commanderspellbook.com/" target="_blank" rel="noopener">commander Spellbook</a><br><a href="https://cedh-decklist-database.com/" target="_blank" rel="noopener">cEDH Decklist Database</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;List the useful 2-4 cards combos in my EDH decks.&lt;/p&gt;
&lt;p&gt;Color now mostly used: RUG&lt;/p&gt;
&lt;p&gt;Commander now mostly used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kalamax, the Stormsire 风暴君父卡拉马科斯 | combo&lt;/li&gt;
&lt;li&gt;Xyris, the Writhing Storm 纠拧风暴灾里斯 | mid &amp;amp; token&lt;/li&gt;
&lt;li&gt;Haldan, Avid Arcanist 热切奥术师哈丹 / Pako, Arcane Retriever 奥术猎犬帕科 | enchantment combo&lt;/li&gt;
&lt;li&gt;Omnath, Locus of the Roil 狂搅核欧那斯 | landfall / element aggro&lt;/li&gt;
&lt;li&gt;Animar, Soul of Elements 元素之魂阿尼玛 | combo&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="notes" scheme="https://hyqskevin.github.io/categories/notes/"/>
    
    
      <category term="MTG" scheme="https://hyqskevin.github.io/tags/MTG/"/>
    
  </entry>
  
  <entry>
    <title>Vue功能实现和使用技巧</title>
    <link href="https://hyqskevin.github.io/2020/11/10/vue-notes/"/>
    <id>https://hyqskevin.github.io/2020/11/10/vue-notes/</id>
    <published>2020-11-10T02:20:03.000Z</published>
    <updated>2021-01-16T03:39:03.959Z</updated>
    
    <content type="html"><![CDATA[<p>汇总记录前端开发时，使用 Vue 框架遇到的功能实现和开发技巧。</p><a id="more"></a><h2 id="Vue-动态组件使用"><a href="#Vue-动态组件使用" class="headerlink" title="Vue 动态组件使用"></a>Vue 动态组件使用</h2><p>动态组件功能用于在不同组件之间进行动态切换，可以通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 is attribute 来实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// `currentComponent` 改变时显示的组件同时改变</span></span><br><span class="line">&lt;component :is=<span class="string">"currentComponent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;button @click=<span class="string">"(currentComponent === 'A') ? 'B':'A'"</span>&gt;Switch&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/引入组件A以及组件B</span></span><br><span class="line"><span class="regexp">import A from "./</span>a<span class="string">"</span></span><br><span class="line"><span class="string">import B from "</span>./b<span class="string">"</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  components: &#123;A, B&#125;,</span></span><br><span class="line"><span class="string">  data () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      //默认显示组件A，若字符串为B则显示组件B,name为component声明</span></span><br><span class="line"><span class="string">      currentComponent: 'A'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-show，v-if，:is 之间的区别</li></ul><p><code>v-show</code> 会同时加载两个组件，两个组件的生命周期都会触发，会造成不必要的性能浪费，而且切换的时候不会再创造挂载一次，无法重新渲染。<br><code>v-if</code> 不会造成同时加载两个组件，但 v-if 每次切换都会创造挂载一次，如果没有重新渲染的需要，会造成性能浪费。<br><code>:is</code> 可以通过 keep-alive 标签缓存，被该标签包裹的组件会被缓存下来，每次点击都不会重新渲染，避免了重渲染导致的性能问题。<code>include</code> 和 <code>exclude</code> 属性也允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 v-bind) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Array (use v-bind) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>动态路由用于把某种模式匹配到的所有路由，全都映射到同个组件，可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果。一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 <code>this.$route.params</code>，可以在每个组件内使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line"><span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;,</span><br><span class="line">],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="页面跳转和导航"><a href="#页面跳转和导航" class="headerlink" title="页面跳转和导航"></a>页面跳转和导航</h2><ol><li><router-link> 定义链接实现声明式导航</router-link></li></ol><p><code>&lt;router-link :to=&quot;...&quot;&gt;</code> 内部调用 <code>router.push</code> 方法实现页面导航</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'detail', params: &#123;name: 1&#125;&#125;"</span>&gt;</span> xxx <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'detail', query: &#123;id: 1&#125;&#125;"</span>&gt;</span> xxx <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>this.$route.params</code> 或 <code>this.$route.params</code> 获取路由参数。</li></ul><ol><li>router 实例实现编程式导航</li></ol><p>在 Vue 实例内部，可以通过 <code>$router</code> 访问路由实例，可以调用 <code>this.$router.push</code> 方法，向 history 栈添加一个新的记录，点击浏览器后退按钮时也可以回到之前的 URL。<br>params 相对应的是 name， query 相对应的是 path</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"><span class="comment">// 命名的路由/user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">uid</span>: <span class="string">'123'</span> &#125; &#125;) <span class="comment">// 刷新后参数会被清空</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// 刷新后参数不会被清空</span></span><br><span class="line"><span class="comment">// 带查询参数，/home?uid=123</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span>, <span class="attr">query</span>: &#123; <span class="attr">uid</span>: <span class="string">'123'</span> &#125; &#125;) <span class="comment">// 刷新后不会被清空</span></span><br></pre></td></tr></table></figure><ul><li><code>router.replace(&#39;&#39;)</code> 跳转页面会替换掉原有的 history 记录</li><li><code>router.go(n)</code> 在 history 记录中前进或后退多少步</li></ul><h2 id="keep-alive-网页性能优化"><a href="#keep-alive-网页性能优化" class="headerlink" title="keep-alive 网页性能优化"></a>keep-alive 网页性能优化</h2><p>keep-alive 主要用于保留组件状态或避免重新渲染 DOM 导致性能降低，通常都会在 <code>app.vue</code> 的 <code>&lt;router-view/&gt;</code> 外面加一层 <code>&lt;keep-alive&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样做也会导致一些问题，当组件的值更新后组件没有被重新渲染，做到动态显示需要使用额外生命周期函数 <code>activated</code><br>进入页面会执行 mounted 和 activated，当修改值后再次进入首页不会再执行 mounted 触发新的数据请求，但是 activated 会继续执行。可以在 activated 函数中判断新数据和前一次显示是否相同，如果不同再次触发 ajax 数据请求。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">   <span class="keyword">this</span>.lastData = <span class="keyword">this</span>.data;</span><br><span class="line">   <span class="keyword">this</span>.getNewData();</span><br><span class="line">&#125;</span><br><span class="line">activated () &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.lastData !== <span class="keyword">this</span>.data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.lastData = <span class="keyword">this</span>.data;</span><br><span class="line">      <span class="keyword">this</span>.getNewData();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在路由更新后页面由于 keep-alive 的缓存不会执行 mounted 触发刷新，需要设置路由的 key 值，在每次进入页面时比较路由名称，若不相同则刷新页面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*App.vue*/</span></span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">   &lt;router-view :key=<span class="string">"key"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/keep-alive&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App',</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    key () &#123;</span></span><br><span class="line"><span class="regexp">      return this.$route.name !== undefined</span></span><br><span class="line"><span class="regexp">        ? this.$route.name + +new Date()</span></span><br><span class="line"><span class="regexp">        : this.$route + +new Date()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vuex-数据防刷新丢失"><a href="#Vuex-数据防刷新丢失" class="headerlink" title="Vuex 数据防刷新丢失"></a>Vuex 数据防刷新丢失</h2><p>引入 vuex-persist 插件将状态保存至 cookie 或者 localStorage 中，刷新后数据不丢失。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VuexPersistence <span class="keyword">from</span> <span class="string">'vuex-persist'</span></span><br><span class="line"><span class="keyword">const</span> vuexLocal = <span class="keyword">new</span> VuexPersistence(&#123;</span><br><span class="line">storage: <span class="built_in">window</span>.localStorage,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  plugins: [vuexLocal.plugin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令避免误触和多次点击"><a href="#自定义指令避免误触和多次点击" class="headerlink" title="自定义指令避免误触和多次点击"></a>自定义指令避免误触和多次点击</h2><p>使用 Vue.directive 自定义防误触指令</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> preventReClick = Vue.directive(<span class="string">'preventReClick'</span>, &#123;</span><br><span class="line">inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 增加监听事件</span></span><br><span class="line">el.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (!el.disabled) &#123;</span><br><span class="line">el.disabled = <span class="literal">true</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">el.disabled = <span class="literal">false</span></span><br><span class="line">&#125;, binding.value || <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; preventReClick &#125;</span><br></pre></td></tr></table></figure><h2 id="制作可复用组件"><a href="#制作可复用组件" class="headerlink" title="制作可复用组件"></a>制作可复用组件</h2><p>复用组件需要在样式和功能上做到继承和迭代，是在系统整体设计时抽象出的组件，多为布局组件，不涉及详细的功能实现。组件需要做到高内聚低耦合，组件内独立交互，功能受控于组件本身。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按钮组件抽象，样式设置为外部继承 cname，和内部自定义 button，留出按钮名称 title 和 &lt;slot&gt; 插槽作为具体内容的补充空间</span></span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[button, cname]"</span>&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;slot /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'BigBtn',</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 通过 props 传入外部参数</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    cname: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: ''</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    title: &#123;</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: 'title'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 设置内部定义的样式</span></span><br><span class="line"><span class="regexp">  data () &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      button: 'button'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"stylus"</span>&gt;</span><br><span class="line"><span class="comment">// 引入样式</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"~@/styles/button.styl"</span></span><br><span class="line">.button</span><br><span class="line">  bigBtn() <span class="comment">// 默认样式</span></span><br><span class="line">.blueBtn</span><br><span class="line">  bigBtn($btnColor: $btnBlue) <span class="comment">// cname 传入 blueBtn 设置颜色为蓝色</span></span><br><span class="line">.greenBtn</span><br><span class="line">  bigBtn($btnColor: $btnGreen) <span class="comment">// cname 传入 greenBtn 设置颜色为绿色</span></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h2 id="上传文件功能"><a href="#上传文件功能" class="headerlink" title="上传文件功能"></a>上传文件功能</h2><p>使用 element-ui 的 upload 功能实现图片展示，上传和读取，on-change 触发文件状态改变时的钩子，调用上传照片 api 将照片数据传递到后台；on-preview 用于显示已上传的图片的缩略图；传递多个文件时文件列表存储在 file-list 中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag"><span class="attr">action</span>=<span class="string">"actionUrl"</span></span></span><br><span class="line"><span class="tag"><span class="attr">list-type</span>=<span class="string">"picture-card"</span></span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">"upload"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:file-list</span>=<span class="string">"fileList"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:on-change</span>=<span class="string">"getFile"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:on-preview</span>=<span class="string">"handlePictureCardPreview"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"tip"</span> <span class="attr">class</span>=<span class="string">"el-upload__tip"</span>&gt;</span>上传一张jpg/png文件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">class</span>=<span class="string">"el-icon-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件信息</span></span><br><span class="line">getFile (file) &#123;</span><br><span class="line">  <span class="keyword">let</span> uid = <span class="keyword">this</span>.$store.state.currentUid</span><br><span class="line">  <span class="comment">// 调用上传照片的api</span></span><br><span class="line">  api._updImage(uid, <span class="keyword">this</span>.aid, res).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若上传 base64 位图片需要进行转码之后调用 api 上传：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片转base64</span></span><br><span class="line">getBase64 (file) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    <span class="keyword">let</span> imgResult = <span class="string">''</span></span><br><span class="line">    reader.readAsDataURL(file)</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      imgResult = reader.result</span><br><span class="line">    &#125;</span><br><span class="line">    reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">    reader.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(imgResult)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vuex-监听状态变更"><a href="#Vuex-监听状态变更" class="headerlink" title="Vuex 监听状态变更"></a>Vuex 监听状态变更</h2><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  updFlag: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 添加计算属性，依赖值改变时重新计算</span></span><br><span class="line">getters: &#123;</span><br><span class="line">  updFlag: <span class="function"><span class="params">state</span> =&gt;</span> state.updFlag</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 执行状态变更</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  updateFlag (state, update) &#123;</span><br><span class="line">    state.updFlag = update</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兄弟组件，跨多层组件之间事件传递方法"><a href="#兄弟组件，跨多层组件之间事件传递方法" class="headerlink" title="兄弟组件，跨多层组件之间事件传递方法"></a>兄弟组件，跨多层组件之间事件传递方法</h2><p><a href="https://cn.vuejs.org/v2/guide/migration.html#dispatch-%E5%92%8C-broadcast-%E6%9B%BF%E6%8D%A2" target="_blank" rel="noopener">官方链接：集中式的事件中间件</a></p><p>使用集中的事件处理器，建立一个空的 vue 实例实现了事件分发接口。在初始化 web app 的时候，给 data 添加一个 eventhub 的空 vue 对象。然后在组件中，可以使用 $emit，$on，$off 分别来分发、监听、取消监听事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">router,</span><br><span class="line">render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">data: &#123;</span><br><span class="line">eventHub: <span class="keyword">new</span> Vue(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者在初始化 Vue 对象之前给原生对象增加 eventHub 属性，这样在组件内部 就可以直接调用<code>$eventHub</code>对象。<br><code>Vue.prototype.$eventHub= Vue.prototype.$eventHub || new Vue()</code></p><p>发送数据：<code>this.$root.eventHub.$emit(&#39;YOUR_EVENT_NAME&#39;, yourData)</code><br>接收数据：<code>this.$root.eventHub.$on(&#39;YOUR_EVENT_NAME&#39;, yourData)</code><br>销毁数据：<code>this.$root.eventHub.$off()</code> // 在组件销毁时需要结束绑定,使用 <code>$off</code> 方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  addTodo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    eventHub.$emit(<span class="string">'add-todo'</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;)</span><br><span class="line">    <span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  deleteTodo: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    eventHub.$emit(<span class="string">'delete-todo'</span>, id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">methods: &#123;</span><br><span class="line"> addTodo (newTodo) &#123;</span><br><span class="line">   <span class="keyword">this</span>.todos.push(newTodo)</span><br><span class="line"> &#125;,</span><br><span class="line"> deleteTodo (todoId) &#123;</span><br><span class="line">   <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todos.filter(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> todo.id !== todoId</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">created () &#123;</span><br><span class="line"> eventHub.$on(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo)</span><br><span class="line"> eventHub.$on(<span class="string">'delete-todo'</span>, <span class="keyword">this</span>.deleteTodo)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 最好在组件销毁前清除事件监听</span></span><br><span class="line">beforeDestroy () &#123;</span><br><span class="line"> eventHub.$off(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo)</span><br><span class="line"> eventHub.$off(<span class="string">'delete-todo'</span>, <span class="keyword">this</span>.deleteTodo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回到顶部功能"><a href="#回到顶部功能" class="headerlink" title="回到顶部功能"></a>回到顶部功能</h2><p>使用 element-ui 中提供的功能实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-backtop</span><br><span class="line">target=<span class="string">".page-component__scroll .el-scrollbar__wrap"</span></span><br><span class="line">visibility-height=<span class="string">"200"</span></span><br><span class="line">right=<span class="string">"30"</span></span><br><span class="line">bottom=<span class="string">"30"</span></span><br><span class="line">&gt;</span><br><span class="line">up</span><br><span class="line">&lt;<span class="regexp">/el-backtop&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用 better-scroll 插件实现，通过监听下拉时 y 轴的移动距离显示上拉按钮，点击后触发返回顶部事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回到开头</span></span><br><span class="line">toTop () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.toTop) &#123;</span><br><span class="line">    <span class="comment">// 延迟20ms后在1s内回到顶部</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="element-ui-按需引入"><a href="#element-ui-按需引入" class="headerlink" title="element-ui 按需引入"></a>element-ui 按需引入</h2><p>通过借助 <code>babel-plugin-component</code> 或直接修改 <code>.babelrc</code> 文件，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><p>引入插件：<code>npm install babel-plugin-component -D</code><br>修改 babel 配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>在 src 文件夹中 plugins 文件夹内新建一个 element.js 文件，导入需要的组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入自己需要的组件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Select,</span><br><span class="line">Option,</span><br><span class="line">OptionGroup,</span><br><span class="line">Input,</span><br><span class="line">Tree,</span><br><span class="line">Dialog,</span><br><span class="line">Row,</span><br><span class="line">Col,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">install: <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">Vue.use(Select)</span><br><span class="line">Vue.use(Option)</span><br><span class="line">Vue.use(OptionGroup)</span><br><span class="line">Vue.use(Input)</span><br><span class="line">Vue.use(Tree)</span><br><span class="line">Vue.use(Dialog)</span><br><span class="line">Vue.use(Row)</span><br><span class="line">Vue.use(Col)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> element</span><br></pre></td></tr></table></figure><p>最后在 main.js 中引入 element.js 文件 <code>import &#39;./plugins/element.js&#39;</code></p><h2 id="表单设置日期限制"><a href="#表单设置日期限制" class="headerlink" title="表单设置日期限制"></a>表单设置日期限制</h2><p>element-ui 支持在创建表单时使用规则校验，可以在校验中自定义校验规则。</p><p>在日期选择时需要实现截止日期必须大于等于开始日期，在 vue 组件中定义表单数据和校验规则并在 endDate 中自定义校验规则 <code>checkEnd</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span>: &#123;</span><br><span class="line">    ruleForm: &#123;</span><br><span class="line">      startDate: <span class="string">''</span>,</span><br><span class="line">      endDate: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      startDate: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请选择开始日期'</span>, <span class="attr">trigger</span>: <span class="string">'change'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      endDate: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请选择截止日期'</span>, <span class="attr">trigger</span>: <span class="string">'change'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">validator</span>: checkEnd, <span class="attr">trigger</span>: <span class="string">'change'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 data 中设置变量 <code>checkEnd</code> 来实现校验规则，校验错误时返回提示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">let</span> checkEnd = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> startDate = <span class="keyword">this</span>.ruleForm.startDate</span><br><span class="line">    <span class="keyword">if</span> (startDate === <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请先选择开始日期！'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(startDate)</span><br><span class="line">    <span class="keyword">let</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>(value)</span><br><span class="line">    <span class="keyword">if</span> ((start !== <span class="string">''</span>) &amp;&amp; (end &lt; start)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'结束日期不能小于开始日期！'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单身份证校验"><a href="#表单身份证校验" class="headerlink" title="表单身份证校验"></a>表单身份证校验</h2><p>通过自定义表单校验规则进行身份证的校验，新建 idValidate.js 文件实现身份证校验算法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> checkId = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> errorMsg = idValidate(value)</span><br><span class="line"><span class="keyword">if</span> (errorMsg !== <span class="string">''</span>) &#123;</span><br><span class="line">callback(<span class="keyword">new</span> <span class="built_in">Error</span>(errorMsg))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">callback()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* idValidate.js */</span></span><br><span class="line"><span class="comment">// 身份校验的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">isIdentityId</span>(<span class="params">identityId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span> <span class="comment">// 15或18位长度或格式校验</span></span><br><span class="line"><span class="comment">// 地区校验</span></span><br><span class="line"><span class="keyword">const</span> aCity = &#123;</span><br><span class="line"><span class="number">11</span>: <span class="string">'北京'</span>,</span><br><span class="line"><span class="number">12</span>: <span class="string">'天津'</span>,</span><br><span class="line"><span class="number">13</span>: <span class="string">'河北'</span>,</span><br><span class="line"><span class="number">14</span>: <span class="string">'山西'</span>,</span><br><span class="line"><span class="number">15</span>: <span class="string">'内蒙古'</span>,</span><br><span class="line"><span class="number">21</span>: <span class="string">'辽宁'</span>,</span><br><span class="line"><span class="number">22</span>: <span class="string">'吉林'</span>,</span><br><span class="line"><span class="number">23</span>: <span class="string">'黑龙江'</span>,</span><br><span class="line"><span class="number">31</span>: <span class="string">'上海'</span>,</span><br><span class="line"><span class="number">32</span>: <span class="string">'江苏'</span>,</span><br><span class="line"><span class="number">33</span>: <span class="string">'浙江'</span>,</span><br><span class="line"><span class="number">34</span>: <span class="string">'安徽'</span>,</span><br><span class="line"><span class="number">35</span>: <span class="string">'福建'</span>,</span><br><span class="line"><span class="number">36</span>: <span class="string">'江西'</span>,</span><br><span class="line"><span class="number">37</span>: <span class="string">'山东'</span>,</span><br><span class="line"><span class="number">41</span>: <span class="string">'河南'</span>,</span><br><span class="line"><span class="number">42</span>: <span class="string">'湖北'</span>,</span><br><span class="line"><span class="number">43</span>: <span class="string">'湖南'</span>,</span><br><span class="line"><span class="number">44</span>: <span class="string">'广东'</span>,</span><br><span class="line"><span class="number">45</span>: <span class="string">'广西'</span>,</span><br><span class="line"><span class="number">46</span>: <span class="string">'海南'</span>,</span><br><span class="line"><span class="number">50</span>: <span class="string">'重庆'</span>,</span><br><span class="line"><span class="number">51</span>: <span class="string">'四川'</span>,</span><br><span class="line"><span class="number">52</span>: <span class="string">'贵州'</span>,</span><br><span class="line"><span class="number">53</span>: <span class="string">'云南'</span>,</span><br><span class="line"><span class="number">54</span>: <span class="string">'西藏'</span>,</span><br><span class="line"><span class="number">61</span>: <span class="string">'陕西'</span>,</span><br><span class="line"><span class="number">62</span>: <span class="string">'甘肃'</span>,</span><br><span class="line"><span class="number">63</span>: <span class="string">'青海'</span>,</span><br><span class="line"><span class="number">64</span>: <span class="string">'宁夏'</span>,</span><br><span class="line"><span class="number">65</span>: <span class="string">'新疆'</span>,</span><br><span class="line"><span class="number">71</span>: <span class="string">'台湾'</span>,</span><br><span class="line"><span class="number">81</span>: <span class="string">'香港'</span>,</span><br><span class="line"><span class="number">82</span>: <span class="string">'澳门'</span>,</span><br><span class="line"><span class="number">91</span>: <span class="string">'国外'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出生日期验证</span></span><br><span class="line"><span class="keyword">const</span> sBirthday = (</span><br><span class="line">identityId.substr(<span class="number">6</span>, <span class="number">4</span>) +</span><br><span class="line"><span class="string">'-'</span> +</span><br><span class="line"><span class="built_in">Number</span>(identityId.substr(<span class="number">10</span>, <span class="number">2</span>)) +</span><br><span class="line"><span class="string">'-'</span> +</span><br><span class="line"><span class="built_in">Number</span>(identityId.substr(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line">).replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(sBirthday)</span><br><span class="line"><span class="comment">// 身份证号码校验 最后4位  包括最后一位的数字/字母X</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> weights = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> codes = <span class="string">'10X98765432'</span></span><br><span class="line"><span class="keyword">let</span> errorMsg = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; identityId.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">sum += identityId[i] * weights[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> last = codes[sum % <span class="number">11</span>] <span class="comment">// 计算出来的最后一位身份证号码</span></span><br><span class="line"><span class="keyword">if</span> (identityId === <span class="string">''</span>) &#123;</span><br><span class="line">errorMsg = <span class="string">'身份证号不能为空'</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pattern.exec(identityId)) &#123;</span><br><span class="line">errorMsg = <span class="string">'身份证长度或格式错误'</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!aCity[<span class="built_in">parseInt</span>(identityId.substr(<span class="number">0</span>, <span class="number">2</span>))]) &#123;</span><br><span class="line">errorMsg = <span class="string">'身份证地区非法'</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">sBirthday !==</span><br><span class="line">d.getFullYear() + <span class="string">'/'</span> + (d.getMonth() + <span class="number">1</span>) + <span class="string">'/'</span> + d.getDate()</span><br><span class="line">) &#123;</span><br><span class="line">errorMsg = <span class="string">'出生日期非法'</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (identityId[identityId.length - <span class="number">1</span>] !== last) &#123;</span><br><span class="line">errorMsg = <span class="string">'输入的身份证号校验码不正确'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errorMsg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持续拉取后台数据"><a href="#持续拉取后台数据" class="headerlink" title="持续拉取后台数据"></a>持续拉取后台数据</h2><p>实现后台请求数据时不一次性返回，需要返回一部分就显示一部分。<code>setInterval()</code> 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  func () &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="comment">// 建议使用箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.func()</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加和删除属性（不再使用）"><a href="#添加和删除属性（不再使用）" class="headerlink" title="添加和删除属性（不再使用）"></a>添加和删除属性（不再使用）</h2><p>在 vue 中，直接使用赋值语句无法触发视图页面更新；对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 set 和 delete 修改 property 来触发视图更新。</p><p><strong>Vue.set( target, propertyName/index, value )</strong></p><p>参数：<br>{Object | Array} target<br>{string | number} propertyName/index<br>{any} value</p><p>还可以使用 vm.$set 实例方法，是全局 Vue.set 方法的别名</p><p><strong>Vue.delete( target, propertyName/index )</strong></p><p>参数：<br>{Object | Array} target<br>{string | number} propertyName/index</p><p>还可以使用 vm.$delete 实例方法</p><p>vue 2.x 之后，Vue.set 和 Vue.delete 在实例上将不再起作用。现在都强制在实例的 data 选项中声明所有顶级响应值，通过改变 data 值实现相应。</p><h2 id="其它注意事项"><a href="#其它注意事项" class="headerlink" title="其它注意事项"></a>其它注意事项</h2><ol><li><p>监听组件原生事件<br><code>@click.native=</code>可以在子组件监听根元素的原生事件，不需要通过<code>$emit</code>事件</p></li><li><p>ref 属性<br>给 DOM 元素或子组件注册引用信息，引用信息将会注册在父组件的 <code>$refs</code> 对象上，如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。<br>通过<code>this.$refs.ref</code>访问 dom 节点或组件实例(data)</p></li><li><p><code>render: h =&gt; h(App)</code><br>h 作为 createElement 的别名是 Vue 生态系统中的一个通用惯例。它来自单词 <code>hyperscript</code>，这个单词通常用在 virtual-dom 的实现中。hyperscript 本身指生成 HTML 结构的 script 脚本。 — Even You</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(App);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// h &lt;- createElement</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(App);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br></pre></td></tr></table></figure></li><li><p>webpack 打包后引用路径问题<br><code>config\index.js</code> 中的 build 模块修改导出路径 assetsPublicPath 为 <code>./</code>，使 index.html 和 static 文件夹在同一级目录下面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> build: &#123;</span><br><span class="line"> ...</span><br><span class="line"> assetsPublicPath: <span class="string">'./'</span>,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>es6 语法兼容问题<br><code>build\webpack.base.conf.js</code> 中的 entry 模块加入 <code>babel-polyfill</code>，让程序在打包时同时兼容低版本的浏览器。<br>vue3 版本中在自建的 vue.config.js 中添加 webpack config，将 entry 定义为 <code>@babel/polyfill</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">entry: &#123;</span><br><span class="line"> app: [<span class="string">'babel-polyfill'</span>, <span class="string">'./src/main.js'</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// entry: &#123;</span></span><br><span class="line"><span class="comment">//   app: './src/main.js',</span></span><br><span class="line"><span class="comment">//   "babel-polyfill": "babel-polyfill"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">// 解决浏览器兼容ES6</span></span><br><span class="line">entry: &#123;</span><br><span class="line">main: [<span class="string">'@babel/polyfill'</span>],</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>json 转换（重要）<br>vuex 里将状态保存到缓存中，会用到 json 转换，我们保存的状态都是数组，而 localStorage 只支持字符串<br>将数组传递到后台时也需要使用 JSON.stringify() 转换为字符串格式，回传时再转换为数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(state.dataList) <span class="comment">// array -&gt; string</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'dataList'</span>)) <span class="comment">// string -&gt; array</span></span><br></pre></td></tr></table></figure></li><li><p>v-for 参数顺序变更<br>vue2.x 中，当包含 index 时，之前遍历数组时的参数顺序是 <code>(index, value)</code>。现在是 <code>(value, index)</code>，来和 JavaScript 的原生数组方法 (例如 forEach 和 map) 保持一致。<br>当包含 property 名称/key 时，之前遍历对象的参数顺序是 <code>(name, value)</code>。现在是 <code>(value, name)</code>，来和常见的对象迭代器 (例如 lodash) 保持一致。</p></li><li><p>箭头函数<br>箭头函数的 this 在函数创建期间（普通函数在执行时绑定）完成绑定，this 指向该箭头函数被声明时所在的作用域对象。<br>箭头函数不能作为构造函数，没有 arguments，不能作为生成器函数。</p></li><li><p>数组去重<br>Set 是无序的类数组数据类型，有相同的 key 和 value，无重复数值，可以创建 Set 实例进行数组去重<br><code>newArr = [...new Set(arr)]</code></p></li></ol><hr><p>参考资料：<br><a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/navigation.html</a><br><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a><br><a href="https://better-scroll.github.io/docs/zh-CN/" target="_blank" rel="noopener">https://better-scroll.github.io/docs/zh-CN/</a><br><a href="https://element.faas.ele.me/#/zh-CN/" target="_blank" rel="noopener">https://element.faas.ele.me/#/zh-CN/</a><br><a href="https://cn.vuejs.org/v2/guide/migration.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/migration.html</a><br><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a><br><a href="https://juejin.cn/post/6844903613609803783" target="_blank" rel="noopener">https://juejin.cn/post/6844903613609803783</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇总记录前端开发时，使用 Vue 框架遇到的功能实现和开发技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Vue" scheme="https://hyqskevin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Webpack程序打包学习笔记(3) —— Babel</title>
    <link href="https://hyqskevin.github.io/2020/07/13/Webpack_3/"/>
    <id>https://hyqskevin.github.io/2020/07/13/Webpack_3/</id>
    <published>2020-07-13T10:23:03.000Z</published>
    <updated>2020-12-16T07:09:03.349Z</updated>
    
    <content type="html"><![CDATA[<p>Babel 是一个 JavaScript 的静态分析编译器，在不需要执行代码的前提下对代码进行分析和处理。<br>要实现 Babel 从一个语法转换成另外一个语法，需要经过三个主要步骤：解析（Parse），转换（Transform），生成（Generate）。</p><p><a href="https://hyqskevin.github.io/2020/06/28/Webpack_1/">Webpack 程序打包学习笔记(1)</a><br><a href="https://hyqskevin.github.io/2020/07/05/Webpack_2/">Webpack 程序打包学习笔记(2)</a></p><a id="more"></a><h2 id="Babel-分析步骤"><a href="#Babel-分析步骤" class="headerlink" title="Babel 分析步骤"></a>Babel 分析步骤</h2><p>解析：指的是首先将代码经过词法解析和语法解析，最终生成一颗 AST（抽象语法树），在 Babel 中，语法解析器是 Babylon（@babel/parser）<br>转换：得到 AST 之后，可以对其进行遍历，在此过程中对节点进行添加、更新及移除等操作，Babel 中 AST 遍历工具是@babel/traverse<br>生成：经过一系列转换之后得到的一颗新树，要将树转换成代码，就是生成的过程，Babel 用到的是@babel/generator</p><p>使用@babel/parse 来生成 AST</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'@babel/core'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> gen = <span class="built_in">require</span>(<span class="string">'@babel/generator'</span>).default</span><br><span class="line"><span class="comment">// 读取 source.js内容</span></span><br><span class="line"><span class="keyword">let</span> source = fs.readFileSync(<span class="string">'./source.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 babel.parse方法</span></span><br><span class="line">babel.parse(source, (err, ast) =&gt; &#123;</span><br><span class="line"><span class="comment">// ast就是树</span></span><br><span class="line"><span class="built_in">console</span>.log(ast)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用@babel/traverse，进行遍历，会得到一个类似 Html 结构的树形结构</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">babel.parse(source, (err, ast) =&gt; &#123;</span><br><span class="line"><span class="comment">// console.log(ast)</span></span><br><span class="line"><span class="keyword">let</span> indent = <span class="string">''</span></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line"><span class="comment">// 进入节点</span></span><br><span class="line">enter(path) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(indent + <span class="string">'&lt;'</span> + path.node.type + <span class="string">'&gt;'</span>)</span><br><span class="line">indent += <span class="string">'  '</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 退出节点</span></span><br><span class="line">exit(path) &#123;</span><br><span class="line">indent = indent.slice(<span class="number">0</span>, <span class="number">-2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(indent + <span class="string">'&lt;'</span> + <span class="string">'/'</span> + path.node.type + <span class="string">'&gt;'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用@babel/generator 进行生成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">babel.parse(source, (err, ast) =&gt; &#123;</span><br><span class="line"><span class="comment">// console.log(ast)</span></span><br><span class="line"><span class="keyword">let</span> indent = <span class="string">''</span></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 生成新的 ast，然后使用generator生成 code</span></span><br><span class="line">    <span class="built_in">console</span>.log(gen(ast).code);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Babel-做-ES6-语法转换"><a href="#Babel-做-ES6-语法转换" class="headerlink" title="Babel 做 ES6 语法转换"></a>Babel 做 ES6 语法转换</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>Babel 是 JavaScript 的一个编译器，能够将 ES6+ 语法转换为 ES5 语法。<br>Babel 本身自己带有 CLI（Command-Line Interface，命令行界面） 工具，可以单独安装使用：<code>npm i -D @babel/core @babel/cli</code><br>安装@babel/preset-env 进行语法转换，执行 CLI 的时候添加 —presets：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装开发依赖</span></span><br><span class="line">npm i webpack babel-loader webpack-cli @babel/core @babel/preset-env @babel/plugin-transform-runtime -D</span><br><span class="line"><span class="comment"># 执行 CLI 添加--presets</span></span><br><span class="line">npx babel babel.js --presets=@babel/preset-env</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title="babelrc"></a>babelrc</h3><p>除了使用命令行配置 flag 之外，Babel 还支持配置文件，比如这里做的 ES6 语法转换，用到的是 babel-loader，这个 Loader 依赖@babel/core 和@babel/preset-env。<br>然后在项目的根目录下，创建一个 babel 的配置文件.babelrc，内容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Babel 会在正在被转义的文件当前目录中查找一个 .babelrc 文件。 如果不存在，它会向外层目录遍历目录树，直到找到一个 .babelrc 文件，或一个 package.json 文件中有 <code>&quot;babel&quot;: {}</code><br>有了 babel-loader，可以使用 webpack 命令的—module-bind 来指定对应的文件需要经过怎样的 Loader 处理：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack --mode development ./src/index.js --module-bind js=babel-loader"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --mode production ./src/index.js --module-bind js=babel-loader"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>如果希望在不同的环境中使用不同的 Babel 配置，那么可以在配置文件中添加 env 选项，env 选项的值将从 process.env.BABEL_ENV 获取，如果没有的话，则获取 process.env.NODE_ENV 的值，它也无法获取时会设置为 “development”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: &#123;</span><br><span class="line">      <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>Babel 的插件分为两类：转换插件和语法解析插件。转换插件主要职责是进行语法转换，而解析插件则是扩展语法。</p><ol><li>如果不想一个个的添加插件，那么可以使用插件组合 preset（插件预设，插件组合更加好理解一些），最常见的 preset 是@babel/preset-env。<br>@babel/preset-env 是 Babel 官方推出的插件预设，它可以根据开发者的配置按需加载对应的插件。</li><li>如果在 ES5 中，有些对象、方法实际在浏览器中可能是不支持的，例如：Promise、Array.prototype.includes，这时候就需要用 @babel/polyfill 来做模拟处理。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// polyfill需要在文件内引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@babel/polyfill'</span></span><br></pre></td></tr></table></figure><p>s 3. @babel/polyfill 会直接修改内置的原型，且无法按需引入，可以使用@babel/runtime 的方案。 4. @babel/polyfill 和@babel/runtime 两种方式都比较繁琐，可以使用 @babel/preset-env 的 useBuildIns 选项做 polyfill，useBuiltIns 默认为 false，可以使用的值有 usage 和 entry</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line"><span class="string">"useBuiltIns"</span>: <span class="string">"usage|entry|false"</span>,</span><br><span class="line"><span class="string">"corejs"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"targets"</span>: &#123;</span><br><span class="line">        <span class="string">"browsers"</span>: <span class="string">"IE 10"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>usage 表示明确使用到的 Polyfill 引用，一般情况下 usage 就能满足日常开发。<br>polyfill 用到的 core-js 是可以指定版本的，比如使用 core-js@3，则首先安装依赖 <code>npm i -S core-js@3</code>，然后在 Babel 配置文件.babelrc 中写上版本。<br>使用 target 可以指定目标浏览器。</p><h3 id="webpack-中使用-Babel"><a href="#webpack-中使用-Babel" class="headerlink" title="webpack 中使用 Babel"></a>webpack 中使用 Babel</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'./babel.js'</span>,</span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">devtool: <span class="literal">false</span>,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">presets: [</span><br><span class="line">[</span><br><span class="line"><span class="string">'@babel/preset-env'</span>,</span><br><span class="line">&#123;</span><br><span class="line">useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Browserslist"><a href="#Browserslist" class="headerlink" title="Browserslist"></a>Browserslist</h3><p>Browserslist 用于设置目标浏览器的工具，声明一段浏览器的集合，工具可以根据这段集合描述，针对性的输出兼容性代码。<br>Browserslist 的配置可以放在 package.json 中，也可以单独放在配置文件.browserslistrc 中。所有的工具都会主动查找 browserslist 的配置文件，根据 browserslist 配置找出对应的目标浏览器集合。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"browserslist"</span>: [<span class="string">"last 2 version"</span>, <span class="string">"&gt; 1%"</span>, <span class="string">"maintained node versions"</span>, <span class="string">"not ie &lt; 11"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .browerslistrc</span><br><span class="line"># 每行一个浏览器集合描述</span><br><span class="line">last 2 version</span><br><span class="line">&gt; 1%</span><br><span class="line">maintained node versions</span><br><span class="line">not ie &lt; 11</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>范围</th><th>说明</th></tr></thead><tbody><tr><td>last 2 versions</td><td>最新两个版本</td></tr><tr><td>&gt; 1%</td><td>全球超过 1%人使用的浏览器，类似&gt; 5% in US 则指代美国 5%以上用户</td></tr><tr><td>cover 99.5%</td><td>覆盖 99.5%主流浏览器</td></tr><tr><td>chrome &gt; 50 ie 6-8</td><td>指定某个浏览器版本范围 Android/Chrome/Firefox/Baidu/Edge/Electron…</td></tr><tr><td>unreleased versions</td><td>说有浏览器的 beta 版本</td></tr><tr><td>not ie &lt; 11</td><td>排除 ie11 以下版本不兼容</td></tr><tr><td>since 2013 last 2 years</td><td>某时间范围发布的所有浏览器版本</td></tr><tr><td>maintained node versions</td><td>所有被 node 基金会维护的 node 版本</td></tr><tr><td>current node</td><td>当前环境的 node 版本</td></tr><tr><td>dead</td><td>全球使用率低于 0.5%且官方声明不在维护或者事实上已经两年没有再更新的版本</td></tr><tr><td>defaults</td><td>默认配置，&gt; 0.5% last 2 versions Firefox ESR not dead</td></tr></tbody></table></div><p>可以为不同的环境配置不同的目标浏览器。通过设置 BROWSERSLIST_ENV 或者 NODE_ENV 可以配置不同的环境变量。默认情况下会优先从 production 对应的配置项加载。在配置文件中，可以通过设置对应的环境目标浏览器：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json 写法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"browserslist"</span>: &#123;</span><br><span class="line"><span class="string">"production"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"ie 10"</span>],</span><br><span class="line"><span class="string">"development"</span>: [<span class="string">"last 1 chrome version"</span>, <span class="string">"last 1 firefox version"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#.browserslistrc：</span><br><span class="line"></span><br><span class="line">[production staging]</span><br><span class="line"></span><br><span class="line">&gt; 1%</span><br><span class="line">&gt; ie 10</span><br><span class="line"></span><br><span class="line">[development]</span><br><span class="line">last 1 chrome version</span><br><span class="line">last 1 firefox version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Babel 是一个 JavaScript 的静态分析编译器，在不需要执行代码的前提下对代码进行分析和处理。&lt;br&gt;要实现 Babel 从一个语法转换成另外一个语法，需要经过三个主要步骤：解析（Parse），转换（Transform），生成（Generate）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/06/28/Webpack_1/&quot;&gt;Webpack 程序打包学习笔记(1)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/07/05/Webpack_2/&quot;&gt;Webpack 程序打包学习笔记(2)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Babel" scheme="https://hyqskevin.github.io/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>Webpack程序打包学习笔记(2)</title>
    <link href="https://hyqskevin.github.io/2020/07/05/Webpack_2/"/>
    <id>https://hyqskevin.github.io/2020/07/05/Webpack_2/</id>
    <published>2020-07-05T11:10:37.000Z</published>
    <updated>2020-12-16T07:09:03.242Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack externals，target，resolve，module，plugin，devtool 的配置。</p><p><a href="https://hyqskevin.github.io/2020/06/28/Webpack_1/">Webpack 程序打包学习笔记(1)</a><br><a href="https://hyqskevin.github.io/2020/07/05/Webpack_2/">Webpack 程序打包学习笔记(2)</a><br><a href="https://hyqskevin.github.io/2020/07/13/Webpack_3/">Webpack 程序打包学习笔记(3)</a></p><a id="more"></a><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><p>externals 配置项用于去除输出的打包文件中依赖的某些第三方 js 模块（例如 jquery，vue 等等），减小打包文件的体积。该功能通常在开发自定义 js 库（library）的时候用到，这些被依赖的模块应该由使用者提供，而不应该包含在 js 库文件中。</p><p>使用者依据 js 库的导出方式来提供依赖模块，如果没有设置 output.library, output.libraryTarget 等配置信息，那么以 <code>&lt;script&gt;</code> 标签的方式在页面中引入，被去除的依赖模块以全局变量的方式引入。导出方式为 commonjs/amd/umd 则被依赖模块以各自规范引入。</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>webpack 中可以通过设置 target 来指定应用构建的目标（web/nodejs 服务/electron 应用…）；target 的值有两种类型：string 和 function。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">target: <span class="string">'web'</span>, <span class="comment">// 默认是 web，可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line"><span class="comment">// function 类型，接收compiler作为参数</span></span><br><span class="line">target: <span class="function">(<span class="params">compiler</span>) =&gt;</span> &#123;</span><br><span class="line">compiler.apply(</span><br><span class="line"><span class="keyword">new</span> webpack.JsonpTemplatePlugin(options.output),</span><br><span class="line"><span class="keyword">new</span> webpack.LoaderTargetPlugin(<span class="string">'web'</span>)</span><br><span class="line">)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string 类型支持下面的七种：</p><ul><li>web：默认，编译为类浏览器环境里可用；</li><li>node：编译为类 Node.js 环境可用（使用 Node.js require 加载 chunk）；</li><li>async-node：编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）；</li><li>electron-main：编译为 Electron 主进程；</li><li>electron-renderer：编译为 Electron 渲染进程；</li><li>node-webkit：编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 nw.gui 导入（实验性质）；</li><li>webworker：编译成一个 WebWorker。</li></ul><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>resolve 配置是帮助 Webpack 查找依赖模块，也可以替换对应的依赖。</p><p>常用的 resolve 配置：</p><ul><li>resolve.extensions：帮助 Webpack 解析扩展名的配置，默认值：[‘.wasm’, ‘.mjs’, ‘.js’, ‘.json’]，所以我们引入 js 和 json 文件，可以不写它们的扩展名，通常我们可以加上 .css、.less 等，但是要确保同一个目录下面没有重名的 css 或者 js 文件。</li><li>resolve.alias：最常用的配置，通过设置 alias 可以缩短目录写法，帮助 webpack 更快查找模块依赖，也能使我们编写代码更加方便。设置了 alias，我们可以在任意文件中，不用理会目录结构，直接使用 require(‘@lib/utils’)或者 require(‘src/lib/utils’)来帮助 Webpack 定位模块。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">resolve: &#123;</span><br><span class="line">extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.css'</span>],</span><br><span class="line">alias: &#123;</span><br><span class="line">src: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line"><span class="string">'@lib'</span>: path.resolve(__dirname, <span class="string">'src/lib'</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置 alias 会导致我们检测不到目录中的内容，不能帮我们快速编写代码，可以通过在项目根目录创建 jsconfig.json 来帮助我们定位</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line"><span class="string">"baseUrl"</span>: <span class="string">"./src"</span>,</span><br><span class="line"><span class="string">"paths"</span>: &#123;</span><br><span class="line"><span class="string">"@lib/"</span>: [<span class="string">"src/lib"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>alias 还常被用于给生产环境和开发环境配置不同的 lib 库</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">resolve: &#123;</span><br><span class="line">alias: &#123;</span><br><span class="line">san:</span><br><span class="line">process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">? <span class="string">'san/dist/san.min.js'</span></span><br><span class="line">: <span class="string">'san/dist/san.dev.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>alias 还支持在名称末尾添加$符号来缩小范围只命中以关键字结尾的导入语句，这样可以做精准匹配：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// 对 react 进行精确匹配</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">alias: &#123;</span><br><span class="line">react$: <span class="string">'/path/to/react.min.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>resolve.mainFields：针对不同宿主环境提供几份代码，例如提供 ES5 和 ES6 的两份代码，或者提供浏览器环境和 nodejs 环境两份代码</li><li>resolve.modules：查找模块依赖时，默认是 node_modules</li><li>resolve.symlinks：是否解析符合链接（软连接，symlink）</li><li>resolve.plugins：添加解析插件，数组格式</li><li>resolve.cachePredicate：是否缓存，支持 boolean 和 function，function 传入一个带有 path 和 require 的对象，必须返回 boolean 值</li></ul><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>在 webpack 解析模块的同时，不同的模块需要使用不同类型的模块处理器来处理，这部分的设置就在 module 配置中。<br>module 有两个配置：module.noParse 和 module.rules</p><ul><li>module.rules 是在处理模块时，将符合规则条件的模块，提交给对应的处理器来处理，通常用来配置 loader，其类型是一个数组，数组里每一项都描述了如何去处理部分文件。<br>每一项 rule 大致可以由以下三部分组成：</li></ul><ol><li><p>条件匹配：通过 test、include、exclude 配置命中可以应用规则的模块文件，匹配的对象包括三类：</p><ul><li>resource：请求文件的绝对路径</li><li>resourceQuery： ?之后的条件</li><li>issuer: 被请求资源的绝对路径，即导入时的位置</li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 来自src和test文件夹，不包含node_modules和bower_modules子目录，模块的文件路径为.tsx和.jsx结尾的文件</span></span><br><span class="line">rules: [</span><br><span class="line">test: [<span class="regexp">/\.jsx?$/</span>, /\.tsx?$/],</span><br><span class="line">include: [</span><br><span class="line">path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">path.resolve(__dirname, <span class="string">'test'</span>)</span><br><span class="line">],</span><br><span class="line">exclude: [</span><br><span class="line">path.resolve(__dirname, <span class="string">'node_modules'</span>),</span><br><span class="line">path.resolve(__dirname, <span class="string">'bower_modules'</span>)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>应用规则：对匹配条件通过后的模块，使用 use 配置项来应用 loader，loader 是解析处理器，使用对应的 loader 之前，需要先安装它</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定*.less文件都是用less-loader</span></span><br><span class="line">rules:[</span><br><span class="line">test: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>:<span class="string">'less-loader'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给 loader 传参的方式有两种：通过 options 传入和通过 query 的方式传入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config内写法，通过 options 传入</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'html-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">minimize: <span class="literal">true</span>,</span><br><span class="line">removeComments: <span class="literal">false</span>,</span><br><span class="line">collapseWhitespace: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// config内写法，通过 query 传入</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader:</span><br><span class="line"><span class="string">'html-loader?minimize=true&amp;removeComments=false&amp;collapseWhitespace=false'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>执行顺序：一组 loader 的执行顺序默认是<strong>从后到前（或者从右到左）</strong>执行，通过 enforce 选项可以让其中一个 loader 的执行顺序放到最前（pre）或者是最后（post）。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// query 写法从右到左，使用!隔开</span></span><br><span class="line"><span class="keyword">const</span> styles = <span class="built_in">require</span>(<span class="string">'css-loader!less-loader!./src/index.less'</span>)</span><br><span class="line"><span class="comment">// 数组写法，从后到前</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'style-loader'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'css-loader'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'less-loader'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要调整 Loader 的执行顺序，可以使用 enforce，enforce 取值是 pre|post，pre 表示把放到最前，post 是放到最后：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// enforce:'post' 的含义是把该 loader 的执行顺序放到最后</span></span><br><span class="line"><span class="comment">// enforce 的值还可以是 pre，代表把 loader 的执行顺序放到最前</span></span><br><span class="line">enforce: <span class="string">'post'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>oneOf 表示对该资源只应用第一个匹配的规则，一般结合 resourceQuery，具体代码来解释：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">oneOf: [</span><br><span class="line">&#123;</span><br><span class="line">resourceQuery: <span class="regexp">/inline/</span>, <span class="comment">// foo.css?inline</span></span><br><span class="line">use: <span class="string">'url-loader'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">resourceQuery: <span class="regexp">/external/</span>, <span class="comment">// foo.css?external</span></span><br><span class="line">use: <span class="string">'file-loader'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>module.noParse 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析和处理，这样做的好处是能提高构建性能，接收的类型为正则表达式，或者正则表达式数组或者接收模块路径参数的一个函数。<br>一定要确定被排除出去的模块代码中不能包含 import、require、define 等内容，以保证 webpack 的打包包含了所有的模块，不然会导致打包出来的 js 因为缺少模块而报错。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line"><span class="comment">// 使用正则表达式</span></span><br><span class="line">noParse: <span class="regexp">/jquery|lodash/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数，从 Webpack 3.0.0 开始支持</span></span><br><span class="line">noParse: <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// content 代表一个模块的文件路径</span></span><br><span class="line"><span class="comment">// 返回 true or false</span></span><br><span class="line"><span class="keyword">return</span> <span class="regexp">/jquery|lodash/</span>.test(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>plugin 是 Webpack 的重要组成部分，可以直接通过 webpack 对象的属性来直接使用。loader 面向的是解决某个或者某类模块的问题，而 plugin 面向的是项目整体，解决的是 loader 解决不了的问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 压缩js</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin();</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了内置的插件，我们也可以通过 NPM 包的方式来使用插件：</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 导出css文件到单独的内容</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'style.css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>devtool 是来控制怎么显示 sourcemap，通过 sourcemap 我们可以快速还原代码的错误位置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack externals，target，resolve，module，plugin，devtool 的配置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/06/28/Webpack_1/&quot;&gt;Webpack 程序打包学习笔记(1)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/07/05/Webpack_2/&quot;&gt;Webpack 程序打包学习笔记(2)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/07/13/Webpack_3/&quot;&gt;Webpack 程序打包学习笔记(3)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Webpack" scheme="https://hyqskevin.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack程序打包学习笔记(1)</title>
    <link href="https://hyqskevin.github.io/2020/06/28/Webpack_1/"/>
    <id>https://hyqskevin.github.io/2020/06/28/Webpack_1/</id>
    <published>2020-06-28T12:48:33.000Z</published>
    <updated>2020-12-16T07:09:04.174Z</updated>
    
    <content type="html"><![CDATA[<p>像 Grunt、Gulp 这类构建工具，打包的思路是：遍历源文件 → 匹配规则 → 打包，这个过程中做不到按需加载，即对于打包起来的资源，到底页面用不用，打包过程中是不关心的。</p><p>webpack 跟其他构建工具本质上不同之处在于：webpack 是从入口文件开始，经过模块依赖加载、分析和打包三个流程完成项目的构建。在加载、分析和打包的三个过程中，可以针对性的做一些解决方案，还可以轻松的解决传统构建工具解决的问题：</p><p>模块化打包，一切皆模块，JS 是模块，CSS 等也是模块；<br>语法糖转换：比如 ES6 转 ES5、TypeScript；<br>预处理器编译：比如 Less、Sass 等；<br>项目优化：比如压缩、CDN；<br>解决方案封装：通过强大的 Loader 和插件机制，可以完成解决方案的封装，比如 PWA；<br>流程对接：比如测试流程、语法检测等。</p><a id="more"></a><h2 id="webpack-cli"><a href="#webpack-cli" class="headerlink" title="webpack-cli"></a>webpack-cli</h2><p>Webpack-cli 是 Webpack 的 CLI （Command-line interface）工具，如果在项目中，可以使用下面的方式安装：</p><p>npm install webpack-cli —save-dev<br>如果想全局使用 webpack 的命令，可以使用 npm install -g webpack-cli 安装。<br>Webpack 的打包环境有 production 和 development 两种，分别对应生产环境和开发环境，生产环境默认配置包括压缩等常用的配置。<br>Webpack 默认的入口文件是 src/index.js；<br>Webpack 的默认输出目录是 dist/main.js。</p><ul><li>Tips：这里建议在项目中安装 webpack-cli 并且使用 —save-dev 的配置将 webpack-cli 放到开发依赖中。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack --mode development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们如果要修改 Webpack 的默认输出目录，需要用到 Webpack 命令的—output，我们将上面的 npm scripts 做下修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack --mode development --output ./output/main.js"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production --output ./output/main.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack-cli 技巧：</p><ol><li>当项目逐渐变大或者使用生产环境打包的时候，Webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色： webpack —progress —colors；</li><li>Webpack 的配置比较复杂，很容出现错误，如果出问题，会打印一些简单的错误信息，我们还可以通过参数 —display-error-details 来打印错误详情：webpack —display-error-details；</li><li>如果不想每次修改模块后都重新编译，那么可以启动监听模式，开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的：webpack —watch；</li><li>webpack-cli 支持两个快捷选项：-d 和 -p ，分别代表一些常用的开发环境和生产环境的打包。</li><li>常用 webpack 配置选项：<br>–config：指定一个 Webpack 配置文件的路径；<br>–mode：指定打包环境的 mode，取值为 development 和 production，分别对应着开发环境和生产环境；<br>–json：输 mode 出 Webpack 打包的结果，可以使用 webpack —json &gt; stats.json 方式将打包结果输出到指定的文件；<br>–progress：显示 Webpack 打包进度；<br>–watch, -w：watch 模式打包，监控文件变化之后重新开始打包；<br>–color, —colors/–no-color, —no-colors：控制台输出的内容是否开启颜色；<br>–hot：开启 Hot Module Replacement 模式，后面会详细介绍；<br>–profile：会详细的输出每个环节的用时（时间），方便排查打包速度瓶颈。</li></ol><h2 id="配置-webpack-config-js"><a href="#配置-webpack-config-js" class="headerlink" title="配置 webpack.config.js"></a>配置 webpack.config.js</h2><p>可以通过修改 Webpack 的配置文件（webpack.config.js）来对 Webpack 进行配置，Webpack 的配置文件遵循 Node.js 的 CommonJS 模块规范<br>Webpack 配置文件语法和类型多样，不仅支持 js 配置，还支持 ts（TypeScript）、CoffeeScript 甚至 JSX 语法的配置；除了使用对象类型，Webpack 还支持函数、Promise 和多配置数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本配置</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">entry: <span class="string">'./index.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">filename: <span class="string">'index.bundle.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只使用一个配置文件来区分生产环境（production）和开发环境（development），则可以使用函数类型的 Webpack 配置，函数类型的配置必须返回一个配置对象</p><p>Webpack 配置函数接受两个参数 env 和 argv：分别对应着环境对象和 Webpack-CLI 的命令行选项</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, argv</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">mode: env.production ? <span class="string">'production'</span> : <span class="string">'development'</span>,</span><br><span class="line">devtool: env.production ? <span class="string">'source-maps'</span> : <span class="string">'eval'</span>,</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">terserOptions: &#123;</span><br><span class="line">compress: argv[<span class="string">'optimize-minimize'</span>], <span class="comment">// 只有传入 -p 或 --optimize-minimize</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要异步加载一些 Webpack 配置需要做的变量，那么可以使用 Promise 的方式来做 Webpack 的配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">resolve(&#123;</span><br><span class="line">entry: <span class="string">'./app.js'</span>,</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一些特定的场景可能需要一次打包多次，而多次打包中有一些通用的配置，这时候可以使用配置数组的方式，将两次以上的 Webpack 配置以数组的形式导出</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">&#123;</span><br><span class="line">mode: <span class="string">'production'</span>,</span><br><span class="line"><span class="comment">// 配置1</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 配置2</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Webpack 配置 常见名词</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">entry</td><td>项目入口，包括字符串、对象、数组</td></tr><tr><td style="text-align:left">module</td><td>开发中每一个文件都可以看做 module，模块不局限于 js，也包含 css、图片等</td></tr><tr><td style="text-align:left">chunk</td><td>代码块，一个 chunk 可以由多个模块组成</td></tr><tr><td style="text-align:left">loader</td><td>模块转化器，模块的处理器，对模块进行转换处理</td></tr><tr><td style="text-align:left">plugin</td><td>扩展插件，插件可以处理 chunk，也可以对最后的打包结果进行处理，可以完成 loader 完不成的任务</td></tr><tr><td style="text-align:left">bundle</td><td>最终打包完成的文件，一般就是和 chunk 一一对应的关系，bundle 就是对 chunk 进行便意压缩打包等处理后的产出</td></tr><tr><td style="text-align:left">mode</td><td>指定开发环境打包</td></tr><tr><td style="text-align:left">context</td><td>项目打包的相对路径，指定之后设置的 entry 和 output 的相对路径都是相对于 context；在实际开发中一般不需要配置</td></tr></tbody></table></div><p>默认情况下，Webpack 会查找执行目录下面的 webpack.config.js 作为配置，如果需要指定某个配置文件，可以使用命令：<code>webpack --config webpack.config.js</code><br>Webpack4.0 开始引入了 mode 配置，通过配置 mode=development 或者 mode=production 来制定是开发环境打包，还是生产环境打包<br>除了在配置文件中设置 mode：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以在命令行中设置 mode：<code>npm webpack --config webpack.config.entry.js --mode development</code></p><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>entry 包括了单文件入口和多文件入口两种方式。单文件入口可以快速创建一个只有单一文件入口的情况，多文件入口是使用对象语法来通过支持多个 entry，具有较高的灵活性，可用于多页应用、页面模块分离优化。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'index.js'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用对象方式</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">main: <span class="string">'index.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">entry: [<span class="string">'./src/app.js'</span>, <span class="string">'./src/home.js'</span>],</span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'array.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果直接是 string 的形式，那么 webpack 就会直接把该 string 指定的模块（文件）作为入口模块</li><li>如果是数组 [string] 的形式，那么 webpack 会自动生成另外一个入口模块，并将数组中每个元素指定的模块（文件）加载进来，并将最后一个模块的 module.exports 作为入口模块的 module.exports 导出。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">home: <span class="string">'home.js'</span>,</span><br><span class="line">search: <span class="string">'search.js'</span>,</span><br><span class="line">list: <span class="string">'list.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>output 的每一个 bundle 对应了 entry 的文件编译打包后的结果，output 的常用属性有：</p><ul><li>path<br>此选项制定了输出的 bundle 存放的路径，比如 dist、output 等，不指定 output 时输出到 dist</li><li>filename<br>这个是 bundle 的名称，不指定 output 时输出为 dist/main.js</li><li>publicPath<br>指定了一个在浏览器中被引用的 URL 地址，当文件路径不同于他们的本地磁盘路径（由 output.path 指定）时，output.publicPath 被用来作为 src 或者 link 指向该文件。这种做法在需要将静态文件放在不同的域名或者 CDN 上面的时候是很有用的。</li><li>library<br>如果打包生成一个供别人使用的库，那么可以使用 output.library 来指定库的名称，库的名称支持占位符和普通字符串：<code>library: &#39;myLib&#39;</code></li><li>libraryTarget<br>使用 output.libraryTarget 指定库打包出来的规范，取值范围为：var、assign、this、window、global、commonjs、commonjs2、commonjs-module、amd、umd、umd2、jsonp</li></ul><p>一个 webpack 的配置，可以包含多个 entry，但是只能有一个 output，对于不同的 entry 可以通过 output.filename 占位符语法来区分。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">home: <span class="string">'home.js'</span>,</span><br><span class="line">search: <span class="string">'search.js'</span>,</span><br><span class="line">list: <span class="string">'list.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].js'</span>, <span class="comment">// [name]为占位符，对应entry的key（home. search, list）</span></span><br><span class="line">path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">publicPath: <span class="string">'/assets/'</span>, <span class="comment">// CDN：publicPath: 'http://cdn.example.com/assets/'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webpack 目前支持的占位符：</p><div class="table-container"><table><thead><tr><th>占位符</th><th>含义</th></tr></thead><tbody><tr><td>[hash]</td><td>模块标识符的 hash</td></tr><tr><td>[chunkhash]</td><td>chunk 内容的 hash</td></tr><tr><td>[name]</td><td>模块名称</td></tr><tr><td>[id]</td><td>模块标识符</td></tr><tr><td>[query]</td><td>模块的 query，例如，文件名 ? 后面的字符串</td></tr><tr><td>[function]</td><td>一个 return 出一个 string 作为 filename 的函数</td></tr></tbody></table></div><p>[name]：对应的是 entry 的 key（home、search、list…）<br>[hash]：是整个项目的 hash 值，其根据每次编译内容计算得到，每次编译之后都会生成新的 hash，即修改任何文件都会导致所有文件的 hash 发生改变；在一个项目中虽然入口不同，但是 hash 是相同的；hash 无法实现前端静态资源在浏览器上长缓存，这时候应该使用 chunkhash<br>[chunkhash]：根据不同的入口文件（entry）进行依赖文件解析，构建对应的 chunk，生成相应的 hash；只要组成 entry 的模块文件没有变化，则对应的 hash 也是不变的，所以一般项目优化时，会将公共库代码拆分到一起，因为公共库代码变动较少的，使用 chunkhash 可以发挥最长缓存的作用<br>[hash] 和 [chunkhash] 的长度可以使用 [hash:16]（默认为 20）来指定。或者，通过指定 output.hashDigestLength 在全局配置长度<br>占位符是可以组合使用的，例如[name]-[hash:8]</p><hr><p><a href="https://hyqskevin.github.io/2020/07/05/Webpack_2/">Webpack 程序打包学习笔记(2)</a><br><a href="https://hyqskevin.github.io/2020/07/13/Webpack_3/">Webpack 程序打包学习笔记(3)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像 Grunt、Gulp 这类构建工具，打包的思路是：遍历源文件 → 匹配规则 → 打包，这个过程中做不到按需加载，即对于打包起来的资源，到底页面用不用，打包过程中是不关心的。&lt;/p&gt;
&lt;p&gt;webpack 跟其他构建工具本质上不同之处在于：webpack 是从入口文件开始，经过模块依赖加载、分析和打包三个流程完成项目的构建。在加载、分析和打包的三个过程中，可以针对性的做一些解决方案，还可以轻松的解决传统构建工具解决的问题：&lt;/p&gt;
&lt;p&gt;模块化打包，一切皆模块，JS 是模块，CSS 等也是模块；&lt;br&gt;语法糖转换：比如 ES6 转 ES5、TypeScript；&lt;br&gt;预处理器编译：比如 Less、Sass 等；&lt;br&gt;项目优化：比如压缩、CDN；&lt;br&gt;解决方案封装：通过强大的 Loader 和插件机制，可以完成解决方案的封装，比如 PWA；&lt;br&gt;流程对接：比如测试流程、语法检测等。&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Webpack" scheme="https://hyqskevin.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>BetterScroll插件实现页面滚动效果</title>
    <link href="https://hyqskevin.github.io/2020/05/28/better-scroll/"/>
    <id>https://hyqskevin.github.io/2020/05/28/better-scroll/</id>
    <published>2020-05-28T03:08:18.000Z</published>
    <updated>2020-11-19T09:17:47.822Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;BetterScoll 用于解决列表的动态滚动，实现移动端列表上拉加载，下拉刷新，水平/垂直滚动，滚动至指定高度等功能。BetterScroll 支持大量参数配置，提供很多灵活的 api 实现指定功能。<br>&emsp;&emsp;实现 BetterScroll 滚动时父元素的高度或宽度需要进行固定，同时确保父元素和子元素内容正确渲染；在 DOM 结构发生改变时需要重新调用 <code>scroll.refresh()</code> 方法重新计算来确保滚动效果正常。</p><a id="more"></a><ul><li><p>安装：<code>npm install better-scroll --save</code></p></li><li><p>基本结构：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其它的 DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>, &#123;</span></span><br><span class="line"><span class="javascript">pullUpLoad: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">scrollbar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Scroll-配置项"><a href="#Scroll-配置项" class="headerlink" title="Scroll 配置项"></a>Scroll 配置项</h2><h2 id="Scroll-常用方法"><a href="#Scroll-常用方法" class="headerlink" title="Scroll 常用方法"></a>Scroll 常用方法</h2><h2 id="Scroll-事件监听"><a href="#Scroll-事件监听" class="headerlink" title="Scroll 事件监听"></a>Scroll 事件监听</h2><h2 id="Vue-中实现-BetterScroll"><a href="#Vue-中实现-BetterScroll" class="headerlink" title="Vue 中实现 BetterScroll"></a>Vue 中实现 BetterScroll</h2><p>&emsp;&emsp;Vue.js 提供了我们一个获取 DOM 对象的接口 <code>vm.$refs</code>，可以通过 <code>this.$refs.wrapper</code> 访问 DOM 对象。在 mounted 钩子函数里，使用回调函数保证初始化时 wrapper 的 DOM 已经渲染，可以正确计算它以及它内层 content 的高度以确保滚动正常。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">mounted() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.scroll = <span class="keyword">new</span> Bscroll(<span class="keyword">this</span>.$refs.wrapper, &#123;&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>Scroll 组件的 DOM 结构包括顶部和底部的提示信息以及中间部分的列表组件，使用插槽 <code>&lt;slot&gt;</code> 进行占位。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"scroll-content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 刷新提示信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-tip"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"refresh-hook"</span>&gt;</span>&#123;&#123;pullDownMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内容列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 底部提示信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom-tip"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"loading-hook"</span>&gt;</span>'-到底了-'<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件的 js 部分对 Scroll 做 Vue 的封装，在 prop 里重写 Scroll 配置项，将控制权交给调用 Scroll.vue 的父组件；通过 methods 暴露的一些方法对 better-scroll 的方法做一层代理；watch 监听 data 的改变，及时调用 refresh 方法重新计算 better-scroll 确保滚动效果正常。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 常用配置和自定义配置</span></span><br><span class="line">props: &#123;</span><br><span class="line">probeType: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">1</span> &#125;, <span class="comment">// 何时派发滚动事件</span></span><br><span class="line">click: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;, <span class="comment">// 点击时是否派发click事件</span></span><br><span class="line">scrollX: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 横向滚动</span></span><br><span class="line">scrollY: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 纵向滚动</span></span><br><span class="line">bounce: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 边缘弹回动画</span></span><br><span class="line">    autoBlur: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 滚动之前激活元素失去焦点</span></span><br><span class="line">    <span class="comment">// 自定义事件</span></span><br><span class="line">pullup: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 上拉动作触发事件</span></span><br><span class="line">    pulldown: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 下拉动作出发事件</span></span><br><span class="line">listenScroll: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 监听滚动距离触发滚动事件</span></span><br><span class="line">data: &#123; <span class="attr">type</span>: <span class="built_in">Array</span>, <span class="attr">default</span>: <span class="literal">null</span> &#125;, <span class="comment">// 父组件的列表数据</span></span><br><span class="line">beforeScroll: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;, <span class="comment">// 列表滚动开始事件</span></span><br><span class="line">    refreshDelay: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">20</span> &#125;, <span class="comment">// 数据更新后刷新Scroll延时</span></span><br><span class="line">    showIcon: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;, <span class="comment">// 下拉后显示返回按钮事件</span></span><br><span class="line">    toTop: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125; <span class="comment">// 返回顶部事件</span></span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">_initScroll() &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.$refs.wrapper) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// better-scroll的初始化</span></span><br><span class="line"><span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper, &#123;</span><br><span class="line">probeType: <span class="keyword">this</span>.probeType,</span><br><span class="line">click: <span class="keyword">this</span>.click,up</span><br><span class="line">        scrollX: <span class="keyword">this</span>.scrollX,</span><br><span class="line">        pullup: <span class="keyword">this</span>.pullup,</span><br><span class="line">        pulldown: <span class="keyword">this</span>.pulldown</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发滚动事件，下拉一定距离后提示可刷新</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.listenScroll) &#123;</span><br><span class="line">        <span class="keyword">this</span>.scroll.on(<span class="string">'scroll'</span>, (pos) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (pos.y &gt; <span class="number">120</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pullDownMsg = <span class="string">'释放后进行刷新'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 执行下拉刷新操作</span></span><br><span class="line">      <span class="keyword">this</span>.scroll.on(<span class="string">'pullingDown'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'pulldown'</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.scroll.finishPullDown()</span><br><span class="line">          <span class="keyword">this</span>.scroll.refresh()</span><br><span class="line">          <span class="keyword">this</span>.pullDownMsg = <span class="string">'-下拉刷新-'</span></span><br><span class="line">        &#125;, <span class="number">600</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发列表滚动开始的事件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beforeScroll) &#123;</span><br><span class="line"><span class="keyword">this</span>.scroll.on(<span class="string">'beforeScrollStart'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'beforeScroll'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">disable() &#123;</span><br><span class="line"><span class="comment">// 代理better-scroll的disable方法</span></span><br><span class="line"><span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.disable()</span><br><span class="line">&#125;,</span><br><span class="line">enable() &#123;</span><br><span class="line"><span class="comment">// 代理better-scroll的enable方法</span></span><br><span class="line"><span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.enable()</span><br><span class="line">&#125;,</span><br><span class="line">refresh() &#123;</span><br><span class="line"><span class="comment">// 代理better-scroll的refresh方法</span></span><br><span class="line"><span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.refresh()</span><br><span class="line">&#125;,</span><br><span class="line">scrollTo() &#123;</span><br><span class="line"><span class="comment">// 代理better-scroll的scrollTo方法</span></span><br><span class="line"><span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.scrollTo.apply(<span class="keyword">this</span>.scroll, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;,</span><br><span class="line">scrollToElement() &#123;</span><br><span class="line"><span class="comment">// 代理better-scroll的scrollToElement方法</span></span><br><span class="line"><span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.scrollToElement.apply(<span class="keyword">this</span>.scroll, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="comment">// DOM渲染完毕后初始化better-scroll</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>._initScroll()</span><br><span class="line">&#125;, <span class="keyword">this</span>.refreshDelay)</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="comment">// 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常</span></span><br><span class="line">data() &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.refresh()</span><br><span class="line">&#125;, <span class="keyword">this</span>.refreshDelay)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">https://github.com/ustbhuangyi/better-scroll</a><br><a href="https://better-scroll.github.io/docs/zh-CN/" target="_blank" rel="noopener">https://better-scroll.github.io/docs/zh-CN/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;BetterScoll 用于解决列表的动态滚动，实现移动端列表上拉加载，下拉刷新，水平/垂直滚动，滚动至指定高度等功能。BetterScroll 支持大量参数配置，提供很多灵活的 api 实现指定功能。&lt;br&gt;&amp;emsp;&amp;emsp;实现 BetterScroll 滚动时父元素的高度或宽度需要进行固定，同时确保父元素和子元素内容正确渲染；在 DOM 结构发生改变时需要重新调用 &lt;code&gt;scroll.refresh()&lt;/code&gt; 方法重新计算来确保滚动效果正常。&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Vue" scheme="https://hyqskevin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>swiper滑动插件</title>
    <link href="https://hyqskevin.github.io/2020/05/12/swiper/"/>
    <id>https://hyqskevin.github.io/2020/05/12/swiper/</id>
    <published>2020-05-12T06:27:12.000Z</published>
    <updated>2020-12-17T00:44:49.050Z</updated>
    
    <content type="html"><![CDATA[<p>Swiper 和 vue-awesome-swiper 插件用于页面内容的触摸滑动，每个展示块为一个 slide，全部 slide 包含在包装器 wrapper 中，外部的总容器 container 又包裹着 wrapper 和箭头按钮控件 navigation 以及分页器控件 pagination。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分页器。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--右箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果需要滚动条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><h3 id="初始结构"><a href="#初始结构" class="headerlink" title="初始结构"></a>初始结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Swiper <span class="keyword">from</span> <span class="string">'swiper'</span></span><br><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">direction: <span class="string">'vertical'</span>, <span class="comment">// 垂直切换选项</span></span><br><span class="line">  loop: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">  ...</span><br><span class="line"><span class="comment">// 如果需要分页器</span></span><br><span class="line">pagination: &#123;</span><br><span class="line">el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">navigation: &#123;</span><br><span class="line">nextEl: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">prevEl: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要滚动条</span></span><br><span class="line">scrollbar: &#123;</span><br><span class="line">el: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="container-常用选项"><a href="#container-常用选项" class="headerlink" title="container 常用选项"></a>container 常用选项</h3><ul><li>initialSlide：初始化时显示的 slide，默认为第一个 slide</li><li>direction：slide 滑动方向，默认为水平方向</li><li>speed：切换速度，单位 ms</li><li>slidesPerView：设置同时显示的 slides 数量</li><li>slidesPerGroup：定义滑动时几个 slide 为一组</li><li>spaceBetween：在 slide 之间设置距离</li><li>loop：会在原本 slide 前后复制若干个 slide 并在合适的时候切换</li><li>preventClicks：防止滑动时执行链接跳转</li><li>touchRatio：设置触摸距离与 slide 滑动距离的比率</li><li>threshold：设置拖动临界值</li><li>touchAngle：设置触发拖动的角度值。默认 45 度，即使触摸方向不是完全水平也能拖动 slide</li><li>autoplay：设置为 true 启动自动切换，可设置延迟 delay 参数</li><li>effect：设置切换效果，’slide’（普通切换、默认）,”fade”（淡入）”cube”（方块）”coverflow”（3d 流）”flip”（3d 翻转）</li></ul><h3 id="组件功能"><a href="#组件功能" class="headerlink" title="组件功能"></a>组件功能</h3><ul><li>lazy：设为 true 开启图片延迟加载默认值</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 延迟加载图片的结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"path/to/picture-1.jpg"</span> <span class="attr">class</span>=<span class="string">"swiper-lazy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-lazy-preloader"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</span></span><br><span class="line"><span class="undefined">lazy: &#123;</span></span><br><span class="line"><span class="javascript">loadPrevNext: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>zoom：开启焦距功能：双击 slide 会放大/缩小，并且在手机端可双指触摸缩放</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-zoom-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"path/to/image"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>thumbs：专门用于制作带缩略图的 swiper</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> thumbsSwiper = <span class="keyword">new</span> Swiper(<span class="string">'#thumbs'</span>, &#123;</span><br><span class="line">spaceBetween: <span class="number">10</span>,</span><br><span class="line">slidesPerView: <span class="number">4</span>,</span><br><span class="line">watchSlidesVisibility: <span class="literal">true</span>, <span class="comment">//防止不可点击</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> gallerySwiper = <span class="keyword">new</span> Swiper(<span class="string">'#gallery'</span>, &#123;</span><br><span class="line">spaceBetween: <span class="number">10</span>,</span><br><span class="line">thumbs: &#123;</span><br><span class="line">swiper: thumbsSwiper,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>mySwiper.slideNext(speed, runCallbacks)</code> 滑动到下一个滑块</li><li><code>mySwiper.slidePrev(speed,runCallbacks)</code> 滑动到前一个滑块</li><li><code>mySwiper.slideTo(index, speed, runCallbacks)</code> 切换到指定 slide</li><li><code>mySwiper.on(event,handler)</code> 添加回调函数或者事件</li></ul><h2 id="vue-awesome-swiper"><a href="#vue-awesome-swiper" class="headerlink" title="vue-awesome-swiper"></a>vue-awesome-swiper</h2><p>vue-awesome-swiper 是 vue 的 swiper 插件，<code>npm install swiper vue-awesome-swiper --save</code>安装导入后即可在组件中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*main.js 全局安装*/</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import style (&gt;= Swiper 6.x)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/swiper-bundle.css'</span></span><br><span class="line"><span class="comment">// import style (&lt;= Swiper 5.x)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/css/swiper.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAwesomeSwiper <span class="comment">/* &#123; default options with global component &#125; */</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*.vue 组件内*/</span></span><br><span class="line"><span class="keyword">import</span> &#123; Swiper, SwiperSlide, directive &#125; <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import style (&gt;= Swiper 6.x)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/swiper-bundle.css'</span></span><br><span class="line"><span class="comment">// import style (&lt;= Swiper 5.x)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/css/swiper.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Swiper,</span><br><span class="line">SwiperSlide,</span><br><span class="line">&#125;,</span><br><span class="line">directives: &#123;</span><br><span class="line">swiper: directive,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始结构-1"><a href="#初始结构-1" class="headerlink" title="初始结构"></a>初始结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;swiper ref=<span class="string">"mySwiper"</span> :options=<span class="string">"swiperOptions"</span>&gt;</span><br><span class="line">    &lt;swiper-slide&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/swiper-slide&gt;</span></span><br><span class="line"><span class="regexp">    &lt;swiper-slide&gt;Slide 2&lt;/</span>swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/swiper-slide&gt;</span></span><br><span class="line"><span class="regexp">    &lt;swiper-slide&gt;Slide 4&lt;/</span>swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;Slide <span class="number">5</span>&lt;<span class="regexp">/swiper-slide&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="swiper-pagination" slot="pagination"&gt;&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/swiper&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'carrousel'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      swiperOptions: &#123;</span><br><span class="line">        pagination: &#123;</span><br><span class="line">          el: <span class="string">'.swiper-pagination'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Some Swiper option/callback...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    swiper() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$refs.mySwiper.$swiper</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a><br><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">https://github.com/surmon-china/vue-awesome-swiper</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swiper 和 vue-awesome-swiper 插件用于页面内容的触摸滑动，每个展示块为一个 slide，全部 slide 包含在包装器 wrapper 中，外部的总容器 container 又包裹着 wrapper 和箭头按钮控件 navigation 以及分页器控件 pagination。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-slide&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Slide 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-slide&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Slide 2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-slide&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Slide 3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--分页器。如果放置在swiper-container外面，需要自定义样式。--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-pagination&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--左箭头。如果放置在swiper-container外面，需要自定义样式。--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-button-prev&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--右箭头。如果放置在swiper-container外面，需要自定义样式。--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-button-next&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 如果需要滚动条 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;swiper-scrollbar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="Vue" scheme="https://hyqskevin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript异步，消息队列和事件循环</title>
    <link href="https://hyqskevin.github.io/2020/05/10/js%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    <id>https://hyqskevin.github.io/2020/05/10/js同步和异步/</id>
    <published>2020-05-10T01:33:58.000Z</published>
    <updated>2020-11-19T08:17:13.838Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;JavaScript 是单线程的，在 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，而异步容易实现非阻塞，所以在 JavaScript 中对于耗时的操作或者时间不确定的操作，使用异步就成了必然的选择。</p><a id="more"></a><h2 id="1-异步过程"><a href="#1-异步过程" class="headerlink" title="1. 异步过程"></a>1. 异步过程</h2><p>异步过程：主线程发起一个异步请求 -&gt; 工作线程接收请求(异步函数返回) -&gt; 主线程继续执行后面的代码，同时工作线程执行异步任务 -&gt; 工作线程完成工作后，通知主线程 -&gt; 主线程收到通知后，执行一定的动作(调用回调函数)。</p><p>实现异步过程包括发起函数和回调函数，发起函数用于发起异步过程，回调函数用来处理调用的结果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发起函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 回调函数内容</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h2 id="2-消息队列和事件循环"><a href="#2-消息队列和事件循环" class="headerlink" title="2. 消息队列和事件循环"></a>2. 消息队列和事件循环</h2><p>异步过程中，工作线程在异步操作完成后需要通知主线程。这个通知机制需要通过消息队列和事件循环完成。</p><p>消息队列是一个先进先出的队列，它里面存放着各种消息。JS 引擎线程执行栈中的同步任务，当所有同步任务执行完毕后，栈被清空，然后读取消息队列中的一个待处理任务，并把相关回调函数压入栈中执行新的同步任务。</p><p>每次栈被清空后，JS 引擎线程都会在消息队列中读取新的任务，如果没有新的任务，就会等待，直到有新的任务。</p><p><img src="https://hyqskevin.github.io/pic/yibu.webp" alt="消息队列和事件循环"></p><h2 id="3-异步编程方法"><a href="#3-异步编程方法" class="headerlink" title="3. 异步编程方法"></a>3. 异步编程方法</h2><ol><li>回调函数</li></ol><p>将后者的执行改写为前者的回调函数。回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">//f1方法</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">callback(f2) <span class="comment">// f2执行改写为f1的回调函数</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//f2方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的回调函数有 setTimeout，setInterval 和 nextTick</p><ul><li><code>setTimeout</code> 设定为一段时间后执行异步任务，且在主线程执行完成后才被调用。</li><li><code>setInterval</code> 是一个定时器函数，按照指定周期不断调用函数，在每次主线程完成后执行。常用于获取数据量过大的列表，先获取一部分用于 DOM 挂载和页面展示，之后再不断从后台获取全部数据。</li><li><code>process.nextTick()</code> 是 Node.js 提供的异步执行函数，执行顺序会早于 setTimeout 和 setTimeInterval，在主线程完成后，任务队列调用之前执行，即在当前”执行栈”的尾部 -&gt; 下一次 Event Loop（主线程读取”任务队列”）之前 -&gt; 触发 process 指定的回调函数。</li></ul><ol><li>Promise 对象</li></ol><p>ECMAscript 6 原生提供了 Promise 对象，代表了未来将要发生的事件，用来传递异步操作的消息，调用 resolve 或 reject 方法返回。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Promise</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步处理</span></span><br><span class="line">  <span class="keyword">if</span> () &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(); <span class="comment">// 异步调用失败</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调再判断结果，也可以调用 promise.catch()方法捕捉错误的回调函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(</span><br><span class="line">(res) =&gt; &#123;</span><br><span class="line"><span class="comment">// success</span></span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// catch error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p><ol><li>async/await</li></ol><p>async/await 基于 Promise 实现，它不能用于普通的回调函数。使用 await，函数必须用 async 标识，await 后面跟的是一个 Promise 实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">await</span> f1();</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">await</span> f2();</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// 处理报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// f1方法</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// f2方法</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://github.com/ljianshu/Blog/issues/53" target="_blank" rel="noopener">https://github.com/ljianshu/Blog/issues/53</a><br><a href="https://www.runoob.com/w3cnote/javascript-promise-object.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/javascript-promise-object.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;JavaScript 是单线程的，在 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，而异步容易实现非阻塞，所以在 JavaScript 中对于耗时的操作或者时间不确定的操作，使用异步就成了必然的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="JavaScript" scheme="https://hyqskevin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>json数据模拟</title>
    <link href="https://hyqskevin.github.io/2019/11/10/json-server/"/>
    <id>https://hyqskevin.github.io/2019/11/10/json-server/</id>
    <published>2019-11-10T11:33:58.000Z</published>
    <updated>2020-11-19T06:55:49.557Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;进行 web 网站开发时，前后端分离导致开发进度不同，前端经常需要等待后端的接口数据完成开发才可以继续调试。且开发环境，测试环境和线上环境分离，本地开发时无法运用测试环境的接口，开发时的接口和最终部署的接口也并不相同，每次测试时来回部署代码要耗费很多时间。<br>&emsp;&emsp;使用 json-server + mockjs 编写 json 格式的模拟数据接口，在等待后端准备接口期间，前端可以使用假数据进行模拟。</p><a id="more"></a><h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>json-server 是可以在本地运行，存储 json 数据的服务端。通过<code>npm install -g json-server</code>安装。</p><p>database.json 文件格式：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data1"</span>: &#123;</span><br><span class="line">    <span class="attr">"subdata1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">    <span class="attr">"subdata2"</span>: <span class="string">"value2"</span>,</span><br><span class="line">    <span class="attr">"subdata3"</span>: <span class="string">"value3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"data2"</span>: &#123;<span class="attr">"subdata1"</span>: , <span class="attr">"subdata2"</span>: , <span class="attr">"subdata3"</span>: &#125;,</span><br><span class="line">  <span class="attr">"data3"</span>: &#123;<span class="attr">"subdata1"</span>: , <span class="attr">"subdata2"</span>: , <span class="attr">"subdata3"</span>: &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置完 json 文件后，使用<code>json-server --watch --port 3001 database.json</code> 命令，启动服务 database.json。访问<code>localhost:3001</code>可以查看 json 数据。</p><h3 id="实现各类数据请求"><a href="#实现各类数据请求" class="headerlink" title="实现各类数据请求"></a>实现各类数据请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET /</span><br><span class="line">GET|POST /post</span><br><span class="line">GET|POST /post/<span class="number">1</span></span><br><span class="line">GET /post?param1=&amp;param2=</span><br><span class="line">GET /post/post?_page=<span class="number">1</span></span><br><span class="line">GET /posts?_sort=views&amp;_order=asc</span><br><span class="line">GET /posts?_start=<span class="number">20</span>&amp;_end=<span class="number">30</span></span><br><span class="line">GET /posts?q=xxx <span class="comment">// 搜索功能</span></span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>json-server 可以自定义路由，检验条件或输出格式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonServer = <span class="built_in">require</span>(<span class="string">'json-server'</span>) <span class="comment">// 创建json-server服务</span></span><br><span class="line"><span class="keyword">const</span> server = jsonServer.create() <span class="comment">// 创建http服务</span></span><br><span class="line"><span class="keyword">const</span> router = jsonServer.router(<span class="string">'db.js'</span>) <span class="comment">// 路由匹配的js数据</span></span><br><span class="line"><span class="keyword">const</span> middleWares = jsonServer.defaults() <span class="comment">// 使用默认中间件</span></span><br><span class="line"></span><br><span class="line">server.use(jsonServer.bodyParser) <span class="comment">// 安装json-server自带的body-parser，用于获取非地址栏传递的数据</span></span><br><span class="line">server.use(middleWares)</span><br><span class="line">server.use(router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听自定义路由</span></span><br><span class="line">server.listen(&#123; <span class="attr">host</span>: <span class="string">'192.168.137.1'</span>, <span class="attr">post</span>: <span class="number">3000</span> &#125;, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'JSON Server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其它功能：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义js数据地址</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> router = jsonServer.router(path.join(__dirname, <span class="string">'db.json'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义注册操作</span></span><br><span class="line"><span class="comment">// 注意： 自定义路由响应需要在安装json-server的router之前</span></span><br><span class="line">server.post(</span><br><span class="line"><span class="string">'/mock/register'</span>,</span><br><span class="line">(&#123; <span class="attr">body</span>: &#123; username = <span class="string">''</span>, password = <span class="string">''</span> &#125; &#125;, res) =&gt; &#123;</span><br><span class="line"><span class="comment">// console.log(username,password);</span></span><br><span class="line">username !== <span class="string">'admin'</span> &amp;&amp; password</span><br><span class="line">? res.jsonp(&#123;</span><br><span class="line">err: <span class="number">0</span>,</span><br><span class="line">msg: <span class="string">'注册成功'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">username,</span><br><span class="line">password,</span><br><span class="line">&#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">: res.jsonp(&#123;</span><br><span class="line">err: <span class="number">1</span>,</span><br><span class="line">msg: <span class="string">'注册失败'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  增加检验条件 isAuthorized</span></span><br><span class="line">server.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isAuthorized(req)) &#123;</span><br><span class="line"><span class="comment">// add your authorization logic here</span></span><br><span class="line">next() <span class="comment">// continue to JSON Server router</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.sendStatus(<span class="number">401</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义返回内容</span></span><br><span class="line">router.render = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> status</span><br><span class="line"><span class="keyword">let</span> len = <span class="built_in">Object</span>.keys(res.locals.data).length <span class="comment">// 判断是否获取到mockJS模拟的数据</span></span><br><span class="line"><span class="keyword">if</span> (res.req.originalMethod === <span class="string">'DELETE'</span>) &#123;</span><br><span class="line">status = len === <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">status = !!len</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 由于本地请求速度较快，不方便loading动效显示利用延时器，模拟真实服务器请求速度</span></span><br><span class="line">res.jsonp(&#123;</span><br><span class="line"><span class="comment">// 使用res.jsonp()方法将mockJS模拟生成的数据进行自定义包装后输出</span></span><br><span class="line">err: status ? <span class="number">0</span> : <span class="number">1</span>,</span><br><span class="line">msg: <span class="string">'操作'</span> + (status ? <span class="string">'成功'</span> : <span class="string">'失败'</span>),</span><br><span class="line">data: res.locals.data,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mockjs"><a href="#mockjs" class="headerlink" title="mockjs"></a>mockjs</h2><p>Mock.js 是一款模拟数据生成器，可以根据数据模板生成模拟数据，模拟 Ajax 请求，基于 HTML 模板生成模拟数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install mockjs</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Mock.js 使用数据模板定义生成模拟数据，数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：<code>&#39;name|rule&#39;: value</code>。也可以使用<code>Mock.Random</code> 工具类生成各种随机数据。具体语法在<a href="http://mockjs.com/0.1/#" target="_blank" rel="noopener">Mock.js 官网</a>中有详细说明。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">"mockjs"</span>); <span class="comment">// 引入mockJS</span></span><br><span class="line"><span class="keyword">const</span> MR = Mock.Random; <span class="comment">// 提mock的随机对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">"home|5"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id|+1"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"@cname"</span>,</span><br><span class="line">        <span class="string">"imgURL"</span>: MR.image(<span class="string">'750X200'</span>,MR.color(),MR.cword(<span class="number">4</span>,<span class="number">10</span>))</span><br><span class="line">        ...</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-配置数据地址"><a href="#webpack-配置数据地址" class="headerlink" title="webpack 配置数据地址"></a>webpack 配置数据地址</h2><hr><p><a href="https://blog.csdn.net/qq_41629150/article/details/99645632" target="_blank" rel="noopener">https://blog.csdn.net/qq_41629150/article/details/99645632</a><br><a href="https://github.com/typicode/json-server#getting-started" target="_blank" rel="noopener">https://github.com/typicode/json-server#getting-started</a></p><p><a href="http://mockjs.com/0.1/#" target="_blank" rel="noopener">Mock.js 官网</a><br><a href="https://github.com/typicode/json-server#getting-started" target="_blank" rel="noopener">json-server</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;进行 web 网站开发时，前后端分离导致开发进度不同，前端经常需要等待后端的接口数据完成开发才可以继续调试。且开发环境，测试环境和线上环境分离，本地开发时无法运用测试环境的接口，开发时的接口和最终部署的接口也并不相同，每次测试时来回部署代码要耗费很多时间。&lt;br&gt;&amp;emsp;&amp;emsp;使用 json-server + mockjs 编写 json 格式的模拟数据接口，在等待后端准备接口期间，前端可以使用假数据进行模拟。&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="JavaScript" scheme="https://hyqskevin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Maven POM 学习笔记</title>
    <link href="https://hyqskevin.github.io/2019/10/28/maven-pom/"/>
    <id>https://hyqskevin.github.io/2019/10/28/maven-pom/</id>
    <published>2019-10-28T09:28:02.000Z</published>
    <updated>2021-04-15T07:17:37.573Z</updated>
    
    <content type="html"><![CDATA[<p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖。<br>POM 中可以指定以项目依赖，插件，执行目标，项目构建 profile，项目版本，项目开发者列表，相关邮件列表信息。<br>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p><a id="more"></a><h2 id="1-Minimal-POM"><a href="#1-Minimal-POM" class="headerlink" title="1.Minimal POM"></a>1.Minimal POM</h2><p>最小 POM 需要 project 根标签和项目描述。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 工程根标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 模型版本，对于Maven2及Maven 3来说，它只能是4.0.0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 工程版本号，区分同一个artifact的不同版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--项目产生的构件类型，包括jar、war、ear、pom等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-父（Super）POM"><a href="#2-父（Super）POM" class="headerlink" title="2.父（Super）POM"></a>2.父（Super）POM</h2><p>父（Super）POM 是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM，包含了一些可以被继承的默认设置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父项目工程模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--构建项目需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--子项目可以引用的默认插件信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--报表规范--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目构建模板--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-POM-标签详解"><a href="#3-POM-标签详解" class="headerlink" title="3.POM 标签详解"></a>3.POM 标签详解</h2><p>基于 POM 项目的基本<code>&lt;project/&gt;</code>结构，引入不同的标签定义不同的项目信息</p><h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h3><p>parent 元素可以指定父 pom。用户可以通过增加 parent 元素来自定义一个父 pom，从而继承该 pom 的配置。parent 元素中包含一些子元素，用来定位父项目和父项目的 pom 文件位置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父项目的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>base-project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径,默认值是../pom.xml。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成文档相关的元素"><a href="#生成文档相关的元素" class="headerlink" title="生成文档相关的元素"></a>生成文档相关的元素</h3><p>maven 可以通过 mvn site 命令生成项目的相关文档，包括 name，url，和 description。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目的名称, Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>kevin-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.xxxxx.com/kevin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="issueManagement-项目的描述性信息"><a href="#issueManagement-项目的描述性信息" class="headerlink" title="issueManagement 项目的描述性信息"></a>issueManagement 项目的描述性信息</h3><h4 id="问题管理"><a href="#问题管理" class="headerlink" title="问题管理"></a>问题管理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目的问题管理系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--问题管理系统的名字， --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">system</span>&gt;</span>question<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://xxxxx.com/question<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开发者和贡献列表"><a href="#开发者和贡献列表" class="headerlink" title="开发者和贡献列表"></a>开发者和贡献列表</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目开发者列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">email</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organizationUrl</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目开发者属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目开发者所在时区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timezone</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目的其他贡献者列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--见developers/developer元素 --&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="license-许可"><a href="#license-许可" class="headerlink" title="license 许可"></a>license 许可</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--官方的license正文页面的URL --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--项目分发的主要方式--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--关于license的补充信息 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comments</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SCM-代码库控制管理"><a href="#SCM-代码库控制管理" class="headerlink" title="SCM 代码库控制管理"></a>SCM 代码库控制管理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。该连接只读 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:svn:http://...<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:svn:http://...<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="项目组织描述"><a href="#项目组织描述" class="headerlink" title="项目组织描述"></a>项目组织描述</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组织的全名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组织主页的URL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://xxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建时间"><a href="#创建时间" class="headerlink" title="创建时间"></a>创建时间</h4><p><code>&lt;inceptionYear /&gt; //4位数字。当产生版权信息时需要使用这个值</code></p><h3 id="repositories-远程仓库"><a href="#repositories-远程仓库" class="headerlink" title="repositories 远程仓库"></a>repositories 远程仓库</h3><p>远程仓库列表的配置，包括 <code>&lt;repositories&gt;</code> 依赖和扩展的远程仓库配置，以及 <code>&lt;pluginRepositories&gt;</code> 插件的远程仓库配置。在本地仓库找不到的情况下，maven 下载依赖、扩展和插件就是从这里配置的远程仓库中进行下载。<br>其中 release 是稳定版本，一经发布不再修改，想发布修改后的项目，只能升级项目版本再进行发布；snapshot 是不稳定的，一个 snapshot 的版本可以不断改变。项目在开发期间一般会使用 snapshot，更方便进行频繁的代码更新；一旦发布到外部，或者开发基本完成，代码迭代不再频繁，则推荐使用 release。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- releases和snapshots两组配置，可以在每个单独的仓库中，为每种类型的构件采取不同的策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- true值为true或者false，表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--选项：always，daily（默认），interval：X（X单位为分钟），或者never。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做。选项：ignore，fail，或者warn --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>name-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>name-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 远程仓库URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型。可以是default或者legacy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dependencies-项目依赖"><a href="#dependencies-项目依赖" class="headerlink" title="dependencies 项目依赖"></a>dependencies 项目依赖</h3><p>pom 文件中通过 <code>dependencyManagement</code> 来声明依赖，通过 <code>dependencies</code> 元素来管理依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 依赖依赖坐标  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 依赖类型，默认类型是jar --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 依赖的分类器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 被排除的依赖，此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可选依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--依赖范围，在项目发布过程中，帮助决定哪些构件被包括进来</span></span><br><span class="line"><span class="comment">          - compile：默认范围，用于编译</span></span><br><span class="line"><span class="comment">          - provided：类似于编译，但支持jdk或者容器提供，类似于classpath</span></span><br><span class="line"><span class="comment">          - runtime: 在执行时需要使用</span></span><br><span class="line"><span class="comment">          - systemPath: 仅用于范围为system。提供相应的路径</span></span><br><span class="line"><span class="comment">          - test: 用于test任务时使用</span></span><br><span class="line"><span class="comment">          - system: 需要外在提供相应的元素。通过systemPath来取得</span></span><br><span class="line"><span class="comment">          - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="build-项目构建需要的信息"><a href="#build-项目构建需要的信息" class="headerlink" title="build 项目构建需要的信息"></a>build 项目构建需要的信息</h3><p><code>&lt;build/&gt;</code>元素中包括 directory 路径管理，resource 资源管理，plugin 插件管理，extension 构建扩展等</p><h4 id="路径管理"><a href="#路径管理" class="headerlink" title="路径管理"></a>路径管理</h4><p>路径管理定义了各种源码和编译结果的输出路径。如果遵循 maven 默认的路径约定，这里的几个元素不需要配置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录。该路径是相对于pom.xml的相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目脚本源码目录，该目录下的内容，会直接被拷贝到输出目录，因为脚本是被解释的，而不是被编译的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="resource-资源管理"><a href="#resource-资源管理" class="headerlink" title="resource 资源管理"></a>resource 资源管理</h4><p><code>&lt;resources/&gt;</code>主要是对应用程序 resource 资源和单元测试部分 resource 资源的管理，分别通过 resource 标签和 testResource 标签管理两种资源。两个标签元素可选的子元素都是一样的。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 描述了资源的目标输出路径。该路径是相对于target/classes的路径 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--包含的模式列表，例如**/*.xml，只有符合条件的资源文件才会在打包的时候被放入到输出路径中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--排除的模式列表，例如**/*.xml，符合的资源文件不会在打包的时候会被过滤掉 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单元测试相关的所有资源路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="plugin-插件管理"><a href="#plugin-插件管理" class="headerlink" title="plugin 插件管理"></a>plugin 插件管理</h4><p>插件包括 <code>&lt;pluginManagement/&gt;</code> 和 <code>&lt;plugins/&gt;</code>。<code>&lt;pluginManagement/&gt;</code> 中有子元素 <code>&lt;plugins/&gt;</code>，主要是用来声明子项目可以引用的默认插件信息，如果只写在 <code>&lt;pluginManagement/&gt;</code> 中是不会被引入的。<code>&lt;project/&gt;</code> 下的直接子元素 <code>&lt;plugins/&gt;</code> 中定义的才是这个项目中真正需要被引入的插件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。pluginManagement中的插件直到被引用时才会被解析或绑定到生命周期 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里只是做了声明，并没有真正的引入。给定插件的任何本地配置都会覆盖这里的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可使用的插件列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--插件定位坐标三元素：groupId + artifactId + version --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 是否使用这个插件的Maven扩展(extensions)，默认为false --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 由于性能原因，只有在真需要下载时，该元素才被设置成enabled --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--执行目标的标识符 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--绑定目标的构建生命周期阶段 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--project使用的插件列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可选的子元素同上 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="extension-构建扩展"><a href="#extension-构建扩展" class="headerlink" title="extension 构建扩展"></a>extension 构建扩展</h4><p><code>&lt;extensions/&gt;</code> 是在此构建中使用的项目的列表，它们将被包含在运行构建的 classpath 中。这些项目可以启用对构建过程的扩展，并使活动的插件能够对构建生命周期进行更改。简而言之，扩展是在构建期间激活的 artifacts。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目坐标三元素：groupId + artifactId + version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="profile-配置"><a href="#profile-配置" class="headerlink" title="profile 配置"></a>profile 配置</h3><p>定义项目构建的模板，当有条件被激活时会修改构建处理</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动触发profile的条件逻辑 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--profile默认是否激活的标志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统所属家族(如 'windows') --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果Maven检测到某一个属性，其拥有对应的名称和值，Profile就会被激活 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--另一方面，exists则会检查文件是否存在，如果存在则激活profile --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/abcd/abcd-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                <span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/abcd/abcd-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                <span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repositories</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencyManagement</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">reporting</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distributionManagement</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="distributionManagement-项目分发信息相关元素"><a href="#distributionManagement-项目分发信息相关元素" class="headerlink" title="distributionManagement 项目分发信息相关元素"></a>distributionManagement 项目分发信息相关元素</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>kevin-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>kevinmaven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 构件临时部署的仓库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>kevin-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--部署位置的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--本元素是为了帮助定位那些不在仓库里的构件(license限制) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--如果构件移到了新的位置，这里列出构件的重定位信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。本地项目中不能设置该元素，因为这是工具自动更新的 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 有效的值有：none（默认），converted（仓库管理员从 Maven 1 POM转换过来），</span></span><br><span class="line"><span class="comment">      partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部署），</span></span><br><span class="line"><span class="comment">      verified（被核实时正确的和最终的） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">status</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="reporting-报表规范"><a href="#reporting-报表规范" class="headerlink" title="reporting 报表规范"></a>reporting 报表规范</h3><p>报表规范描述的是使用 mvn site 命令时使用的一些配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 执行"mvn site"运行报表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--网站是否排除默认的报表。这包括"项目信息"菜单中的报表。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用的报表插件和他们的配置。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--配置是否被继承到子POMs --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="邮件列表"><a href="#邮件列表" class="headerlink" title="邮件列表"></a>邮件列表</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目相关邮件列表信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送邮件的地址或链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">post</span>&gt;</span>kevin@123.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--订阅邮件的地址或链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>kevin@123.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--取消订阅邮件的地址或链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>kevin@123.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/xxxxxx/kevin/demo/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ciManagement-持续集成配置"><a href="#ciManagement-持续集成配置" class="headerlink" title="ciManagement 持续集成配置"></a>ciManagement 持续集成配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目持续集成信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模块被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="POM-主要配置结构"><a href="#POM-主要配置结构" class="headerlink" title="POM 主要配置结构"></a>POM 主要配置结构</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">project: modelVersion, artifactId, packing, version, name, url, description, inceptionYear</span><br><span class="line">|-- prerequisites: maven</span><br><span class="line">|-- *parent: artifactId, groupId, version, relativePath</span><br><span class="line">|-- *repositories: repository</span><br><span class="line">|                    |-- id, name, url, layout</span><br><span class="line">|                        release</span><br><span class="line">|                           |-- enabled, updatePolicy, checksumPolicy</span><br><span class="line">|                        snapshot</span><br><span class="line">|                           |-- enabled, updatePolicy, checksumPolicy</span><br><span class="line">|-- *pluginRepositories: pluginRepository（同repositories）</span><br><span class="line">|-- *dependencies: dependency</span><br><span class="line">|                    |-- artifactId, groupId, version, type, classifier, scope, systemPath, optional</span><br><span class="line">|                        executions</span><br><span class="line">|                           |-- exclusion</span><br><span class="line">|                                 |-- artifactId, groupId</span><br><span class="line">|-- *build: sourceDirectory, scriptCourceDirectory, testSourceDirectory, outputDirectory, testOutputDirectory,</span><br><span class="line">|           extensions, defaultGoal, directory, finalName, filters</span><br><span class="line">|              |-- groupId, artifactId, version</span><br><span class="line">|           resources</span><br><span class="line">|              |-- resource</span><br><span class="line">|                    |-- targetPath, filtering, directory, includes, excludes</span><br><span class="line">|           testResources</span><br><span class="line">|              |-- testResource</span><br><span class="line">|                    |-- targetPath, filtering, directory, includes, excludes</span><br><span class="line">|           pluginManagement</span><br><span class="line">|              |-- plugins</span><br><span class="line">|                    |-- plugin</span><br><span class="line">|                          |-- groupId, artifactId, version, extensions, inherited, configuration</span><br><span class="line">|                              executions</span><br><span class="line">|                                 |-- execution</span><br><span class="line">|                                     |-- id, phase, goals, inherited, configuration</span><br><span class="line">|                              dependencies（同project/dependencies）</span><br><span class="line">|           plugins（同pluginManagement/plugins）</span><br><span class="line">|-- *reporting: excludeDefaults, outputDirectory</span><br><span class="line">|               plugin</span><br><span class="line">|                 |-- groupId,artifactId, version, extensions, goals, inherited, configuration</span><br><span class="line">|                    reportSets</span><br><span class="line">|                      |-- reportSet</span><br><span class="line">|                           |-- id, configuration, inherited</span><br><span class="line">|-- *dependencyManagement: dependencie（同project/dependencies）</span><br><span class="line">|-- *distributionManagement: repository, downloadUrl, status</span><br><span class="line">|                               |-- uniqueVersion, id, name, url, layout</span><br><span class="line">|                            snaphotRepository</span><br><span class="line">|                               |-- uniqueVersion, id, name, url, layout</span><br><span class="line">|                            site</span><br><span class="line">|                               |-- id, name, url</span><br><span class="line">|                            relocation</span><br><span class="line">|                               |-- groupId, artifactId, version, message</span><br><span class="line">|-- *profiles: profile</span><br><span class="line">|                |-- id, activation, modules</span><br><span class="line">|                           |-- activeByDefault, jdk, property,</span><br><span class="line">|                               os</span><br><span class="line">|                                 |-- name, family, arch, version</span><br><span class="line">|                               file</span><br><span class="line">|                                 |-- exists, missing</span><br><span class="line">|                    build（同project/build）</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">|-- developers: developer</span><br><span class="line">|                |-- id, name, email, url, roles, organization, organizationUrl, properties, timezone</span><br><span class="line">|-- contributors: contributor</span><br><span class="line">|                |-- name, email, url, roles, organization, organizationUrl, properties, timezone</span><br><span class="line">|-- licenses: license</span><br><span class="line">|                |-- name, url, distribution, comments</span><br><span class="line">|-- scm: connection, developerConnection, tag, url</span><br><span class="line">|-- organization: name, url</span><br><span class="line">|-- mailingLists: mailingList</span><br><span class="line">|                      |-- name, post, subscribe, unsubscribe, archive</span><br><span class="line">|-- issueManagement: system, url</span><br><span class="line">|-- ciManagement: system, url, notifiers</span><br><span class="line">|                                 |-- type, sendOnError, sendOnFailure, sendOnSuccess, sendOnWarning, address, configuration</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖。&lt;br&gt;POM 中可以指定以项目依赖，插件，执行目标，项目构建 profile，项目版本，项目开发者列表，相关邮件列表信息。&lt;br&gt;所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="Maven" scheme="https://hyqskevin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 项目构建笔记</title>
    <link href="https://hyqskevin.github.io/2019/10/13/maven-lifecycle/"/>
    <id>https://hyqskevin.github.io/2019/10/13/maven-lifecycle/</id>
    <published>2019-10-13T12:46:08.000Z</published>
    <updated>2021-04-15T07:20:25.919Z</updated>
    
    <content type="html"><![CDATA[<p>Maven 可以统一集中管理所有的依赖包，并且能够自动解决重复和冲突问题。Maven 作为一个开放的架构，方便同第三方插件集成。</p><a id="more"></a><h2 id="Maven-配置文件"><a href="#Maven-配置文件" class="headerlink" title="Maven 配置文件"></a>Maven 配置文件</h2><p>构建配置文件可以用来设置或者覆盖 Maven 构建默认值，可以为不同的生产环境（Production）和开发（Development）环境定制构建方式。</p><div class="table-container"><table><thead><tr><th>类型</th><th>配置文件定义</th></tr></thead><tbody><tr><td>项目级（Per Project）</td><td>定义在项目的 POM 文件 pom.xml 中</td></tr><tr><td>用户级 （Per User）</td><td>定义在 Maven 的设置 xml 文件中 (%USER_HOME%/.m2/settings.xml)</td></tr><tr><td>全局（Global）</td><td>定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%/conf/settings.xml)</td></tr></tbody></table></div><h3 id="编写和激活配置文件"><a href="#编写和激活配置文件" class="headerlink" title="编写和激活配置文件"></a>编写和激活配置文件</h3><p>在 src/main/resources 文件夹下有三个配置，env.properties 为默认配置，env.test.properties 为测试配置文件，env.prod.properties 为生产配置。<br>配置文件在 pom.xml 文件中使用 activeProfiles 或者 profiles 元素指定，并且可以通过各种方式触发。</p><h4 id="1-配置文件中设置"><a href="#1-配置文件中设置" class="headerlink" title="1.配置文件中设置"></a>1.配置文件中设置</h4><p>可以使用 pom.xml 来定义不同的 profile，并在命令控制台中使用 maven 命令激活 profile。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认配置构建，开发和测试配置格式也相同， &lt;id&gt; 区分不同的 &lt;profiles&gt; 执行不同的 AntRun 任务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>normal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">echo</span>&gt;</span>Using env.properties<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">copy</span> <span class="attr">file</span>=<span class="string">"src/main/resources/env.properties"</span> <span class="attr">tofile</span>=<span class="string">"$&#123;project.build.outputDirectory&#125;/env.properties"</span> <span class="attr">overwrite</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-通过-maven-设置"><a href="#2-通过-maven-设置" class="headerlink" title="2.通过 maven 设置"></a>2.通过 maven 设置</h4><p>打开 %USER_HOME%/.m2 目录下的 settings.xml 文件配置 setting.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-基于环境变量设置"><a href="#3-基于环境变量设置" class="headerlink" title="3.基于环境变量设置"></a>3.基于环境变量设置</h4><p>在 pom.xml 里面的 <code>&lt;id&gt;</code> 为 test 的 <code>&lt;profile&gt;</code> 节点，加入 <code>&lt;activation&gt;</code> 节点</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-操作系统设置"><a href="#4-操作系统设置" class="headerlink" title="4.操作系统设置"></a>4.操作系统设置</h4><p>在 activation 元素里包含操作系统信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-文件的存在或者缺失时触发"><a href="#5-文件的存在或者缺失时触发" class="headerlink" title="5.文件的存在或者缺失时触发"></a>5.文件的存在或者缺失时触发</h4><p>在 activation 里设置缺失条件时触发配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">missing</span>&gt;</span>target/generated-sources/...<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven-生命周期"><a href="#maven-生命周期" class="headerlink" title="maven 生命周期"></a>maven 生命周期</h2><p>Maven 三个标准的生命周期：clean 项目清理的处理；default 项目部署的处理；site 项目站点文档创建的处理<br>在一个 Maven 生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行。</p><h3 id="1-clean"><a href="#1-clean" class="headerlink" title="1.clean"></a>1.clean</h3><p>pre-clean：执行一些需要在 clean 之前完成的工作<br>clean：移除所有上一次构建生成的文件<br>post-clean：执行一些需要在 clean 之后立刻完成的工作</p><p>目标在生命周期中执行</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pre-clean配置, clean, post-clean格式相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>id.pre-clean<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>pre-clean<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">echo</span>&gt;</span>pre-clean phase<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-default-build"><a href="#2-default-build" class="headerlink" title="2.default / build"></a>2.default / build</h3><p>Maven 的主要生命周期，被用于构建应用，包括 23 个构建阶段</p><div class="table-container"><table><thead><tr><th>生命周期阶段</th><th>描述</th></tr></thead><tbody><tr><td>validate（校验）</td><td>校验项目是否正确并且所有必要的信息可以完成项目的构建过程。</td></tr><tr><td>initialize（初始化）</td><td>初始化构建状态，比如设置属性值。</td></tr><tr><td>generate-sources（生成源代码）</td><td>生成包含在编译阶段中的任何源代码。</td></tr><tr><td>process-sources（处理源代码）</td><td>处理源代码，比如说，过滤任意值。</td></tr><tr><td>generate-resources（生成资源文件）</td><td>生成将会包含在项目包中的资源文件。</td></tr><tr><td>process-resources （处理资源文件）</td><td>复制和处理资源到目标目录，为打包阶段最好准备。</td></tr><tr><td>compile（编译）</td><td>编译项目的源代码。</td></tr><tr><td>process-classes（处理类文件）</td><td>处理编译生成的文件，比如说对 Java class 文件做字节码改善优化。</td></tr><tr><td>generate-test-sources（生成测试源代码）</td><td>生成包含在编译阶段中的任何测试源代码。</td></tr><tr><td>process-test-sources（处理测试源代码）</td><td>处理测试源代码，比如说，过滤任意值。</td></tr><tr><td>generate-test-resources（生成测试资源文件）</td><td>为测试创建资源文件。</td></tr><tr><td>process-test-resources（处理测试资源文件）</td><td>复制和处理测试资源到目标目录。</td></tr><tr><td>test-compile（编译测试源码）</td><td>编译测试源代码到测试目标目录.</td></tr><tr><td>process-test-classes（处理测试类文件）</td><td>处理测试源码编译生成的文件。</td></tr><tr><td>test（测试）</td><td>使用合适的单元测试框架运行测试（Juint 是其中之一）。</td></tr><tr><td>prepare-package（准备打包）</td><td>在实际打包之前，执行任何的必要的操作为打包做准备。</td></tr><tr><td>package（打包）</td><td>将编译后的代码打包成可分发格式的文件，比如 JAR、WAR 或者 EAR 文件。</td></tr><tr><td>pre-integration-test（集成测试前）</td><td>在执行集成测试前进行必要的动作。比如说，搭建需要的环境。</td></tr><tr><td>integration-test（集成测试）</td><td>处理和部署项目到可以运行集成测试环境中。</td></tr><tr><td>post-integration-test（集成测试后）</td><td>在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。</td></tr><tr><td>verify （验证）</td><td>运行任意的检查来验证项目包有效且达到质量标准。</td></tr><tr><td>install（安装）</td><td>安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。</td></tr><tr><td>deploy（部署）</td><td>将最终的项目包复制到远程仓库中与其他开发者和项目共享。</td></tr></tbody></table></div><p>添加执行的方法同 clean</p><h3 id="3-site"><a href="#3-site" class="headerlink" title="3.site"></a>3.site</h3><p>Maven Site 插件一般用来创建新的报告文档、部署站点等</p><p>pre-site：执行一些需要在生成站点文档之前完成的工作<br>site：生成项目的站点文档<br>post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>site-deploy：将生成的站点文档部署到特定的服务器上</p><p>添加执行的方法同 clean</p><h2 id="Maven-项目构建"><a href="#Maven-项目构建" class="headerlink" title="Maven 项目构建"></a>Maven 项目构建</h2><h3 id="命令行方法"><a href="#命令行方法" class="headerlink" title="命令行方法"></a>命令行方法</h3><p>Maven 使用原型 archetype 插件创建项目 <code>mvn archetype:generate</code><br>清理目标目录 <code>mvn clean</code><br>编译源代码 <code>mvn compile</code><br>运行测试案例 <code>mvn test</code><br>打包项目构建的输出为 jar（package）文件 <code>mvn clean package</code><br>安装 <code>mvn install</code><br>创建项目文档 <code>mvn site</code>，在 \target\site 文件夹。点击 index.html 查看文档<br>生成 API Doc 文档 <code>mvn javadoc:javadoc</code>，工程中自动产生 target\site\apidocs 目录，index.html 查看文档</p><h3 id="pom-xml-中添加插件"><a href="#pom-xml-中添加插件" class="headerlink" title="pom.xml 中添加插件"></a>pom.xml 中添加插件</h3><p>常用项目构建插件</p><div class="table-container"><table><thead><tr><th>插件名称</th><th>用途</th></tr></thead><tbody><tr><td>maven-clean-plugin</td><td>清理项目</td></tr><tr><td>maven-compile-plugin</td><td>编译项目</td></tr><tr><td>maven-deploy-pligin</td><td>发布项目</td></tr><tr><td>maven-site-plugin</td><td>生成站点</td></tr><tr><td>maven-surefire-plugin</td><td>运行测试</td></tr><tr><td>maven-jar-plugin</td><td>构建 jar 项目</td></tr><tr><td>maven-javadoc-plugin</td><td>生成 javadoc 文件</td></tr><tr><td>maven-surefire-report-plugin</td><td>生成测试报告</td></tr></tbody></table></div><p>用浏览器打开 <a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a> 可以查看插件的最新版本，单击 Search 按钮，然后在 pom.xml 中添加 build 标签，描述插件信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-xxx-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 设置包含的类 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>....<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 设置不执行的类 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>...<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven 可以统一集中管理所有的依赖包，并且能够自动解决重复和冲突问题。Maven 作为一个开放的架构，方便同第三方插件集成。&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="Maven" scheme="https://hyqskevin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>iview_note 学习笔记(3) —— 布局</title>
    <link href="https://hyqskevin.github.io/2019/09/20/iview-note-3/"/>
    <id>https://hyqskevin.github.io/2019/09/20/iview-note-3/</id>
    <published>2019-09-20T14:04:27.000Z</published>
    <updated>2021-04-15T07:13:33.009Z</updated>
    
    <content type="html"><![CDATA[<p>Loading…</p><p>iview 布局提供了比较便捷的网页架构排版，可以省去很多页面样式的调试。</p><p><a href="https://hyqskevin.github.io/2019/08/16/iview-note/">iview_note 学习笔记(1)</a><br><a href="https://hyqskevin.github.io/2020/08/23/iview-note-2/">iview_note 学习笔记(2)</a></p><a id="more"></a><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">List</span> <span class="attr">header</span>=<span class="string">"Header"</span> <span class="attr">footer</span>=<span class="string">"Footer"</span> <span class="attr">border</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListItem</span>&gt;</span>This is a piece of text.<span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--基础用法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListItemMeta</span></span></span><br><span class="line"><span class="tag"><span class="attr">avatar</span>=<span class="string">"https://dev-file.iviewui.com/userinfoPDvn9gKWYihR24SpgC319vXY8qniCqj4/avatar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">title</span>=<span class="string">"This is title"</span></span></span><br><span class="line"><span class="tag"><span class="attr">description</span>=<span class="string">"This is description."</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--带有图标、标题、描述的基础列表--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以带有列表操作组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>More<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以带有图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"extra"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="comment">&lt;!--额外内容展示在右侧--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">" "</span> <span class="attr">style</span>=<span class="string">"width: 280px"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置属性 size (small、large、default) 可以显示三种不同尺寸的列表。<br>设置 border 是否显示边框<br>设置 header 或 footer 来自定义列表头部或尾部。</p><ul><li><p>设置属性 item-layout 为 vertical 可实现竖排列表样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">List</span> <span class="attr">item-layout</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ListItemMeta</span></span></span><br><span class="line"><span class="tag"><span class="attr">:avatar</span>=<span class="string">"item.avatar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:title</span>=<span class="string">"item.title"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:description</span>=<span class="string">"item.description"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line">&#123;&#123; item.content &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-star-outline"</span> /&gt;</span> 123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-thumbs-up-outline"</span> /&gt;</span> 234<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-chatbubbles-outline"</span> /&gt;</span> 345<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">data: [</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">title: <span class="string">'This is title 1'</span>,</span></span><br><span class="line"><span class="javascript">description: <span class="string">'This is description.'</span>,</span></span><br><span class="line"><span class="javascript">avatar: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">content: <span class="string">'this is the content.'</span>,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">title: <span class="string">'This is title 2'</span>,</span></span><br><span class="line"><span class="javascript">description: <span class="string">'This is description.'</span>,</span></span><br><span class="line"><span class="javascript">avatar: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">content: <span class="string">'this is the content.'</span>,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">style</span>=<span class="string">"width:350px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-film-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">Classic film</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">slot</span>=<span class="string">"extra"</span> @<span class="attr">click.prevent</span>=<span class="string">"changeLimit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-loop-strong"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">Change</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in randomMovieList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"item.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data () &#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">         movieList: [</span></span><br><span class="line"><span class="undefined">             &#123;</span></span><br><span class="line"><span class="javascript">                 name: <span class="string">'The Shawshank Redemption'</span>,</span></span><br><span class="line"><span class="javascript">                 url: <span class="string">'https://'</span>,</span></span><br><span class="line"><span class="undefined">             &#125;,</span></span><br><span class="line"><span class="undefined">             &#123;</span></span><br><span class="line"><span class="javascript">                 name: <span class="string">'Leon:The Professional'</span>,</span></span><br><span class="line"><span class="javascript">                 url: <span class="string">'https://'</span>,</span></span><br><span class="line"><span class="undefined">             &#125;,</span></span><br><span class="line"><span class="undefined">             &#123;</span></span><br><span class="line"><span class="javascript">                 name: <span class="string">'Farewell to My Concubine'</span>,</span></span><br><span class="line"><span class="javascript">                 url: <span class="string">'https://'</span>,</span></span><br><span class="line"><span class="undefined">             &#125;</span></span><br><span class="line"><span class="undefined">         ],</span></span><br><span class="line"><span class="undefined">         randomMovieList: []</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置 title 和 extra 可以定义卡片标题和右上角额外内容</p><ul><li>Row 和 Col 格式实现并排表格</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Row</span> <span class="attr">style</span>=<span class="string">"width:350px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Col</span> <span class="attr">span</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>The standard card<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content of card<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Col</span> <span class="attr">span</span>=<span class="string">"11"</span> <span class="attr">offset</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Card</span> <span class="attr">dis-hover</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>Disable card with hover shadows<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content of card<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Collapse"><a href="#Collapse" class="headerlink" title="Collapse"></a>Collapse</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Collapse</span> <span class="attr">v-model</span>=<span class="string">"value1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Panel</span> <span class="attr">name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">name1</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>message1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Panel</span> <span class="attr">name</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">name2</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>message2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Collapse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">value1: <span class="string">'1'</span>,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置属性 accordion 开启手风琴模式，每次只能打开一个面板<br>设置属性 simple 可以显示为不带边框和背景色的简洁模式</p><h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>左右分割</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-split"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Split</span> <span class="attr">v-model</span>=<span class="string">"split1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"demo-split-pane"</span>&gt;</span>Left Pane<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"demo-split-pane"</span>&gt;</span>Right Pane<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Split</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">split1: <span class="number">0.5</span>, <span class="comment">// 控制分割的量</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>top button 可实现上下分割，也可以使用嵌套分割</p><h4 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Divider</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Divider</span> <span class="attr">dashed</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Divider</span>&gt;</span>With Text<span class="tag">&lt;/<span class="name">Divider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 type=”vertical” 设置为行内的垂直分割线<br>使用 orientation 设置分割线标题的位置，可选值为 left、right 或 center</p><h4 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h4><p><code>&lt;Cell title=&quot; &quot; /&gt;</code><br>可设置 name(标识) title(左侧标题) label(描述信息) extra(右侧额外内容) disabled(禁用) selscted(选中) to(跳转) 属性</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>Layout：布局容器，其下可嵌套 HeaderSiderContentFooter 或 Layout 本身，可以放在任何父容器中<br>Header：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 Layout 中<br>Sider：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 Layout 中<br>Content：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 Layout 中<br>Footer：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 Layout 中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Sider</span> <span class="attr">hide-trigger</span>&gt;</span>Sider<span class="tag">&lt;/<span class="name">Sider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h4><ul><li>LoadingBar</li><li>Badge</li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Loading…&lt;/p&gt;
&lt;p&gt;iview 布局提供了比较便捷的网页架构排版，可以省去很多页面样式的调试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hyqskevin.github.io/2019/08/16/iview-note/&quot;&gt;iview_note 学习笔记(1)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/08/23/iview-note-2/&quot;&gt;iview_note 学习笔记(2)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="iview" scheme="https://hyqskevin.github.io/tags/iview/"/>
    
  </entry>
  
  <entry>
    <title>iview_note 学习笔记(2) —— 表单</title>
    <link href="https://hyqskevin.github.io/2019/08/23/iview-note-2/"/>
    <id>https://hyqskevin.github.io/2019/08/23/iview-note-2/</id>
    <published>2019-08-23T12:42:10.000Z</published>
    <updated>2021-04-15T07:12:41.276Z</updated>
    
    <content type="html"><![CDATA[<p>iview 表单处理模板</p><p><a href="https://hyqskevin.github.io/2019/08/16/iview-note/">iview_note 学习笔记(1)</a><br><a href="https://hyqskevin.github.io/2020/09/20/iview-note-3/">iview_note 学习笔记(3)</a></p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"value"</span> <span class="attr">placeholder</span>=<span class="string">"Enter something..."</span> /&gt;</span> <span class="comment">&lt;!--使用 v-model 实现数据的双向绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"value1"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">placeholder</span>=<span class="string">"large size"</span> /&gt;</span> <span class="comment">&lt;!--设置size为large和small设置为大和小尺寸--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"value2"</span> <span class="attr">placeholder</span>=<span class="string">"Enter something..."</span> <span class="attr">clearable</span> /&gt;</span> <span class="comment">&lt;!--开启属性 clearable 可显示清空按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"value3"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> /&gt;</span> <span class="comment">&lt;!--设置最大字数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"value4"</span> <span class="attr">icon</span>=<span class="string">"ios-clock-outline"</span> /&gt;</span> <span class="comment">&lt;!--icon 属性可以在输入框右边加一个图标--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过设置 prefix 和 suffix 及同名 slot 设置前缀及后缀图标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">prefix</span>=<span class="string">"ios-contact"</span> <span class="attr">placeholder</span>=<span class="string">"Enter name"</span> <span class="attr">style</span>=<span class="string">"width: auto"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">suffix</span>=<span class="string">"ios-search"</span> <span class="attr">placeholder</span>=<span class="string">"Enter text"</span> <span class="attr">style</span>=<span class="string">"width: auto"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Enter name"</span> <span class="attr">style</span>=<span class="string">"width: auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-contact"</span> <span class="attr">slot</span>=<span class="string">"prefix"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Enter text"</span> <span class="attr">style</span>=<span class="string">"width: auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-search"</span> <span class="attr">slot</span>=<span class="string">"suffix"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">search</span> <span class="attr">placeholder</span>=<span class="string">"Enter something..."</span> /&gt;</span> <span class="comment">&lt;!--开启 search 属性--&gt;</span></span><br></pre></td></tr></table></figure><p>使用 v-model 实现数据的双向绑定<br>设置 size 为 large 和 small 设置为大和小尺寸<br>开启属性 clearable 可显示清空按<br>通过 icon 属性可以在输入框右边加一个图标，点击图标，会触发 on-click 事件</p><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Radio</span> <span class="attr">v-model</span>=<span class="string">"single"</span>&gt;</span>Radio<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组合使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">v-model</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Radio</span> <span class="attr">label</span>=<span class="string">"apple"</span>&gt;</span> <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-apple"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span> apple <span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Radio</span> <span class="attr">label</span>=<span class="string">"android"</span>&gt;</span> <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-android"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span> android <span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Radio</span> <span class="attr">label</span>=<span class="string">"windows"</span>&gt;</span> <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-windows"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span> windows <span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可设置 disabled 属性来禁用单选框<br>设置属性 size 为 large 或 small 将按钮样式设置为大和小尺寸<br>设置属性 type 为 button 来应用按钮的样式<br>设置 vertical 属性来垂直显示</p><h3 id="Checkbox"><a href="#Checkbox" class="headerlink" title="Checkbox"></a>Checkbox</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">v-model</span>=<span class="string">"single"</span>&gt;</span>Checkbox<span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组合使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CheckboxGroup</span> <span class="attr">v-model</span>=<span class="string">"social"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"twitter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"facebook"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-facebook"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"github"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"logo-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CheckboxGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相关属性同 Radio</p></blockquote><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i-switch</span> <span class="attr">v-model</span>=<span class="string">"switch1"</span> @<span class="attr">on-change</span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"open"</span>&gt;</span>开<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"close"</span>&gt;</span>关<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">i-switch</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以使用 disabled size 属性</p><p>可以使用 loading 标识开关操作仍在执行中</p></blockquote><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">:columns</span>=<span class="string">"columns1"</span> <span class="attr">:data</span>=<span class="string">"data1"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      columns1: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">type</span>: <span class="string">'selection'</span>, <span class="attr">width</span>: <span class="number">60</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">sortable</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">title</span>: <span class="string">'Name'</span>, <span class="attr">key</span>: <span class="string">'name'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">title</span>: <span class="string">'Age'</span>, <span class="attr">key</span>: <span class="string">'age'</span>, <span class="attr">filters</span>: [</span></span><br><span class="line"><span class="javascript">                            &#123; <span class="attr">label</span>: <span class="string">'Greater than 25'</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="javascript">                            &#123; <span class="attr">label</span>: <span class="string">'Less than 25'</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span></span><br><span class="line"><span class="undefined">                            ] &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">title</span>: <span class="string">'Address'</span>, <span class="attr">key</span>: <span class="string">'address'</span> &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      data1: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'name1'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">address</span>: <span class="string">' '</span>, <span class="attr">date</span>: <span class="string">'2019'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Jim Green'</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">address</span>: <span class="string">' '</span>, <span class="attr">date</span>: <span class="string">'2019'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Joe Black'</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">address</span>: <span class="string">' '</span>, <span class="attr">date</span>: <span class="string">'2019'</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定样式：</p><ul><li>通过属性 row-class-name 可以给某一行指定一个样式名称。</li><li>通过给列 columns 设置字段 className 可以给某一列指定一个样式。</li><li>通过给数据 data 设置字段 cellClassName 可以给任意一个单元格指定样式。</li></ul><p>指定数据设置：</p><ul><li>给 columns 数据设置一项，指定 type: ‘selection’，即可自动开启多选功能</li><li>给 columns 数据的项，设置 sortable: true，即可对该列数据进行排序</li><li>给 columns 数据的项，设置 filters，可进行筛选，filterMethod 传入两个参数 value 和 row</li></ul><blockquote><p>设置属性 height 给表格指定高度；数据 columns 的项设置 fixed 为 left 或 right，可以左右固定需要的列，设置属性 size 为 large 或 small 可以调整表格尺寸为大或小，默认不填或填写 default 为中</p><p>设置属性 stripe ，表格会间隔显示不同颜色</p><p>设置属性 border ，添加表格的边框线</p><p>通过设置属性 loading 可以让表格处于加载中状态，在异步请求数据、分页时建议使用</p><p>设置属性 highlight-row，可以选中某一行，调用 clearCurrentRow 方法可以手动清除选中项</p></blockquote><h4 id="自定义列模板"><a href="#自定义列模板" class="headerlink" title="自定义列模板"></a>自定义列模板</h4><p>使用 slot-scope 写法，在 columns 的某列声明 slot 后，就可以在 Table 的 slot 中使用 slot-scope<br>slot-scope 的参数有 3 个：当前行数据 row，当前列数据 column，当前行序号 index</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> <span class="attr">:columns</span>=<span class="string">"columns2"</span> <span class="attr">:data</span>=<span class="string">"data2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"&#123; row, index &#125;"</span> <span class="attr">slot</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"margin-right: 5px"</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">"show(index)"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">View</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"error"</span> <span class="attr">size</span>=<span class="string">"small"</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">columns2: [</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">title</span>: <span class="string">'Name'</span>, <span class="attr">key</span>: <span class="string">'name'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">title</span>: <span class="string">'Age'</span>, <span class="attr">key</span>: <span class="string">'age'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">title</span>: <span class="string">'Address'</span>, <span class="attr">key</span>: <span class="string">'address'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">title</span>: <span class="string">'Action'</span>, <span class="attr">slot</span>: <span class="string">'action'</span>, <span class="attr">width</span>: <span class="number">150</span>, <span class="attr">align</span>: <span class="string">'center'</span> &#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">data2: [</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">name</span>: <span class="string">'name2'</span>, <span class="attr">age</span>: <span class="string">'age2'</span>, <span class="attr">address</span>: <span class="string">'addr2'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">name</span>: <span class="string">'name3'</span>, <span class="attr">age</span>: <span class="string">'age3'</span>, <span class="attr">address</span>: <span class="string">'addr3'</span> &#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods: &#123;</span></span><br><span class="line"><span class="undefined">show(index) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$Modal.info(&#123;</span></span><br><span class="line"><span class="javascript">title: <span class="string">'User Info'</span>,</span></span><br><span class="line"><span class="javascript">content: <span class="string">`Name：<span class="subst">$&#123;<span class="keyword">this</span>.data2[index].name&#125;</span>&lt;br&gt;Age：<span class="subst">$&#123;<span class="keyword">this</span>.data2[index].age&#125;</span>&lt;br&gt;Address：<span class="subst">$&#123;<span class="keyword">this</span>.data2[index].address&#125;</span>`</span>,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">remove(index) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.data6.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://www.iviewui.com/components/table#API" target="_blank" rel="noopener">表格 API 详解:https://www.iviewui.com/components/table#API</a></li></ul><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"model1"</span> <span class="attr">style</span>=<span class="string">"width:200px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in cityList"</span> <span class="attr">:value</span>=<span class="string">"item.value"</span> <span class="attr">:key</span>=<span class="string">"item.value"</span>&gt;</span></span><br><span class="line">&#123;&#123; item.label &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">cityList: [</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'New York'</span>, <span class="attr">label</span>: <span class="string">'New York'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'London'</span>, <span class="attr">label</span>: <span class="string">'London'</span> &#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="javascript">model1: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过设置 size 属性为 large 和 small 将输入框设置为大和小尺寸</p><p>Select 设置属性 disabled 禁用整个选择器: Option 设置属性 disabled 可以禁用当前项，clearable 可以清空已选项，multiple 可以开启多选模式</p><p>使用 OptionGroup 可将选项进行分组<br><code>&lt;OptionGroup label=&quot;Cities&quot;&gt; &lt;Option &gt;&lt;/Option&gt;&lt;/OptionGroup&gt;</code></p><p>Option 自定义模板</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"New York"</span> <span class="attr">label</span>=<span class="string">"New York"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>New York<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float:right;color:#ccc"</span>&gt;</span>America<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value2"</span> <span class="attr">:step</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--step 控制滑动间隔--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value3"</span> <span class="attr">range</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--range 开启双滑块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value3"</span> <span class="attr">range</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--disabled 禁用滑块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value4"</span> <span class="attr">show-input</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--show-input 显示数字输入框--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 tip-format 可以自定义提示</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"value5"</span> <span class="attr">:tip-format</span>=<span class="string">"format"</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123; <span class="attr">value5</span>: <span class="number">25</span> &#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods: &#123;</span></span><br><span class="line"><span class="undefined">format(val) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="string">'Progress: '</span> + val + <span class="string">'%'</span></span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Date-Time-Picker"><a href="#Date-Time-Picker" class="headerlink" title="Date/Time Picker"></a>Date/Time Picker</h3><p>1.DatePicker</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DatePicker</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"Select date"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"width: 200px"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DatePicker</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"daterange"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placement</span>=<span class="string">"bottom-end"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"Select date"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"width: 200px"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置属性 type 为 year 或 month 可以使用选择年或月的功能，date 或 daterange 分别显示选择单日和选择范围类型<br>开启属性 multiple 后，可以多选，设置属性 format 可以改变日期的显示格式<br>设置属性 confirm，选择日期后，选择器不会主动关闭，需用户确认后才可关闭</p><p>2.TimePicker</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TimePicker</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"time"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"Select time"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"width: 168px"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">TimePicker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TimePicker</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"timerange"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placement</span>=<span class="string">"bottom-end"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"Select time"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"width: 168px"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">TimePicker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置类似 DatePicker</p><h3 id="Cascader"><a href="#Cascader" class="headerlink" title="Cascader"></a>Cascader</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Cascader</span> <span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">v-model</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cascader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--每项数据至少包含 value、label 两项，子集为 children--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">data() &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">value1: [],</span></span><br><span class="line"><span class="undefined">data: [</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">value: <span class="string">'data1'</span>,</span></span><br><span class="line"><span class="javascript">label: <span class="string">'name1'</span>,</span></span><br><span class="line"><span class="undefined">children: [</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'data1-1'</span>, <span class="attr">label</span>: <span class="string">'name1-1'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'data1-2'</span>, <span class="attr">label</span>: <span class="string">'name1-2'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'data1-3'</span>, <span class="attr">label</span>: <span class="string">'name1-3'</span> &#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">value: <span class="string">'data2'</span>,</span></span><br><span class="line"><span class="javascript">label: <span class="string">'name2'</span>,</span></span><br><span class="line"><span class="undefined">children: [</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'data2-1'</span>, <span class="attr">label</span>: <span class="string">'name2-1'</span> &#125;,</span></span><br><span class="line"><span class="javascript">&#123; <span class="attr">value</span>: <span class="string">'data2-2'</span>, <span class="attr">label</span>: <span class="string">'name2-2'</span> &#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定 value 默认值，组件会在初始化时选定数据<br>设置属性 trigger 为 hover，当鼠标悬停时就会展开子集<br>设置属性 change-on-select 点任何一级都可以做到选择即改变<br>使用属性 filterable 可直接搜索选项并选择</p><h3 id="Transfer"><a href="#Transfer" class="headerlink" title="Transfer"></a>Transfer</h3><h3 id="InputNumber"><a href="#InputNumber" class="headerlink" title="InputNumber"></a>InputNumber</h3><h3 id="Rate"><a href="#Rate" class="headerlink" title="Rate"></a>Rate</h3><h3 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h3><h3 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h3><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><h3 id="AutoComplete"><a href="#AutoComplete" class="headerlink" title="AutoComplete"></a>AutoComplete</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iview 表单处理模板&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hyqskevin.github.io/2019/08/16/iview-note/&quot;&gt;iview_note 学习笔记(1)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/09/20/iview-note-3/&quot;&gt;iview_note 学习笔记(3)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="iview" scheme="https://hyqskevin.github.io/tags/iview/"/>
    
  </entry>
  
  <entry>
    <title>imblearn API</title>
    <link href="https://hyqskevin.github.io/2019/08/20/imbalanced_data_analysis/"/>
    <id>https://hyqskevin.github.io/2019/08/20/imbalanced_data_analysis/</id>
    <published>2019-08-20T01:31:47.000Z</published>
    <updated>2020-11-19T06:55:50.457Z</updated>
    
    <content type="html"><![CDATA[<p>imblearn 是 python 的第三方库，用于处理不平衡数据(imbalanced data)的分类，一般分为降采样，过采样和综合采样</p><a id="more"></a><h2 id="imblearn-under-sampling-降采样"><a href="#imblearn-under-sampling-降采样" class="headerlink" title="imblearn.under_sampling 降采样"></a>imblearn.under_sampling 降采样</h2><p>使用<code>imblearn.under_sampling.prototype_generation</code>来生成新样本</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>sampling_strategy<br>return_indices<br>random_state<br>n_neighbors<br>n_seeds_S<br>kind_sel<br>n_jobs<br>ratio</p><h3 id="原型选择"><a href="#原型选择" class="headerlink" title="原型选择"></a>原型选择</h3><p><code>CondensedNearestNeighbour(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=None, n_seeds_S=1, n_jobs=1, ratio=None)</code><br>基于压缩最近邻方法执行欠采样<br><code>EditedNearestNeighbours(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=3, kind_sel=&#39;all&#39;, n_jobs=1, ratio=None)</code><br>基于编辑的最近邻居方法执行欠采样<br><code>RepeatedEditedNearestNeighbours(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=3, max_iter=100, kind_sel=&#39;all&#39;, n_jobs=1, ratio=None)</code><br>基于重复编辑的最近邻居方法执行欠采样<br><code>AllKNN(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=3, kind_sel=&#39;all&#39;, allow_minority=False, n_jobs=1, ratio=None)</code><br>基于 AllKNN 方法执行欠采样<br><code>InstanceHardnessThreshold(estimator=None, sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, cv=5, n_jobs=1, ratio=None)</code><br>根据实例硬度阈值执行欠采样<br><code>NearMiss(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, version=1, n_neighbors=3, n_neighbors_ver3=3, n_jobs=1, ratio=None)</code><br>基于 NearMiss 方法执行欠采样<br><code>NeighbourhoodCleaningRule(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=3, kind_sel=&#39;all&#39;, threshold_cleaning=0.5, n_jobs=1, ratio=None)</code><br>根据邻居清洁规则进行欠采样<br><code>OneSidedSelection(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_neighbors=None, n_seeds_S=1, n_jobs=1, ratio=None)</code><br>基于单侧选择方法执行欠采样<br><code>RandomUnderSampler(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, replacement=False, ratio=None)[source]</code><br>用于执行随机欠采样<br><code>TomekLinks(sampling_strategy=&#39;auto&#39;, return_indices=False, random_state=None, n_jobs=1, ratio=None)</code><br>通过删除 Tomek 的链接来执行欠采样 s</p><h2 id="imblearn-over-sampling-过采样"><a href="#imblearn-over-sampling-过采样" class="headerlink" title="imblearn.over_sampling 过采样"></a>imblearn.over_sampling 过采样</h2><p>ADASYN（[sampling_strategy，…]） 使用自适应合成（ADASYN）采样方法对不平衡数据集执行过采样。<br>BorderlineSMOTE（[…]） 使用 Borderline SMOTE 进行过采样。<br>KMeansSMOTE（[…]） 在使用 SMOTE 进行过采样之前应用 KMeans 聚类。<br>RandomOverSampler（[…]） 用于执行随机过采样的类。<br>SMOTE（[sampling_strategy，…]） 使用 SMOTE 执行过采样的类。<br>SMOTENC（categorical_features） 标称和连续的合成少数过采样技术（SMOTE-NC）。<br>SVMSMOTE（[sampling_strategy，…]） 使用 SVM-SMOTE 进行过采样。</p><h2 id="imblearn-combine-组合采样"><a href="#imblearn-combine-组合采样" class="headerlink" title="imblearn.combine 组合采样"></a>imblearn.combine 组合采样</h2><p>SMOTEENN（[sampling_strategy，…]） 使用 SMOTE 执行过采样并使用 ENN 进行清洁的类。<br>SMOTETomek（[sampling_strategy，…]） 使用 SMOTE 执行过采样并使用 Tomek 链接进行清洁的类。</p><h2 id="imblearn-ensemble-方法整合"><a href="#imblearn-ensemble-方法整合" class="headerlink" title="imblearn.ensemble 方法整合"></a>imblearn.ensemble 方法整合</h2><p>BalancedBaggingClassifier（[…]） Bagging 分级机，具 ​​ 有额外的平衡功能。<br>BalancedRandomForestClassifier（[…]） 平衡的随机森林分类器。<br>EasyEnsemble（** kwargs） 通过迭代应用随机欠采样来创建集合集。<br>EasyEnsembleClassifier（[…]） 一袋平衡的提升学习者也被称为 EasyEnsemble。<br>RUSBoostClassifier（[…]） 随机欠采样集成在 AdaBoost 分类器的学习中。</p><hr><p>参考资料：<br><a href="https://imbalanced-learn.org/en/stable/index.html" target="_blank" rel="noopener">https://imbalanced-learn.org/en/stable/index.html</a><br><a href="https://github.com/scikit-learn-contrib/imbalanced-learn" target="_blank" rel="noopener">https://github.com/scikit-learn-contrib/imbalanced-learn</a><br><a href="https://blog.csdn.net/qq_31813549/article/details/79964973" target="_blank" rel="noopener">https://blog.csdn.net/qq_31813549/article/details/79964973</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;imblearn 是 python 的第三方库，用于处理不平衡数据(imbalanced data)的分类，一般分为降采样，过采样和综合采样&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="python" scheme="https://hyqskevin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iview_note 学习笔记(1)</title>
    <link href="https://hyqskevin.github.io/2019/08/16/iview-note/"/>
    <id>https://hyqskevin.github.io/2019/08/16/iview-note/</id>
    <published>2019-08-16T11:22:53.000Z</published>
    <updated>2021-04-15T07:12:25.076Z</updated>
    
    <content type="html"><![CDATA[<p>iview 前端 UI 学习笔记和组件范例收集，iview 框架适合桌面端的页面设计，拥有比较全面的动态组件。<br>详细使用参考官网：<a href="https://www.iviewui.com/components/" target="_blank" rel="noopener">https://www.iviewui.com/components/</a></p><p><a href="https://hyqskevin.github.io/2019/08/23/iview-note-2/">iview_note 学习笔记(2)</a><br><a href="https://hyqskevin.github.io/2020/09/20/iview-note-3/">iview_note 学习笔记(3)</a></p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>建立 vue-cli，之后通过 vue 建立项目文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create new-project 或者直接 vue ui</span><br><span class="line">npm install iview@4.0.0 --save 或直接在vue cli界面中安装plugin</span><br></pre></td></tr></table></figure><p>或者在页面下直接进行导入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- import Vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//vuejs.org/js/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- import stylesheet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/iview/dist/styles/iview.css"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- import iView --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/iview/dist/iview.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入-iview"><a href="#引入-iview" class="headerlink" title="引入 iview"></a>引入 iview</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/iview.js'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'iview/dist/styles/iview.css'</span></span><br></pre></td></tr></table></figure><p>在文件 <code>.babelrc</code> 中配置可实现按需求引用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [[<span class="string">"import"</span>, &#123;</span><br><span class="line">    <span class="string">"libraryName"</span>: <span class="string">"iview"</span>,</span><br><span class="line">    <span class="string">"libraryDirectory"</span>: <span class="string">"src/components"</span></span><br><span class="line">  &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样按需引入组件，就可以减小体积了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button, Table &#125; <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line">Vue.component(<span class="string">'Button'</span>, Button)</span><br><span class="line">Vue.component(<span class="string">'Table'</span>, Table)</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><p>在非 template/render 模式下（例如使用 CDN 引用时），组件名要分隔，例如 DatePicker 必须要写成 date-picker。</p><p>以下组件，在非 template/render 模式下，需要加前缀 i-：</p><p>Button: i-button<br>Col: i-col<br>Table: i-table<br>Input: i-input<br>Form: i-form<br>Menu: i-menu<br>Select: i-select<br>Option: i-option<br>Progress: i-progress<br>Time: i-time</p><p>以下组件，在所有模式下，必须加前缀 i-，除非使用 <code>iview-loader</code>：</p><p>Switch: i-switch<br>Circle: i-circle</p><ul><li><code>iview-loader</code> 用于统一 View UI（iView） 标签书写规范，所有标签都可以使用首字母大写的形式，包括 Vue 限制的两个标签 Switch 和 Circle</li></ul><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><p>View UI（iView） 使用较为安全的蓝色作为主色调</p><p>辅助色：</p><blockquote><p>Info #2db7f5；Success #19be6b；Warning #ff9900；Error #ed4014</p></blockquote><p>中性色：</p><blockquote><p>标题 #17233d；正文 #515a6e；辅助/图标 #808695；失效 #c5c8ce；边框 #dcdee2；分割线 #e8eaec；背景 #f8f8f9</p></blockquote><p>字体：</p><blockquote><p>font-family: “Helvetica Neue”,Helvetica,”PingFang SC”,”Hiragino Sans GB”,”Microsoft YaHei”,”微软雅黑”,Arial,sans-serif;</p></blockquote><p>button 样式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Button&gt;Default&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="primary"&gt;Primary&lt;/</span>Button&gt;</span><br><span class="line">    &lt;Button type=<span class="string">"dashed"</span>&gt;Dashed&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="text"&gt;Text&lt;/</span>Button&gt;</span><br><span class="line">    &lt;Button type=<span class="string">"info"</span>&gt;Info&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="success"&gt;Success&lt;/</span>Button&gt;</span><br><span class="line">    &lt;Button type=<span class="string">"warning"</span>&gt;Warning&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="error"&gt;Error&lt;/</span>Button&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>设置内容反色和背景透明可以加入属性 ghost<br>设置查询 icon 可以在 button 中内嵌图标，可以设置形状 <code>&lt;Button type=&quot;primary&quot; shape=&quot;circle&quot; icon=&quot;ios-search&quot;&gt;</code><br>通过设置 size 为 large 和 small 将按钮设置为大和小尺寸<br>通过设置属性 long 可将按钮宽度设置为 100%<br>通过添加 disabled 属性可将按钮设置为不可用状态<br>通过添加 loading 属性可以让按钮处于加载中状态<br>通过设置 ButtonGroup 的属性 vertical，可以使按钮组纵向排列<br>通过设置 to 可以实现点击按钮直接跳转，支持传入 vue-router 对象<br>将多个 Button 放入 ButtonGroup 内，可实现按钮组合的效果</p></blockquote><p>Icon：</p><p>View UI（iView） 的图标使用开源项目 ionicons 3.x 版本</p><p>可设置图标的名称，大小，颜色或者自定义图标</p><p>图标使用可搜索<a href="https://www.iviewui.com/components/icon" target="_blank" rel="noopener">官方文档</a></p><h3 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h3><h4 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">mode</span>=<span class="string">"horizontal"</span> <span class="attr">:theme</span>=<span class="string">"theme1"</span> <span class="attr">active-name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span> <span class="attr">name</span>=<span class="string">"1"</span>&gt;</span> 内容1 <span class="tag">&lt;/<span class="name">menuitem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span> <span class="attr">name</span>=<span class="string">"2"</span>&gt;</span> 内容2 <span class="tag">&lt;/<span class="name">menuitem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Submenu</span> <span class="attr">name</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span> 内容3 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MenuGroup</span> <span class="attr">title</span>=<span class="string">"子标题"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span> <span class="attr">name</span>=<span class="string">"3-1"</span>&gt;</span>子内容1<span class="tag">&lt;/<span class="name">menuitem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span> <span class="attr">name</span>=<span class="string">"3-2"</span>&gt;</span>子内容2<span class="tag">&lt;/<span class="name">menuitem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span> <span class="attr">name</span>=<span class="string">"3-3"</span>&gt;</span>子内容3<span class="tag">&lt;/<span class="name">menuitem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MenuGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Submenu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Menu&gt;</code>：<br>mode 可选值为 horizontal（水平） 和 vertical（垂直）<br>theme 主题，可选值为 light、dark、primary<br>active-name 激活菜单的 name 值<br>open-names 展开的 Submenu 的 name 集合<br>accordion 是否开启手风琴模式，开启后每次至多展开一个子菜单</p><p><code>&lt;MenuItem&gt;</code>：需要写唯一标识 name<br>可使用 to 进行跳转链接</p><p><code>&lt;Submenu&gt;</code>：设置子菜单，需要写唯一标识 name<br><code>&lt;MenuGroup&gt;</code>：可以对标题进行分组</p><h4 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">value</span>=<span class="string">"name1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TabPane</span> <span class="attr">label</span>=<span class="string">"标签一"</span> <span class="attr">name</span>=<span class="string">"name1"</span>&gt;</span>标签一的内容<span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TabPane</span> <span class="attr">label</span>=<span class="string">"标签二"</span> <span class="attr">name</span>=<span class="string">"name2"</span>&gt;</span>标签二的内容<span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TabPane</span> <span class="attr">label</span>=<span class="string">"标签三"</span> <span class="attr">name</span>=<span class="string">"name3"</span>&gt;</span>标签三的内容<span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Tabs&gt;</code>：<br>type 设置页签的基本样式，可选值为 line 和 card<br>size 设置尺寸，可选值为 default 和 small，仅在 type=”line” 时有效<br>Tabs 中的 value 设置当前激活的 TabPane</p><p><code>&lt;TabPane&gt;</code>：<br>name 用于标识当前面板，对应 value，默认为其索引值<br>可设置属性 icon，可以显示一个图标<br>可使用 disabled 禁用选项卡<br>closable 设置是否可以关闭页签</p><h4 id="Dropdown"><a href="#Dropdown" class="headerlink" title="Dropdown"></a>Dropdown</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Dropdown</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">下拉菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DropdownMenu</span> <span class="attr">slot</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span>目录1<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DropdownItem</span> <span class="attr">disabled</span>&gt;</span>目录2<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DropdownItem</span> <span class="attr">divided</span>&gt;</span>目录3<span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">DropdownMenu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Dropdown&gt;</code>：<br>trigger 触发方式可选值为 hover（悬停）click（点击）contextMenu（右键）custom（自定义）<br>设置属性 placement 可以更改下拉菜单出现的方向,可选值为 top top-start top-end bottom bottom-start bottom-end left left-start left-end righ tright-start right-end</p><p><code>&lt;DropdownItem&gt;</code>：<br>disabled 设置禁用该项<br>divided 显示分割线<br>selected 标记该项为选中状态</p><h4 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"100"</span> /&gt;</span> <span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"100"</span> <span class="attr">show-sizer</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切换每页显示的数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"100"</span> <span class="attr">show-elevator</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--快速跳转到某一页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"100"</span> <span class="attr">show-total</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--显示总共多少条数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"40"</span> <span class="attr">size</span>=<span class="string">"small"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置size为small使用迷你型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:current</span>=<span class="string">"2"</span> <span class="attr">:total</span>=<span class="string">"50"</span> <span class="attr">simple</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置simple属性即可使用简洁版的分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">:total</span>=<span class="string">"100"</span> <span class="attr">prev-text</span>=<span class="string">"Previous"</span> <span class="attr">next-text</span>=<span class="string">"Next"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用属性 prev-text 和 next-text，替代图标显示为文字--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Breadcrumb"><a href="#Breadcrumb" class="headerlink" title="Breadcrumb"></a>Breadcrumb</h4><p>面包屑组件，可以作为字导航菜单使用，小巧精简。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Breadcrumb</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BreadcrumbItem</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-home-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span> Home</span><br><span class="line"><span class="tag">&lt;/<span class="name">BreadcrumbItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BreadcrumbItem</span>&gt;</span>Components<span class="tag">&lt;/<span class="name">BreadcrumbItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Breadcrumb</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Steps</span> <span class="attr">:current</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件会根据current自动判断各步骤状态--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Step</span> <span class="attr">title</span>=<span class="string">"已完成"</span> <span class="attr">content</span>=<span class="string">"这里是该步骤的描述信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">Step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Step</span> <span class="attr">title</span>=<span class="string">"进行中"</span> <span class="attr">content</span>=<span class="string">"这里是该步骤的描述信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">Step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Step</span> <span class="attr">title</span>=<span class="string">"待进行"</span> <span class="attr">content</span>=<span class="string">"这里是该步骤的描述信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">Step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Step</span> <span class="attr">title</span>=<span class="string">"待进行"</span> <span class="attr">content</span>=<span class="string">"这里是该步骤的描述信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">Step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Steps</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置属性 direction 为 vertical 在垂直方向展示<br>设置 Steps 的属性 status 为 error 指定当前错误步骤状态<br>设置属性 size 为 small 启用迷你版<br>通过设置 Step 的 icon 属性可以自定义图标</p><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>可以作为目录使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Anchor</span> <span class="attr">show-ink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#basic_usage"</span> <span class="attr">title</span>=<span class="string">"Basic Usage"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#static_position"</span> <span class="attr">title</span>=<span class="string">"Static Position"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#API"</span> <span class="attr">title</span>=<span class="string">"API"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#Anchor_props"</span> <span class="attr">title</span>=<span class="string">"Anchor props"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#Anchor_events"</span> <span class="attr">title</span>=<span class="string">"Anchor events"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AnchorLink</span> <span class="attr">href</span>=<span class="string">"#AnchorLink_props"</span> <span class="attr">title</span>=<span class="string">"AnchorLink props"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AnchorLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Anchor</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iview 前端 UI 学习笔记和组件范例收集，iview 框架适合桌面端的页面设计，拥有比较全面的动态组件。&lt;br&gt;详细使用参考官网：&lt;a href=&quot;https://www.iviewui.com/components/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iviewui.com/components/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hyqskevin.github.io/2019/08/23/iview-note-2/&quot;&gt;iview_note 学习笔记(2)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hyqskevin.github.io/2020/09/20/iview-note-3/&quot;&gt;iview_note 学习笔记(3)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="iview" scheme="https://hyqskevin.github.io/tags/iview/"/>
    
  </entry>
  
  <entry>
    <title>tip:决策树、随机森林结果可视化</title>
    <link href="https://hyqskevin.github.io/2019/08/10/decision-tree-visualization/"/>
    <id>https://hyqskevin.github.io/2019/08/10/decision-tree-visualization/</id>
    <published>2019-08-10T08:56:30.000Z</published>
    <updated>2020-11-19T06:55:59.831Z</updated>
    
    <content type="html"><![CDATA[<p>scikit-learn 决策树结果的可视化,方便观察模型，以及发现模型中的问题。<br>需要安装 <code>graphviz</code></p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装-graphviz"><a href="#安装-graphviz" class="headerlink" title="安装 graphviz"></a>安装 graphviz</h3><p>linux：<code>sudo apt install graphviz</code><br>windows: 去官网下载 <a href="http://www.graphviz.org/" target="_blank" rel="noopener">http://www.graphviz.org/</a></p><p>设置环境变量：将 graphviz 的 bin 目录加到 PATH</p><p>安装 python 库 graphviz，pydotplus：<br><code>pip install graphviz, pydotplus</code></p><h2 id="可视化模型"><a href="#可视化模型" class="headerlink" title="可视化模型"></a>可视化模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clf = DecisionTreeClassifier(max_depth=max_depth_val)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用graphviz提取出节点数据</span></span><br><span class="line">dot_data = tree.export_graphviz(clf, out_file=<span class="keyword">None</span>, feature_names=feature_names, class_names=target_names, filled=<span class="keyword">True</span>, rounded=<span class="keyword">True</span>, special_characters=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="生成可视化文件"><a href="#生成可视化文件" class="headerlink" title="生成可视化文件"></a>生成可视化文件</h2><p>可利用 pydotplus 生成 pdf 文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)</span><br><span class="line">graph.write_pdf(<span class="string">"dataset.pdf"</span>)</span><br></pre></td></tr></table></figure><p>也可以利用 Ipython 的图片显示功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)</span><br><span class="line">Image(graph.create_png())</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://blog.csdn.net/ydyang1126/article/details/78842952" target="_blank" rel="noopener">https://blog.csdn.net/ydyang1126/article/details/78842952</a><br><a href="https://github.com/ljpzzz/machinelearning/blob/master/classic-machine-learning/decision_tree_classifier.ipynb" target="_blank" rel="noopener">https://github.com/ljpzzz/machinelearning/blob/master/classic-machine-learning/decision_tree_classifier.ipynb</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scikit-learn 决策树结果的可视化,方便观察模型，以及发现模型中的问题。&lt;br&gt;需要安装 &lt;code&gt;graphviz&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://hyqskevin.github.io/categories/notes/"/>
    
    
      <category term="sklearn" scheme="https://hyqskevin.github.io/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>如何写日志</title>
    <link href="https://hyqskevin.github.io/2019/08/04/write_log/"/>
    <id>https://hyqskevin.github.io/2019/08/04/write_log/</id>
    <published>2019-08-04T08:56:30.000Z</published>
    <updated>2020-11-19T06:55:20.217Z</updated>
    
    <content type="html"><![CDATA[<p>在开发时学习书写日志的方法，方便做测试。<br>例举使用 python 和 java 上的日志记录<br>—loading…—</p><a id="more"></a><h2 id="常用日志框架"><a href="#常用日志框架" class="headerlink" title="常用日志框架"></a>常用日志框架</h2><p>log4j、Logging、commons-logging、slf4j、logback</p><p>Logging：Java 自带的日志工具类<br>Log4j：Apache 的一个开源日志框架，log4j 在 2015/08/05 这一天被 Apache 宣布停止维护了，用户需要切换到 Log4j2 上面去<br>commons-logging：日志的门面接口，它也是 apache 最早提供的日志门面接口，用户可以根据喜好选择不同的日志实现框架，而不必改动日志定义<br>Slf4j：Simple Logging Facade for Java，即简单日志门面接口<br>Logback：Slf4j 的原生实现框架，同样也是出自 Log4j 一个人之手，但拥有比 log4j 更多的优点、特性和更做强的性能，现在基本都用来代替 log4j 成为主流</p><ol><li>commons-loggin、slf4j 只是一种日志抽象门面，不是具体的日志框架。</li><li>log4j、logback 是具体的日志实现框架。</li><li>推荐使用 <code>slf4j + logback</code> 还有<code>slf4j + log4j</code> <code>commons-logging + log4j</code> 这两种日志组合框架。</li></ol><ul><li>Python 的 logging 模块提供了通用的日志系统。logging 模块与 log4j 的机制相同，只是具体的实现细节不同。</li></ul><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><div class="table-container"><table><thead><tr><th>日志级别(Java)</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>OFF</td><td style="text-align:left">关闭：最高级别，不输出日志。</td></tr><tr><td>FATAL</td><td style="text-align:left">致命：输出非常严重的可能会导致应用程序终止的错误。</td></tr><tr><td>ERROR</td><td style="text-align:left">错误：输出错误，但应用还能继续运行。</td></tr><tr><td>WARN</td><td style="text-align:left">警告：输出可能潜在的危险状况。</td></tr><tr><td>INFO</td><td style="text-align:left">信息：输出应用运行过程的详细信息。</td></tr><tr><td>DEBUG</td><td style="text-align:left">调试：输出更细致的对调试应用有用的信息。</td></tr><tr><td>TRACE</td><td style="text-align:left">跟踪：输出更细致的程序运行轨迹。</td></tr><tr><td>ALL</td><td style="text-align:left">所有：输出所有级别信息。</td></tr></tbody></table></div><p>Java：ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF<br>Python：NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</p><h2 id="Log4J-的运用"><a href="#Log4J-的运用" class="headerlink" title="Log4J 的运用"></a>Log4J 的运用</h2><p>Log4j 有三个主要的组件：Loggers(记录器)，Appenders(输出源)和 Layouts(布局)，这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出</p><h2 id="logging-的运用"><a href="#logging-的运用" class="headerlink" title="logging 的运用"></a>logging 的运用</h2><p>logging 模块提供 logger、handler、filter、formatter</p><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>记录获取到的数据，通过模块的 getLogger(name)函数获得</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)    <span class="comment"># 获取名为 test 的 logger</span></span><br><span class="line">logger.addHandler(handler)           <span class="comment"># 为 logger 添加 handler</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>setLevel(lvl)</td><td>设置日志级别</td></tr><tr><td>isEnabledFor(lvl)</td><td>检查某级别的日志是否启用</td></tr><tr><td>getEffectiveLevel()</td><td>获取实际的日志级别</td></tr><tr><td>debug/warning/info/error(msg, *args, **kwargs)</td><td>输出对应级别的日志</td></tr><tr><td>log(lvl, msg, *args, **kwargs)</td><td>输出指定级别的日志</td></tr><tr><td>addFilter(filt)/removeFilter(filt)</td><td>添加或删除指定的过滤器</td></tr><tr><td>addHandler(hdlr)/removeHandler(hdlr)</td><td>添加或删除指定的处理器</td></tr></tbody></table></div><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><p>用于指定日志向哪里输出（文件、终端等等）</p><p>常用的 Handler 有以下几种：</p><ul><li>StreamHandler， 用于向标准输入输出流等输出日志。</li><li>FileHandler，用于向文件输出日志。</li><li>NullHandler，什么也不输出。</li><li>RotatingFileHandler，向文件输出日志，如果文件到达指定大小，创建新文件并继续输出日志。</li></ul><p>相关 handler 类型参考<a href="https://docs.python.org/zh-cn/3/library/logging.handlers.html#module-logging.handlers" target="_blank" rel="noopener">python 官方文档</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler = logging.handlers.RotatingFileHandler(LOG_FILE,axBytes=<span class="number">1024</span>*<span class="number">1024</span>, backupCount = <span class="number">5</span>) <span class="comment"># 实例化 handler</span></span><br></pre></td></tr></table></figure><h3 id="formatter"><a href="#formatter" class="headerlink" title="formatter"></a>formatter</h3><p>指定日志记录输出的具体格式，采用的是 %(key)s 的形式<br>formatter 构造方法需要两个参数：消息的格式字符串和日期字符串</p><div class="table-container"><table><thead><tr><th>日志格式</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td>%(name)s</td><td style="text-align:left">生成日志的 Logger 名称</td></tr><tr><td>%(levelno)s</td><td style="text-align:left">数字形式的日志级别，包括 DEBUG, INFO, WARNING, ERROR 和 CRITICAL</td></tr><tr><td>%(levelname)s</td><td style="text-align:left">文本形式的日志级别，包括’DEBUG’、 ‘INFO’、 ‘WARNING’、 ‘ERROR’ 和’CRITICAL’</td></tr><tr><td>%(pathname)s</td><td style="text-align:left">输出该日志的语句所在源文件的完整路径（如果可用）</td></tr><tr><td>%(filename)s</td><td style="text-align:left">文件名</td></tr><tr><td>%(module)s</td><td style="text-align:left">输出该日志的语句所在的模块名</td></tr><tr><td>%(funcName)s</td><td style="text-align:left">调用日志输出函数的函数名</td></tr><tr><td>%(lineno)d</td><td style="text-align:left">调用日志输出函数的语句所在的代码行（如果可用）</td></tr><tr><td>%(created)f</td><td style="text-align:left">日志被创建的时间，UNIX 标准时间格式，表示从 1970-1-1 00:00:00 UTC 计算起的秒数</td></tr><tr><td>%(relativeCreated)d</td><td style="text-align:left">日志被创建时间与日志模块被加载时间的时间差，单位为毫秒</td></tr><tr><td>%(asctime)s</td><td style="text-align:left">日志创建时间。默认格式是 “2003-07-08 16:49:45,896”，逗号后为毫秒数</td></tr><tr><td>%(msecs)d</td><td style="text-align:left">毫秒级别的日志创建时间</td></tr><tr><td>%(thread)d</td><td style="text-align:left">线程 ID（如果可用）</td></tr><tr><td>%(threadName)s</td><td style="text-align:left">线程名称（如果可用）</td></tr><tr><td>%(process)d</td><td style="text-align:left">进程 ID（如果可用）</td></tr><tr><td>%(message)s</td><td style="text-align:left">日志信息</td></tr></tbody></table></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 日志样例</span><br><span class="line">2019-08-04 23:21:59,682 - log_test.py:16 - test - first info message</span><br><span class="line">2019-08-04 23:21:59,682 - log_test.py:17 - test - first debug message</span><br><span class="line"></span><br><span class="line"># 日志格式</span><br><span class="line">%(asctime)s - %(filename)s:%(lineno)s - %(name)s - %(message)s</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>提供更细粒度的日志过滤功能，用于决定哪些日志记录将会被输出</p><h4 id="config-模块配置日志"><a href="#config-模块配置日志" class="headerlink" title="config 模块配置日志"></a>config 模块配置日志</h4><p>logging.basicConfig()<br>logging</p><h3 id="python-日志示例"><a href="#python-日志示例" class="headerlink" title="python 日志示例"></a>python 日志示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">LOG_FILE = <span class="string">'test.log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化handler</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">Filehandler = logging.handlers.RotatingFileHandler(LOG_FILE,axBytes = <span class="number">1024</span>*<span class="number">1024</span>, backupCount = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化formatter</span></span><br><span class="line">fmt = <span class="string">'%(asctime)s - %(filename)s:%(lineno)s - %(name)s - %(message)s'</span></span><br><span class="line">formatter = logging.Formatter(fmt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 handler 添加 formatter</span></span><br><span class="line">consoleHandler.setFormatter(formatter)</span><br><span class="line">Filehandler。setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到logger中</span></span><br><span class="line">logger.addHandler(consolehandler)</span><br><span class="line">logger.addHandler(Filehandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印日志</span></span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.warning(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical meaasge'</span>)</span><br><span class="line">logger.debug(<span class="string">'%s 自定义信息'</span> % <span class="string">'define message'</span>)</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://blog.csdn.net/wud_jiyanhui/article/details/6213443" target="_blank" rel="noopener">https://blog.csdn.net/wud_jiyanhui/article/details/6213443</a><br><a href="https://blog.csdn.net/u011054333/article/details/69215660" target="_blank" rel="noopener">https://blog.csdn.net/u011054333/article/details/69215660</a><br><a href="https://help.aliyun.com/document_detail/28990.html?spm=a2c4g.11186623.6.746.7cfa66d8dwy2XO" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/28990.html?spm=a2c4g.11186623.6.746.7cfa66d8dwy2XO</a><br><a href="https://help.aliyun.com/document_detail/28989.html?spm=a2c4g.11186623.6.745.3ef949faCiQ7PW" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/28989.html?spm=a2c4g.11186623.6.745.3ef949faCiQ7PW</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发时学习书写日志的方法，方便做测试。&lt;br&gt;例举使用 python 和 java 上的日志记录&lt;br&gt;—loading…—&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="python" scheme="https://hyqskevin.github.io/tags/python/"/>
    
      <category term="log" scheme="https://hyqskevin.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>boosting</title>
    <link href="https://hyqskevin.github.io/2019/08/01/boosting/"/>
    <id>https://hyqskevin.github.io/2019/08/01/boosting/</id>
    <published>2019-08-01T01:56:30.000Z</published>
    <updated>2020-11-19T06:56:07.853Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xgboost.ai/" target="_blank" rel="noopener">XgBoost</a> 和 <a href="https://github.com/Microsoft/LightGBM" target="_blank" rel="noopener">LightGBM</a> 官方文档阅读和算法学习<br><code>*</code>号为未解释完全，具体使用方法请参考官方文档</p><a id="more"></a><h2 id="XgBoost"><a href="#XgBoost" class="headerlink" title="XgBoost"></a>XgBoost</h2><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>booster</code> [default= gbtree ]  基础模型类型，可选参数包括: gbtree、gblinear、dart，其中 gbtree、dart 为树模型、gblinear 为线性函数模型</p><p><code>eta</code> 学习率</p><p><code>tree_method</code> XGBoost 中树的构造算法，可选项包括: auto, exact, approx, hist, gpu_exact, gpu_hist</p><p><code>eval_metric</code> 依据目标函数选择评估指标<br>rmse: 根均方误差<br>mae: 平均绝对值误差<br>logloss: 负的似然函数<br>error: 二分类问题的分类错误率<br>merror: 多分类问题的分类错误率<br>mlogloss: 多分类问题的负似然函数<br>auc: IOC 曲线下面积<br>aucpr: PR 曲线下面积</p><p><code>updater</code> 线性模型的拟合算法<br>shotgun: 基于 shotgun 算法的坐标下降法<br>coord_descent: 普通的坐标下降法<br>feature_selector: 特征选择和排序算法</p><p><code>objective</code> 训练的模型类型和目标函数<br>reg:linear: 线性回归<br>reg:logistic: 逻辑回归<br>binary:logistic: 二分类问题, 输出概率值<br>binary:logitraw: 二分类问题, 输出得分值，需要通过 sigmoid 函数转化成概率值<br>binary:hinge: 二分类问题，使用铰链损失函数,输出 0 或 1，而不是概率值<br>count:poisson: 用于计数问题的泊松分布，输出泊松分布的均值。<br>survival:cox: Cox regression for right censored survival time data<br>multi:softmax: 多分类目标函数, 使用此目标函数，需要设置样本类别数据： num_class<br>multi:softprob: 同 softmax, 但是输出的结果为 ndata * nclass 维的向量，表示样本属于每个类别的概率</p><p><code>cyclic</code>: 循环变量特征<br><code>shuffle</code>: 类型与循环变量特征，但是在每次更新时都会随机打乱特征的顺序<br><code>random</code>: 随机(带替换)的坐标选择器<br><code>greedy</code>: 选择最大梯度的坐标<br><code>thrifty</code>: 近似 greedy 的坐标选择器<br><code>top_k</code>: greedy 算法和 thrifty 算法选择的最优特征数量，0 表示不限制。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><strong>1. 数据结构类，提供数据的构建和处理</strong><br><code>xgboost.DMatrix(data, label=None, missing=None, weight=None, silent=False, feature_names=None, feature_types=None)</code></p><p><code>data</code>数据源或文件路径<br><code>label</code>训练数据的标签<br><code>missing</code>缺省值表示字符，如果没填, 默认值为：np.nan<br><code>weight</code>每个样本的权重<br><code>silent</code>构造数据结构时是否显示日志<br><code>feature_names</code>各个特征的名称<br><code>feature_types</code>各个特征的数据类型<br><code>nthread</code> 加载数据开启的线程数</p><p><strong>2. 模型类，提供了一些基础的函数，如模型加载、保存、评估和预测等方法</strong><br><code>xgboost.Booster(params=None, cache=(), model_file=None)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load_model(fname)</span><br><span class="line">从文件或内存中加载模型，参数含义如下：</span><br><span class="line"></span><br><span class="line">fname (string <span class="keyword">or</span> a memory buffer) – 模型文件名称或内存缓存对象</span><br><span class="line"><span class="number">2.</span> save_model(fname)</span><br><span class="line">将模型保存到文件中，参数的含义如下：</span><br><span class="line"></span><br><span class="line">fname (string) – 输出文件的名称</span><br><span class="line"><span class="number">3.</span> eval(data, name, iteration)</span><br><span class="line">用给定的数据评估模型好坏，参数的含义如下:</span><br><span class="line"></span><br><span class="line">data (DMatrix) – 用于评估模型的数据</span><br><span class="line"></span><br><span class="line">name (str, 可选) – 用于评估模型的数据集名称</span><br><span class="line"></span><br><span class="line">iteration (int, 可选) –迭代次数</span><br></pre></td></tr></table></figure><p><strong>3. 对模型进行训练</strong><br><code>xgboost.train(params, dtrain, num_boost_round=10, evals=(), obj=None, feval=None, maximize=False, early_stopping_rounds=None, evals_result=None, verbose_eval=True, learning_rates=None, xgb_model=None, callbacks=None)</code></p><p><code>params</code>配置参数<br><code>dtrain</code>训练数据<br><code>num_boost_round</code>生成树的数量<br><code>evals</code>评估数据<br><code>obj</code>自定义的目标函数<br><code>feval</code>自定义的评价函数<br><code>maximize</code>是否最大化评价指标<br><code>early_stopping_rounds</code>错误率 early_stopping_rounds 轮未下降，则停止训练<br><code>evals_result</code>模型评估结果<br><code>learning_rates</code>学习率<br><code>xgb_model</code>在训练前加载之前训练的模型<br><code>callback</code>设置回调函数，比如重新设置学习率</p><p><strong>4. 对数据分类</strong><br><code>xgboost.XGBClassifier(max_depth=3, learning_rate=0.1, n_estimators=100, silent=True, objective=&#39;binary:logistic&#39;, nthread=-1, gamma=0, min_child_weight=1, max_delta_step=0, subsample=1, colsample_bytree=1, colsample_bylevel=1, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, base_score=0.5, seed=0, missing=None)</code></p><p><code>max_depth</code> 最大树深度<br><code>learning_rate</code> 学习率<br><code>n_estimators</code> 树的迭代次数<br><code>gamma</code> 节点分裂需要下降的最小损失<br><code>min_child_weight</code> 节点中样本的最小权重和<br><code>max_delta_step</code> 每轮允许叶子输出值的最大增量<br><code>subsample</code> 每轮训练使用的样本数量等于样本总数乘以采样率<br><code>colsample_bytree</code> 每轮训练使用的特征占比<br><code>colsample_bylevel</code> 每层训练使用的特征占比<br><code>reg_alpha</code> L1 正则<br><code>reg_lambda</code> L2 正则<br><code>scale_pos_weight</code> 用于控制正例和负例均衡的权重<br><code>base_score</code> 初始时各个样本的得分</p><p><strong>5. 数据拟合和预测</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xgboost.fit(X, y, sample_weight=<span class="keyword">None</span>, eval_set=<span class="keyword">None</span>, eval_metric=<span class="keyword">None</span>, early_stopping_rounds=<span class="keyword">None</span>, verbose=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># sample_weight：每个训练样本的权重</span></span><br><span class="line"><span class="comment"># eval_set：设置验证集</span></span><br><span class="line"><span class="comment"># eval_metric：验证的度量指标</span></span><br><span class="line"><span class="comment"># early_stopping_rounds` 指定连续多少轮未改善后停止</span></span><br><span class="line"></span><br><span class="line">xgboost.predict(data, output_margin=<span class="keyword">False</span>, ntree_limit=<span class="number">0</span>, pred_leaf=<span class="keyword">False</span>, pred_contribs=<span class="keyword">False</span>, approx_contribs=Flase, pred_interactions=<span class="keyword">False</span>, validate_features=Flase)`</span><br><span class="line"></span><br><span class="line"><span class="comment"># output_margin 是否输出原始未经转化的值</span></span><br><span class="line"><span class="comment"># ntree_limit 用于预测的树的数量，默认为0，代表使用所有树进行预测</span></span><br><span class="line"><span class="comment"># pred_leaf 指明每条数据分别落到每棵树的哪个叶子节点上</span></span><br><span class="line"><span class="comment"># pred_contribs 指明每个样本的每个特征对预测结果的贡献值</span></span><br><span class="line"><span class="comment"># approx_contribs 是否启用特征贡献大小的预估功能</span></span><br><span class="line"><span class="comment"># pred_interactions 指明两两特征间相互影响的SHAP值</span></span><br><span class="line"><span class="comment"># validate_features首先验证待预测的数据特征名称是否与模型中的特征名称相同，默认情况下，系统认为他们是相同的，不进行验证</span></span><br></pre></td></tr></table></figure><ul><li><code>class xgboost.XGBRegressor()</code>用于回归任务</li></ul><h3 id="XgBoost-示例"><a href="#XgBoost-示例" class="headerlink" title="XgBoost 示例"></a>XgBoost 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score</span><br><span class="line"></span><br><span class="line">train_data = pd.read_csv(<span class="string">'train.csv'</span>)   <span class="comment"># 读取数据</span></span><br><span class="line">y = train_data.pop(<span class="string">'30'</span>).values   <span class="comment"># 用pop方式将训练数据中的标签值y取出来，作为训练目标，这里的‘30’是标签的列名</span></span><br><span class="line">col = train_data.columns</span><br><span class="line">x = train_data[col].values  <span class="comment"># 剩下的列作为训练数据</span></span><br><span class="line">train_x, valid_x, train_y, valid_y = train_test_split(x, y, test_size=<span class="number">0.333</span>, random_state=<span class="number">0</span>)   <span class="comment"># 分训练集和验证集</span></span><br><span class="line"><span class="comment"># 这里不需要Dmatrix</span></span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],</span><br><span class="line">              <span class="string">'learning_rate'</span>: [<span class="number">0.01</span>, <span class="number">0.02</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.15</span>],</span><br><span class="line">              <span class="string">'n_estimators'</span>: [<span class="number">500</span>, <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>, <span class="number">5000</span>],</span><br><span class="line">              <span class="string">'min_child_weight'</span>: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">              <span class="string">'max_delta_step'</span>: [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">              <span class="string">'subsample'</span>: [<span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.85</span>, <span class="number">0.95</span>],</span><br><span class="line">              <span class="string">'colsample_bytree'</span>: [<span class="number">0.5</span>, <span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>],</span><br><span class="line">              <span class="string">'reg_alpha'</span>: [<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>],</span><br><span class="line">              <span class="string">'reg_lambda'</span>: [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1</span>],</span><br><span class="line">              <span class="string">'scale_pos_weight'</span>: [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">xlf = xgb.XGBClassifier(max_depth=<span class="number">10</span>,</span><br><span class="line">            learning_rate=<span class="number">0.01</span>,</span><br><span class="line">            n_estimators=<span class="number">2000</span>,</span><br><span class="line">            silent=<span class="keyword">True</span>,</span><br><span class="line">            objective=<span class="string">'binary:logistic'</span>,</span><br><span class="line">            nthread=<span class="number">-1</span>,</span><br><span class="line">            gamma=<span class="number">0</span>,</span><br><span class="line">            min_child_weight=<span class="number">1</span>,</span><br><span class="line">            max_delta_step=<span class="number">0</span>,</span><br><span class="line">            subsample=<span class="number">0.85</span>,</span><br><span class="line">            colsample_bytree=<span class="number">0.7</span>,</span><br><span class="line">            colsample_bylevel=<span class="number">1</span>,</span><br><span class="line">            reg_alpha=<span class="number">0</span>,</span><br><span class="line">            reg_lambda=<span class="number">1</span>,</span><br><span class="line">            scale_pos_weight=<span class="number">1</span>,</span><br><span class="line">            seed=<span class="number">1440</span>,</span><br><span class="line">            missing=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了gridsearch我们便不需要fit函数</span></span><br><span class="line">gsearch = GridSearchCV(xlf, param_grid=parameters, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">3</span>)</span><br><span class="line">gsearch.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Best score: %0.3f"</span> % gsearch.best_score_)</span><br><span class="line">print(<span class="string">"Best parameters set:"</span>)</span><br><span class="line">best_parameters = gsearch.best_estimator_.get_params()</span><br><span class="line"><span class="keyword">for</span> param_name <span class="keyword">in</span> sorted(parameters.keys()):</span><br><span class="line">    print(<span class="string">"\t%s: %r"</span> % (param_name, best_parameters[param_name]))</span><br></pre></td></tr></table></figure><h2 id="LightGBM"><a href="#LightGBM" class="headerlink" title="LightGBM"></a>LightGBM</h2><h3 id="paramenter-常用参数"><a href="#paramenter-常用参数" class="headerlink" title="paramenter 常用参数"></a>paramenter 常用参数</h3><p><strong>objective</strong>:<br>‘regression’,’regression_l2’,’mean_squared_error’,’mse’,’l2_root’,’root_mean_squred_error’,’rmse’： 表示回归任务，但是使用 L2 损失函数。默认为’regression’<br>‘binary’： 表示二分类任务，使用对数损失函数作为目标函数。<br>‘multiclass’： 表示多分类任务，使用 softmax 函数作为目标函数。必须设置 num_class 参数<br>‘multiclassova’,’multiclass_ova’,’ova’,’ovr’： 表示多分类任务，使用 one-vs-all 的二分类目标函数。必须设置 num_class 参数<br>‘regression_l1’,’mae’,’mean_absolute_error’： 表示回归任务，但是使用 L1 损失函数。<br>‘huber’： 表示回归任务，但是使用 huber 损失函数。<br>‘fair’： 表示回归任务，但是使用 fair 损失函数。<br>‘poisson’： 表示 Poisson 回归任务。<br>‘quantile’： 表示 quantile 回归任务。<br>‘quantile_l2’：表示 quantile 回归任务，但是使用了 L2 损失函数。<br>‘mape’,’mean_absolute_precentage_error’： 表示回归任务，但是使用 MAPE 损失函数<br>‘gamma’： 表示 gamma 回归任务。<br>‘tweedie’： 表示 tweedie 回归任务。<br>‘xentropy’,’cross_entropy’： 目标函数为交叉熵（同时具有可选择的线性权重）。要求标签是[0,1] 之间的数值。<br>‘xentlambda’,’cross_entropy_lambda’： 替代了参数化的 cross_entropy 。要求标签是[0,1] 之间的数值。<br>‘lambdarank’：表示排序任务。</p><p><strong>boosting_type</strong>: // 基学习器模型算法<br>‘gbdt’： 表示传统的梯度提升决策树。默认值为’gbdt’<br>‘rf’： 表示随机森林。<br>‘dart’： 表示带 dropout 的 gbdt<br>‘goss’：表示 Gradient-based One-Side Sampling 的 gbdt</p><p><strong>metric</strong>：//指定度量的指标<br>‘l1’ 或者 mean_absolute_error 或者 mae 或者 regression_l1： 表示绝对值损失<br>‘l2’ 或者 mean_squared_error 或者 mse 或者 regression_l2 或者 regression：表示平方损失<br>‘l2_root’ 或者 root_mean_squared_error 或者 rmse：表示开方损失<br>‘quantile’ 表示 Quantile 回归中的损失<br>‘mape’ 或者 ‘mean_absolute_percentage_error’ 表示 MAPE 损失<br>‘huber’ 表示 huber 损失<br>‘fair’ 表示 fair 损失<br>‘poisson’ 表示 poisson 回归的负对数似然<br>‘gamma’ 表示 gamma 回归的负对数似然<br>‘gamma_deviance’ 表示 gamma 回归的残差的方差<br>‘tweedie’ 表示 Tweedie 回归的负对数似然<br>‘ndcg’ 表示 NDCG<br>‘map’ 或者’mean_average_precision’ 表示平均的精度<br>‘auc’ 表示 AUC<br>‘binary_logloss’或者’binary’ 表示二类分类中的对数损失函数<br>‘binary_error’ 表示二类分类中的分类错误率<br>‘multi_logloss’或者 ‘multiclass’或者 ‘softmax’或者 ‘multiclassova’或者 ‘multiclass_ova’,或者’ova’或者 ‘ovr’ 表示多类分类中的对数损失函数<br>‘multi_error’ 表示多分类中的分类错误率<br>‘xentropy’或者’cross_entropy’ 表示交叉熵<br>‘xentlambda’ 或者’cross_entropy_lambda’ 表示 intensity 加权的交叉熵<br>‘kldiv’或者’kullback_leibler’ 表示 KL 散度</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>1. 数据结构类，提供数据的构建和处理</strong><br><code>lightgbm.Dataset(data, label=None, max_bin=None, reference=None, weight=None, group=None, init_score=None, silent=False, feature_name=&#39;auto&#39;, categorical_feature=&#39;auto&#39;, params=None, free_raw_data=True)</code></p><p><code>label</code> 指定数据的标签列<br><code>max_bin</code> 特征值最大分类数量<br><code>reference</code> 增加评估参照，评估模型时使用，reference=train<br><code>weight</code> 设置权重<br><code>group</code> 设置数据组的大小<br><code>init_score</code> 加入之前的分数<br><code>silent</code> 是否在训练过程中屏蔽输出<br><code>feature_name</code> 特征名字<br><code>categorical_feature</code>设置分类特征<br><code>free_raw_data</code> 创建完后释放数据</p><p><strong>2. 模型类，提供了一些基础的函数，如模型加载、保存、评估和预测等方法</strong><br><code>lightgbm.Booster(params=None, train_set=None, model_file=None, model_str=None, silent=False)</code><br><code>params</code> 一个字典或者 None，给出了 Booster 的参数。默认为 None<br><code>train_set</code> 一个 Dataset 对象或者 None，给出了训练集。 默认为 None<br><code>model_file</code> 一个字符串或者 None，给出了 model file 的路径。 默认为 None<br><code>silent</code> 一个布尔值，指示是否在构建过程中打印消息。默认为 False</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lightgbm.add_valid(data,name) <span class="comment"># 添加一个验证集。</span></span><br><span class="line">lightgbm.current_iteration() <span class="comment"># 返回当前的迭代的index（即迭代的编号）</span></span><br><span class="line">lightgbm.dump_model(num_iteration=<span class="number">-1</span>) <span class="comment"># dump 当前的Booster 对象为json 格式。</span></span><br><span class="line">lightgbm.eval(data,name,feval=<span class="keyword">None</span>) <span class="comment"># 对指定的数据集evaluate</span></span><br><span class="line">lightgbm.eval_train(feval=<span class="keyword">None</span>) <span class="comment"># 对训练集进行evaluate</span></span><br><span class="line">lightgbm.eval_valid(feval=<span class="keyword">None</span>) <span class="comment"># 对验证集进行evaluate</span></span><br><span class="line">lightgbm.feature_importance(importance_type=<span class="string">'split'</span>, iteration=<span class="number">-1</span>) <span class="comment"># 获取特征的importance</span></span><br><span class="line">lightgbm.feature_name() <span class="comment"># 获取每个特征的名字。</span></span><br><span class="line">lightgbm.free_dataset() <span class="comment"># 释放Booster 对象的数据集</span></span><br><span class="line">lightgbm.free_network() <span class="comment"># 释放Booster 对象的Network</span></span><br><span class="line">lightgbm.get_leaf_output(tree_id, leaf_id) <span class="comment"># 获取指定叶子的输出</span></span><br><span class="line">lightgbm.num_feature() <span class="comment"># 获取特征的数量（即由多少列特征）</span></span><br><span class="line">lightgbm.reset_parameter(params) <span class="comment">#重设Booster 的参数。</span></span><br><span class="line">lightgbm.rollback_one_iter() <span class="comment"># 将Booster 回滚一个迭代步</span></span><br><span class="line">lightgbm.save_model(filename,num_iteration=<span class="number">-1</span>) <span class="comment"># 保存Booster 对象到文件中。</span></span><br><span class="line">lightgbm.set_attr(**kwargs) <span class="comment"># 设置Booster 的属性。</span></span><br><span class="line">lightgbm.set_network(machines,local_listen_port=<span class="number">12400</span>,listen_time_out=<span class="number">120</span>,num_machines=<span class="number">1</span>) <span class="comment"># 配置网络</span></span><br><span class="line">lightgbm.set_train_data_name(name) <span class="comment"># 设置训练集的名字</span></span><br><span class="line">lightgbm.update(train_set=<span class="keyword">None</span>, fobj=<span class="keyword">None</span>) <span class="comment"># 更新一个迭代步</span></span><br></pre></td></tr></table></figure><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><strong>1. <code>lightgbm.train()</code>执行训练</strong></p><p><code>lightgbm.train(params, train_set, num_boost_round=100, valid_sets=None, valid_names=None, fobj=None, feval=None, init_model=None, feature_name=&#39;auto&#39;, categorical_feature=&#39;auto&#39;, early_stopping_rounds=None, evals_result=None, verbose_eval=True, learning_rates=None, keep_training_booster=False, callbacks=None)</code></p><p><code>params</code> 相关参数配置，另外导入字典<br><code>train_set</code> 训练数据<br><code>num_boost_round</code> boost 迭代次数<br><code>valid_sets</code>，<code>valid_names</code> 设置训练时用于评估的数据集 <em><br><code>fobj</code> 自定义目标函数 preds, train_data -&gt; grad,hess </em><br><code>feval</code> 自定义评估函数 preds, train<em>data -&gt; eval_name, eval_result, is_higher_better </em><br><code>init_model</code> 导入之前训练数据<br><code>feature_name</code> 指定特征名字，数据源为 pandas DataFrame 会使用里面的 column<em>names<br><code>categorical_feature</code> 指定分类特征<br><code>early_stopping_rounds</code> 指定连续多少轮未改善后停止<br><code>evals_result</code> 指定字典存储 valid_sets 中验证的结果 </em><br><code>verbose_eval</code> 设置打印评估的间隔，可设置每个提升阶段打印或间隔<code>verbose_eval</code>个阶段打印<br><code>learning_rates</code> 设置学习率<br><code>keep_training_booster</code> 设置训练得到的 booster 是否继续训练<br><code>callbacks</code> 设置每次迭代后需要执行的函数</p><p>最后返回 booster 实例</p><p><strong>2. <code>lightgbm.cv()</code> 执行交叉检验</strong></p><p><code>lightgbm.cv(params, train_set, num_boost_round=10, folds=None, nfold=5, stratified=True, shuffle=True, metrics=None, fobj=None, feval=None, init_model=None, feature_name=&#39;auto&#39;,categorical_feature=&#39;auto&#39;, early_stopping_rounds=None, fpreproc=None, verbose_eval=None, show_stdv=True, seed=0, callbacks=None)</code></p><p><code>folds</code>：一个生成器、一个迭代器、或者 None <em><br><code>nfold</code>：指定交叉检验的数量。默认为 5<br><code>stratified</code>：指示是否进行分层拆分<br><code>shuffle</code>：指示是否在拆分之前先混洗数据<br><code>metrics</code>：指定评估度量标准，在 params 中设置<br><code>fpreproc</code>：设置预处理函数，在训练开始之前进行 </em><br><code>show_stdv</code>：在训练过程中展示标准差信息<br><code>seed</code>：一个整数，给出了生成 fold 的随机数种子 *</p><p>最后以字典的形式返回检验结果的均值和标准差</p><h3 id="scikit-learn-API"><a href="#scikit-learn-API" class="headerlink" title="scikit-learn API"></a>scikit-learn API</h3><p><strong>1. LGBMMOdel</strong><br>实现 lightgbm 在 scikir-learn 中的接口，详见分类和回归任务</p><p><strong>2. LGBMClassifier: LGBMModel 的子类，用于分类任务</strong></p><p><code>lightgbm.LGBMClassifier(boosting_type=&#39;gbdt&#39;, num_leaves=31, max_depth=-1, learning_rate=0.1, n_estimators=10, max_bin=255, ubsample_for_bin=200000, objective=None, min_split_gain=0.0, in_child_weight=0.001, min_child_samples=20, subsample=1.0, subsample_freq=1, colsample_bytree=1.0, reg_alpha=0.0, reg_lambda=0.0, random_state=None, n_jobs=-1, silent=True, **kwargs)</code></p><p><code>boosting_type</code>： 指定学习器的算法’gbdt, rf, dart, goss’<br><code>num_leaves</code>：一棵树上的叶子数<br><code>max_depth</code>：树模型的最大深度<br><code>learning_rate</code>：学习率<br><code>n_estimators</code>：提升树的数量<br><code>max_bin</code>： 每个特征的最大分支数量<br><code>class_weight</code>：给出了每个类别的权重占比<br><code>subsample_for_bin</code>：构建直方图的样本的数量 <em><br><code>objective</code>：问题类型以及对应的目标函数，对于 LGBMRegressor 为’regression’；对于 LGBMClassifier 为’binary’ 或者’multiclass’；对于 LGBMRanker 为’lambdarank’<br><code>min_split_gain</code>：执行切分的最小增益<br><code>min_child_weight</code>：一个叶子节点上的最小权重之和，默认为 1e-3<br><code>min_child_samples</code>： 一个叶子节点上包含的最少样本数量<br><code>subsample</code>： 表示训练样本的采样比例，取值范围为[0.0,1.0]。如果小于 1.0，则 lightgbm 会在每次迭代中随机选择部分样本来训练（非重复采样）<br><code>subsample_freq</code>：表示训练样本的采样频率<br><code>colsample_bytree</code>：表示特征的采样比例，取值范围为[0.0,1.0]。如果小于 1.0，则 lightgbm 会在每次迭代中随机选择部分特征<br><code>reg_alpha</code>：L1 正则化系数<br><code>reg_lambda</code>：L2 正则化系数<br><code>random_state</code>：随机数种子 </em><br><code>n_jobs</code>：并行线程数量<br><code>silent</code>：是否在训练过程中屏蔽输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line">gbm = lgb.LGBMClassifier()</span><br><span class="line">gbm.n_features_：<span class="comment"># 给出了特征的数量</span></span><br><span class="line">gbm.classes_：<span class="comment"># 样本的标签</span></span><br><span class="line">gbm.n_classes_：<span class="comment"># 类别的数量</span></span><br><span class="line">gbm.best_score_：<span class="comment"># 训练完毕模型的最好的score</span></span><br><span class="line">gbm.best_iteration_：<span class="comment"># 训练完毕模型的最好的迭代数</span></span><br><span class="line">gbm.objective_：<span class="comment"># 训练模型的目标函数</span></span><br><span class="line">gbm.booster_：<span class="comment"># 底层的Booster 对象</span></span><br><span class="line">gbm.evals_result_：<span class="comment"># 模型评估结果</span></span><br><span class="line">gbm.feature_importances_： <span class="comment"># 特征的重要性</span></span><br></pre></td></tr></table></figure><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gbm.fit(X, y, sample_weight=<span class="keyword">None</span>, init_score=<span class="keyword">None</span>, eval_set=<span class="keyword">None</span>, eval_names=<span class="keyword">None</span>, eval_sample_weight=<span class="keyword">None</span>, eval_init_score=<span class="keyword">None</span>, eval_metric=<span class="string">'logloss'</span>, early_stopping_rounds=<span class="keyword">None</span>, verbose=<span class="keyword">True</span>, feature_name=<span class="string">'auto'</span>, categorical_feature=<span class="string">'auto'</span>, callbacks=<span class="keyword">None</span>)`</span><br><span class="line"><span class="comment"># sample_weight：每个训练样本的权重</span></span><br><span class="line"><span class="comment"># init_score：每个训练样本的初始分数</span></span><br><span class="line"><span class="comment"># group：每个训练样本的分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval_set：设置验证集</span></span><br><span class="line"><span class="comment"># eval_names：设置验证集的名字</span></span><br><span class="line"><span class="comment"># eval_sample_weight：验证集中每个样本的权重</span></span><br><span class="line"><span class="comment"># eval_init_score：每个验证集中，每个样本的init score</span></span><br><span class="line"><span class="comment"># eval_group：每个验证集中，每个样本的分组</span></span><br><span class="line"><span class="comment"># eval_metric：验证的方法</span></span><br><span class="line"></span><br><span class="line">gbm.predict(data, num_iteration=<span class="number">-1</span>, raw_score=<span class="keyword">False</span>, pred_leaf=<span class="keyword">False</span>, pred_contrib=<span class="keyword">False</span>, data_has_header=<span class="keyword">False</span>, is_reshape=<span class="keyword">True</span>, pred_parameter=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># num_iteration`：设置在预测时，使用多少个子树</span></span><br><span class="line"><span class="comment"># raw_score`：是否输出raw score</span></span><br><span class="line"><span class="comment"># pred_leaf： 输出每个样本在每个子树的哪个叶子上</span></span><br><span class="line"><span class="comment"># pred_contrib：输出每个特征对每个样本预测结果的贡献程度</span></span><br><span class="line"><span class="comment"># data_has_header：指示数据集是否含有标题</span></span><br><span class="line"><span class="comment"># is_reshape：是否reshape</span></span><br><span class="line"><span class="comment"># pred_parameter：给出其它的参数</span></span><br><span class="line"></span><br><span class="line">gbm.predict_proba(X, raw_score=<span class="keyword">False</span>, num_iteration=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>LGBMRegressor 是 LGBMModel 的子类，它用于回归任务</li><li>LGBMRanker 是 LGBMModel 的子类，它用于排序任务，详见排序学习算法</li></ul><h3 id="绘图-API"><a href="#绘图-API" class="headerlink" title="绘图 API"></a>绘图 API</h3><h3 id="booster-API"><a href="#booster-API" class="headerlink" title="booster API"></a>booster API</h3><h3 id="LightGBM-示例"><a href="#LightGBM-示例" class="headerlink" title="LightGBM 示例"></a>LightGBM 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line"><span class="keyword">from</span> sklearn.grid_search <span class="keyword">import</span> GridSearchCV  <span class="comment"># Perforing grid search</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">train_data = pd.read_csv(<span class="string">'train.csv'</span>)   <span class="comment"># 读取数据</span></span><br><span class="line">y = train_data.pop(<span class="string">'30'</span>).values   <span class="comment"># 用pop方式将训练数据中的标签值y取出来，作为训练目标，这里的‘30’是标签的列名</span></span><br><span class="line">col = train_data.columns</span><br><span class="line">x = train_data[col].values  <span class="comment"># 剩下的列作为训练数据</span></span><br><span class="line">train_x, valid_x, train_y, valid_y = train_test_split(x, y, test_size=<span class="number">0.333</span>, random_state=<span class="number">0</span>)   <span class="comment"># 分训练集和验证集</span></span><br><span class="line">train = lgb.Dataset(train_x, train_y)</span><br><span class="line">valid = lgb.Dataset(valid_x, valid_y, reference=train)</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>],</span><br><span class="line">              <span class="string">'learning_rate'</span>: [<span class="number">0.01</span>, <span class="number">0.02</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.15</span>],</span><br><span class="line">              <span class="string">'feature_fraction'</span>: [<span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">0.95</span>],</span><br><span class="line">              <span class="string">'bagging_fraction'</span>: [<span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">0.95</span>],</span><br><span class="line">              <span class="string">'bagging_freq'</span>: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>],</span><br><span class="line">              <span class="string">'reg_alpha'</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.5</span>, <span class="number">0.6</span>],</span><br><span class="line">              <span class="string">'reg_lambda'</span>: [<span class="number">0</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">35</span>, <span class="number">40</span>],</span><br><span class="line">              <span class="string">'cat_smooth'</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">35</span>]</span><br><span class="line">&#125;</span><br><span class="line">gbm = lgb.LGBMClassifier(boosting_type=<span class="string">'gbdt'</span>,</span><br><span class="line">                         objective = <span class="string">'binary'</span>,</span><br><span class="line">                         metric = <span class="string">'auc'</span>,</span><br><span class="line">                         verbose = <span class="number">0</span>,</span><br><span class="line">                         learning_rate = <span class="number">0.01</span>,</span><br><span class="line">                         num_leaves = <span class="number">35</span>,</span><br><span class="line">                         feature_fraction=<span class="number">0.8</span>,</span><br><span class="line">                         bagging_fraction= <span class="number">0.9</span>,</span><br><span class="line">                         bagging_freq= <span class="number">8</span>,</span><br><span class="line">                         reg_alpha= <span class="number">0.6</span>,</span><br><span class="line">                         reg_lambda= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">gsearch = GridSearchCV(gbm, param_grid=parameters, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">3</span>)</span><br><span class="line">gsearch.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Best score: %0.3f"</span> % gsearch.best_score_)</span><br><span class="line">print(<span class="string">"Best parameters set:"</span>)</span><br><span class="line">best_parameters = gsearch.best_estimator_.get_params()</span><br><span class="line"><span class="keyword">for</span> param_name <span class="keyword">in</span> sorted(parameters.keys()):</span><br><span class="line">    print(<span class="string">"\t%s: %r"</span> % (param_name, best_parameters[param_name]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xgboost.ai/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XgBoost&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Microsoft/LightGBM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LightGBM&lt;/a&gt; 官方文档阅读和算法学习&lt;br&gt;&lt;code&gt;*&lt;/code&gt;号为未解释完全，具体使用方法请参考官方文档&lt;/p&gt;
    
    </summary>
    
      <category term="study" scheme="https://hyqskevin.github.io/categories/study/"/>
    
    
      <category term="boosting" scheme="https://hyqskevin.github.io/tags/boosting/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn 文档学习笔记(1)</title>
    <link href="https://hyqskevin.github.io/2019/07/30/scikit-learn-note/"/>
    <id>https://hyqskevin.github.io/2019/07/30/scikit-learn-note/</id>
    <published>2019-07-30T01:31:47.000Z</published>
    <updated>2020-11-19T06:55:33.582Z</updated>
    
    <content type="html"><![CDATA[<p><strong>—loading …—</strong><br>scikit-learn 基于 Python 语言,建立在 NumPy ，SciPy 和 matplotlib 上,是简单高效的数据挖掘和数据分析工具<br>文章记录 scikit-learn API 的使用方法，包括监督学习、无监督学习，模型的选择和评估，数据集的加载和转换<br>学习笔记(1) 为监督学习的内容，解决回归和分类问题。包括线性回归，逻辑回归，梯度下降，最近邻，贝叶斯，决策树，支持向量机，集成方法，半监督学习等<br>API 只给出函数结构，参数具体使用参考<a href="https://scikit-learn.org/stable/user_guide.html" target="_blank" rel="noopener">scikit-learn 官方文档</a></p><a id="more"></a><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><h3 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h3><p>目标值 y 是输入变量 x 的线性组合 $y(w,x) = w_0 +w_1x_1 + … + w_px_p$ 其中 w 为系数(coef) $w_0$ 为截距(intercept)。</p><p><strong>1. 普通最小二乘法 LinearRegression</strong><br>拟合一个带有系数 $w = (w_1, …, w_p)$ 的线性模型，使得数据集实际观测数据和预测数据（估计值）之间的残差平方和最小。<br>$\underset{w}{min\,} {|| X w - y||_2}^2$</p><p><code>sklearn.linear_model.LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=None)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">reg = LinearRegression().fit(X,y) <span class="comment"># 模型拟合</span></span><br><span class="line">reg.cof_  <span class="comment"># 得到系数矩阵</span></span><br><span class="line">reg.intercept_ <span class="comment"># 得到截距矩阵</span></span><br><span class="line">reg.score(X,y) <span class="comment"># 误差</span></span><br><span class="line">reg.predict(X) <span class="comment"># 预测</span></span><br></pre></td></tr></table></figure><p><strong>2. 岭回归 Ridge</strong><br>回归通过对系数的大小<strong>施加惩罚</strong>来解决普通最小二乘法的一些问题。 岭系数最小化的是带罚项的残差平方和。<br>$\underset{w}{min\,} {||X w - y||_2^2 + \alpha ||w||_2^2}$，其中$\alpha \geq 0$ 是控制系数收缩量的复杂性参数(超参数)</p><p><code>sklearn.linear_model.Ridge(alpha=1.0, fit_intercept=True, normalize=False, copy_X=True, max_iter=None, tol=0.001, solver=’auto’, random_state=None)</code></p><p>// alpha 可以设超参数大小<br>// tol 设置迭代最小边界<br>// solver : {‘auto’, ‘svd’, ‘cholesky’, ‘lsqr’, ‘sparse_cg’, ‘sag’, ‘saga’} 设置求解器，拟合数据时使用的算法</p><ul><li><code>sklearn.linear_model.RidgeCV( )</code> 内置对$\alpha$的交叉验证实现岭回归</li></ul><p><strong>3. 套索回归 Lasso</strong><br>用于拟合<strong>稀疏系数</strong>的线性模型，使用了 coordinate descent （坐标下降算法）来拟合系数，罚项 为 L1 范数。<br>$\underset{w}{min\,} { \frac{1}{2n_{samples}} ||X w - y||_2 ^ 2 + \alpha ||w||_1}$</p><p><code>sklearn.linear_model.Lasso(alpha=1.0, fit_intercept=True, normalize=False, precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, random_state=None, selection=’cyclic’)</code></p><ul><li><code>sklearn.linear_model.LassoCV()</code> // 对超参数$\alpha$采用交叉验证</li><li><code>sklearn.linear_model.LassoLars()</code> // 采用的是最小角回归法，而不是坐标下降法进行优化</li><li><code>sklearn.linear_model.LassoLarsCV()</code> //同时采用不同的验证和优化方法</li><li><p><code>sklearn.linear_model.LassoLarsIC()</code> //对超参数$\alpha$采用 Akaike 信息准则(AIC)和贝叶斯信息准则(BIC),需要假设模型是正确的，对大样本（渐近结果）进行导出</p></li><li><p>LassoLarsCV 在寻找 $\alpha$ 参数值上更具有优势，而且如果样本数量比特征数量少得多时，通常 LassoLarsCV 比 LassoCV 要快</p></li></ul><p><strong>4. 弹性网络 ElasticNet</strong><br>Lasso 和 Ridge 结合，对普通的线性回归做了正则化，但是它的损失函数既不全是 L1 的正则化，也不全是 L2 的正则化，而是用一个权重参数 ρ 来平衡 L1 和 L2 正则化的比重<br>适合只有少量参数是非零稀疏的模型<br>$\underset{w}{min\,} { \frac{1}{2n_{samples}} ||X w - y||_2 ^ 2 + \alpha \rho ||w||_1 +\frac{\alpha(1-\rho)}{2} ||w||_2 ^ 2}$</p><p><code>sklearn.linear_model.ElasticNet(alpha=1.0, l1_ratio=0.5, fit_intercept=True, normalize=False, precompute=False, max_iter=1000, copy_X=True, tol=0.0001, warm_start=False, positive=False, random_state=None, selection=’cyclic’)</code></p><ul><li><code>ElasticNetCV()</code> 可以通过交叉验证来设置参数 $\alpha$ 和 $\rho$</li></ul><p><strong>5. Multitask 多任务</strong><br>可以实现多元回归稀疏模型的预测，即多个线性模型共同拟合<br>有<code>MultiTaskLasso()</code>,<code>MultiTaskLassoCV()</code>,<code>MultiTaskElasticNet()</code>,<code>MultiTaskElasticNetCV()</code></p><p><strong>6. 正交匹配追踪法（OMP）</strong><br><code>OrthogonalMatchingPursuit( )</code><br><code>OrthogonalMatchingPursuitCV( )</code></p><p><strong>7. 贝叶斯回归</strong></p><p><strong>8. 稳健回归</strong></p><p><strong>9. 多项式回归</strong></p><h3 id="logistic-线性分类模型"><a href="#logistic-线性分类模型" class="headerlink" title="logistic 线性分类模型"></a>logistic 线性分类模型</h3><p>解决分类问题的线性模型，将单次实验的结果输出为概率进行分类<br>$C \sum_{i=1}^n \log(\exp(- y_i (X_i^T w + c)) + 1) $<br>可以选择 L1，L2 或 Elastic-Net 正则化进行约束</p><p><code>sklearn.linear_model.LogisticRegression(penalty=’l2’, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver=’warn’, max_iter=100, multi_class=’warn’, verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)</code><br>// penalty 参数可以设置正则化参数<br>// C 用$1/{\lambda}$表示的正则化强度参数<br>// solver : str, {‘newton-cg’, ‘lbfgs’, ‘liblinear’, ‘sag’, ‘saga’} 选择优化算法，详细使用说明见官方文档<br>// class_weight 可以设置各类型的权重<br>// l1_ration 设置 Elastic-Net 中 ρ 控制正则化 L1 与正则化 L2 的强度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">reg = LogisticRegression().fit(X,y) <span class="comment"># 模型拟合</span></span><br><span class="line">reg.cof_  <span class="comment"># 得到系数矩阵</span></span><br><span class="line">reg.intercept_ <span class="comment"># 得到截距矩阵</span></span><br><span class="line">reg.score(X,y) <span class="comment"># 误差</span></span><br><span class="line">reg.predict(X) <span class="comment"># 得到预测的分类矩阵</span></span><br><span class="line">reg.predict_proba(X) <span class="comment"># 得到预测的概率</span></span><br></pre></td></tr></table></figure><ul><li><code>LogisticRegressionCV( )</code> 实现了内置交叉验证，可以找出最优的 C 和 l1_ratio 参数</li></ul><h3 id="SGD-随机梯度下降"><a href="#SGD-随机梯度下降" class="headerlink" title="SGD 随机梯度下降"></a>SGD 随机梯度下降</h3><p>可以拟合线性的回归和分类模型，在样本量很大时尤为有用，选择和函数时要避免过拟合。<br><code>SGDClassifier()</code> 和 <code>SGDRegressor()</code> 分别用于拟合分类问题和回归问题的线性模型，可使用不同的（凸）损失函数，支持不同的惩罚项。</p><h3 id="最近邻"><a href="#最近邻" class="headerlink" title="最近邻"></a>最近邻</h3><p>能够应用于决策边界非常不规则的分类情景</p><p>NearestNeighbors<br>BallTree<br>KDTree</p><p>最近邻分类属于<strong>基于实例的学习</strong>或<strong>非泛化学习</strong>：它不会去构造一个泛化的内部模型，而是简单地存储训练数据的实例。</p><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>决策树便于理解和解释，能够处理数值型数据和分类数据；但是容易产生一个过于复杂的模型，泛化性能会很差，结果不稳定，可以通过决策树的集成来得到缓解。如果某些类在问题中占主导地位会使得创建的决策树有偏差，建议在拟合前先对数据集进行平衡。</p><p>分类标准为最小化交叉熵（ID3），熵增益（C4.5）或基尼系数（Cart）</p><p><code>sklearn.tree.DecisionTreeClassifier(criterion=’gini’, splitter=’best’, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, presort=False)</code><br>// criterion 选择分类标准，可以使用”gini”或者”entropy”<br>// splitter 设置特征划分标准<br>// max_feature 划分的最大特征数<br>// max_depth 选择树的最大深度<br>// min_sample_split 设置最小样本分类<br>// min_sample_leaf 设置最小样本叶子数<br>// max_leaf_nodes 最大叶子节点数<br>// class_weight 设置类别权重<br>// presort 设置数据预排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">clf = DecisionTreeClassifier().fit(X,y)</span><br><span class="line">clf.n_class_ <span class="comment"># 分类数量</span></span><br><span class="line">clf.n_features_ <span class="comment"># 特征数量</span></span><br><span class="line">clf.n_outputs_ <span class="comment"># 输出数量</span></span><br><span class="line">clf.tree_ <span class="comment"># 得到分类树</span></span><br><span class="line">clf.get_depth() <span class="comment"># 得到分类深度</span></span><br><span class="line">clf.get_n_leaves() <span class="comment"># 得到叶子节点数</span></span><br><span class="line">clf.predict(X) <span class="comment"># 返回预测矩阵</span></span><br><span class="line">clf.predict_proba(X) <span class="comment"># 返回预测的概率</span></span><br><span class="line">clf.score(X,y) <span class="comment"># 返回训练分数</span></span><br></pre></td></tr></table></figure><ul><li><p>决策树回归模型 <code>sklearn.tree.DecisionTreeRegressor()</code> （不常用）</p></li><li><p>可以使用 export_graphviz 导出器以 Graphviz 格式导出决策树,结果保存为 pdf；Jupyter notebook 也可以自动内联式渲染这些绘制节点</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line">dot_data = tree.export_graphviz(clf, out_file=<span class="keyword">None</span>,\</span><br><span class="line">                    feature_names=iris.feature_names,\</span><br><span class="line">                    class_names=iris.target_names,  \</span><br><span class="line">                    filled=<span class="keyword">True</span>, rounded=<span class="keyword">True</span>,  \</span><br><span class="line">                    special_characters=<span class="keyword">True</span>)</span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line">graph.render(<span class="string">"classification_result"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show in Jupyter</span></span><br><span class="line">graph</span><br></pre></td></tr></table></figure><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><p>可用于分类，回归和异常检测，在高维空间中非常高效，<br>SVC, NuSVC 和 LinearSV</p><p>内核岭回归<br>核函数</p><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><p>GaussianNB<br>MultinomialNB<br>ComplementNB<br>BernoulliNB</p><h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><p><strong>1. Bagging</strong><br>在原始训练集的随机子集上构建一类黑盒估计器的多个实例，然后把这些估计器的预测结果结合起来形成最终的预测结果，在构建模型的过程中引入随机性，来减少基估计器的方差。</p><p><code>sklearn.ensemble.BaggingClassifier(base_estimator=None, n_estimators=10, max_samples=1.0, max_features=1.0, bootstrap=True, bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None, random_state=None, verbose=0)</code><br>// base_estimator 设置分类估计器，默认为决策树，可设置其它分类模型<br>// n_estimators 设置估计器的数量<br>// bootstrap 设置样例抽取是否放回<br>// bootstrap_features 设置特征抽取是否有放回<br>// oob_score 设置是否用额外的样本来评估泛化精度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line">clf = BaggingClassifier().fit(X,y)</span><br><span class="line">clf.predict(X)</span><br><span class="line">predict_proba(X)</span><br><span class="line">score(X, y)</span><br></pre></td></tr></table></figure><p><strong>2. 随机森林</strong><br>随机森林中的每棵树构建时的样本都是由训练集经过有放回抽样得到。在构建树的过程中进行结点分割时，选择的分割点不再是所有特征中最佳分割点，而是特征的一个随机子集中的最佳分割点，偏差通常会有略微的增大；但由于取了平均，总体上模型的泛化能力会更好。</p><p><code>sklearn.ensemble.RandomForestClassifier(n_estimators=’warn’, criterion=’gini’, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=’auto’, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None)</code><br>// n_estimators 调整森林里树的数量<br>// max_features 分割节点时考虑的特征的随机子集的大小。使用 max_features = sqrt(n_features)是比较好的默认值<br>// max_depth = None 和 min_samples_split = 2 结合可以生成完全树</p><ul><li>极限随机树 <code>ExtraTreesClassifier()</code></li><li>完全随机树构成森林 <code>RandomTreesEmbedding()</code></li></ul><p><strong>2. 梯度提升回归树(GBRT)</strong><br>GBRT 保证迭代的每一个阶段中选择损失最小的决策树，达到全局的最小损失<br>$F<em>m(x) = F</em>{m-1}(x) + \arg\min<em>{h} \sum</em>{i=1}^{n} L(y<em>i,F</em>{m-1}(x_i) - h(x))$<br>GBRT 具有强大的预测能力和鲁棒性，但是扩展性不够好</p><p><code>GradientBoostingClassifier(loss=’deviance’, learning_rate=0.1, n_estimators=100, subsample=1.0, criterion=’friedman_mse’, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, min_impurity_split=None, init=None, random_state=None, max_features=None, verbose=0, max_leaf_nodes=None, warm_start=False, presort=’auto’, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001)</code><br>// loss 设置损失函数，默认为 deviance（$-log_2$ 似然损失函数）<br>// learning_rate 设置学习步长<br>// subsample 设置每次子训练集的采样，1 为全采样，一般可设置为 0.5</p><p><strong>3. AdaBoost</strong><br>通过反复修改数据权重来训练一些弱学习器，由这些弱学习器的预测结果通过加权投票(或加权求和)的方式组合, 得到最终的预测结果。<br>$F<em>m(x) = F</em>{m-1}(x) + \gamma<em>m \sum</em>{i=1}^{n} \nabla<em>F L(y_i, F</em>{m-1}(x<em>i))$<br>$\gamma_m$代表学习步长，通过计算损失最小的梯度下降$\gamma_m = \arg\min</em>{\gamma} \sum<em>{i=1}^{n} L(y_i, F</em>{m-1}(x<em>i) - \gamma \frac{\partial L(y_i, F</em>{m-1}(x<em>i))}{\partial F</em>{m-1}(x_i)})$得出</p><p>初始化时，将所有弱学习器的权重都设置为 $w_i = 1/N$ ,接下来的连续迭代中，样本的权重逐个地被修改。上一轮迭代中被预测为错误结果的样本的权重将会被增加，而那些被预测为正确结果的样本的权重将会被降低。通过不断得到最快梯度下降的权重来减小损失函数。</p><p><code>sklearn.ensemble.AdaBoostClassifier(base_estimator=None, n_estimators=50, learning_rate=1.0, algorithm=’SAMME.R’, random_state=None)</code><br>// base_estimator 设置弱学习器，默认 DecisionTreeClassifier(max_depth=1)<br>// n_estimator 设置最大集成数量<br>// learning_rate 设置学习速率</p><p><strong>4. 投票分类器</strong></p><hr><hr><ul><li>最小角回归（LARS）：逐步寻找与响应最有关联的预测。当有很多预测有相同的关联时，它并不会继续利用相同的预测，而是在这些预测中找出应该等角的方向。高效但对噪声敏感。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;—loading …—&lt;/strong&gt;&lt;br&gt;scikit-learn 基于 Python 语言,建立在 NumPy ，SciPy 和 matplotlib 上,是简单高效的数据挖掘和数据分析工具&lt;br&gt;文章记录 scikit-learn API 的使用方法，包括监督学习、无监督学习，模型的选择和评估，数据集的加载和转换&lt;br&gt;学习笔记(1) 为监督学习的内容，解决回归和分类问题。包括线性回归，逻辑回归，梯度下降，最近邻，贝叶斯，决策树，支持向量机，集成方法，半监督学习等&lt;br&gt;API 只给出函数结构，参数具体使用参考&lt;a href=&quot;https://scikit-learn.org/stable/user_guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scikit-learn 官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="repo" scheme="https://hyqskevin.github.io/categories/repo/"/>
    
    
      <category term="python" scheme="https://hyqskevin.github.io/tags/python/"/>
    
  </entry>
  
</feed>
